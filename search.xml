<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Domain遷移</title>
      <link href="/2024/12/04/2024120401/"/>
      <url>/2024/12/04/2024120401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>Gandi續費太貴了,所以我跳去Cloudflare了…</p><span id="more"></span><h1 id="原由"><a class="markdownIt-Anchor" href="#原由"></a> 原由</h1><p>本來我的Domain是從<a href="https://www.freenom.com/en/index.html?lang=en">Freenom</a>買的,後來因為該平台的問題被取消了<code>.com</code>網域的管理權限,然後就直接被轉去<a href="https://www.gandi.net/zh-Hant">Gandi</a><br />其實Gandi也是很大的DNS register服務也很不錯的,但是他的續費實在太貴了,續費一年要37USD左右…(我本來在Freenom的價格一年大概10USD)<br />所以我就遷移去了便宜很多的<a href="https://www.cloudflare.com/zh-tw/">Cloudflare</a></p><h1 id="cloudflare-dns-register"><a class="markdownIt-Anchor" href="#cloudflare-dns-register"></a> Cloudflare DNS Register</h1><p>Cloudflare是個很大的網路服務公司,很久以前我就把我的DNS設定到cloudflare去進行設定,免費的服務就很好用了</p><h2 id="cloudflare價格"><a class="markdownIt-Anchor" href="#cloudflare價格"></a> Cloudflare價格</h2><p>Cloudflare沒有公開的價格,所以我從<a href="https://www.reddit.com/r/webdev/comments/17lpxa6/cloudflare_domain_registrar_pricing_table/?rdt=46259">網路上(Reddit)</a>找到了參考值<br />節錄一部分如下</p><table><thead><tr><th>TLD</th><th>Base Purchase Price</th><th>Base Renewal Price</th><th>ICANN Fee</th><th>Total First Year Price</th><th>Total Renewal Price</th><th>Average Annual Cost Over 5 Years</th></tr></thead><tbody><tr><td><a href="http://co.uk">co.uk</a></td><td>$4.71</td><td>$4.71</td><td>$-</td><td>$4.71</td><td>$4.71</td><td>$4.71</td></tr><tr><td><a href="http://me.uk">me.uk</a></td><td>$4.71</td><td>$4.71</td><td>$-</td><td>$4.71</td><td>$4.71</td><td>$4.71</td></tr><tr><td><a href="http://org.uk">org.uk</a></td><td>$4.71</td><td>$4.71</td><td>$-</td><td>$4.71</td><td>$4.71</td><td>$4.71</td></tr><tr><td>uk</td><td>$4.71</td><td>$4.71</td><td>$-</td><td>$4.71</td><td>$4.71</td><td>$4.71</td></tr><tr><td>win</td><td>$3.98</td><td>$4.98</td><td>$0.18</td><td>$4.16</td><td>$5.16</td><td>$4.96</td></tr><tr><td>work</td><td>$6.00</td><td>$6.00</td><td>$0.18</td><td>$6.18</td><td>$6.18</td><td>$6.18</td></tr><tr><td>us</td><td>$6.50</td><td>$6.50</td><td>$-</td><td>$6.50</td><td>$6.50</td><td>$6.50</td></tr><tr><td><a href="http://com.co">com.co</a></td><td>$8.00</td><td>$8.00</td><td>$-</td><td>$8.00</td><td>$8.00</td><td>$8.00</td></tr><tr><td>cc</td><td>$8.00</td><td>$8.00</td><td>$-</td><td>$8.00</td><td>$8.00</td><td>$8.00</td></tr><tr><td><a href="http://net.co">net.co</a></td><td>$8.00</td><td>$8.00</td><td>$-</td><td>$8.00</td><td>$8.00</td><td>$8.00</td></tr><tr><td><a href="http://nom.co">nom.co</a></td><td>$8.00</td><td>$8.00</td><td>$-</td><td>$8.00</td><td>$8.00</td><td>$8.00</td></tr><tr><td>com</td><td>$9.59</td><td>$9.59</td><td>$0.18</td><td>$9.77</td><td>$9.77</td><td>$9.77</td></tr><tr><td>net</td><td>$9.92</td><td>$9.92</td><td>$0.18</td><td>$10.10</td><td>$10.10</td><td>$10.10</td></tr><tr><td>org</td><td>$9.93</td><td>$9.93</td><td>$0.18</td><td>$10.11</td><td>$10.11</td><td>$10.11</td></tr><tr><td>xyz</td><td>$10.00</td><td>$10.00</td><td>$0.18</td><td>$10.18</td><td>$10.18</td><td>$10.18</td></tr><tr><td>vip</td><td>$11.00</td><td>$11.00</td><td>$0.18</td><td>$11.18</td><td>$11.18</td><td>$11.18</td></tr><tr><td>app</td><td>$12.00</td><td>$12.00</td><td>$0.18</td><td>$12.18</td><td>$12.18</td><td>$12.18</td></tr><tr><td>me</td><td>$12.85</td><td>$12.85</td><td>$-</td><td>$12.85</td><td>$12.85</td><td>$12.85</td></tr><tr><td>cloud</td><td>$15.00</td><td>$15.00</td><td>$0.18</td><td>$15.18</td><td>$15.18</td><td>$15.18</td></tr><tr><td>wiki</td><td>$19.00</td><td>$19.00</td><td>$0.18</td><td>$19.18</td><td>$19.18</td><td>$19.18</td></tr><tr><td>blog</td><td>$20.00</td><td>$20.00</td><td>$0.18</td><td>$20.18</td><td>$20.18</td><td>$20.18</td></tr><tr><td>games</td><td>$20.00</td><td>$20.00</td><td>$0.18</td><td>$20.18</td><td>$20.18</td><td>$20.18</td></tr><tr><td>co</td><td>$22.00</td><td>$22.00</td><td>$-</td><td>$22.00</td><td>$22.00</td><td>$22.00</td></tr><tr><td>tv</td><td>$25.00</td><td>$25.00</td><td>$-</td><td>$25.00</td><td>$25.00</td><td>$25.00</td></tr><tr><td>plus</td><td>$25.00</td><td>$25.00</td><td>$0.18</td><td>$25.18</td><td>$25.18</td><td>$25.18</td></tr><tr><td>zone</td><td>$25.00</td><td>$25.00</td><td>$0.18</td><td>$25.18</td><td>$25.18</td><td>$25.18</td></tr><tr><td>market</td><td>$28.00</td><td>$28.00</td><td>$0.18</td><td>$28.18</td><td>$28.18</td><td>$28.18</td></tr><tr><td>media</td><td>$28.00</td><td>$28.00</td><td>$0.18</td><td>$28.18</td><td>$28.18</td><td>$28.18</td></tr><tr><td>io</td><td>$36.00</td><td>$36.00</td><td>$-</td><td>$36.00</td><td>$36.00</td><td>$36.00</td></tr></tbody></table><p>這個價格只能參考,因為我轉移後實際的金額是10.XX USD(轉移的時候會強制續費一年…)</p><p>另外看起來是一定得綁定信用卡,不過因為不管一次買幾年價格都一樣…所以就乾脆讓它自動續費就好了…</p><h2 id="mail-alias"><a class="markdownIt-Anchor" href="#mail-alias"></a> Mail Alias</h2><p>我現在Domain的信箱,是使用zoho的服務,不過老實說我對於印度人的印象沒那麼好…<br />Cloudflare其實是可以把Domain的Email alias到Gmail透過設定後除了可以收信以外也可以用自己的域名寄信</p><ul><li><a href="https://blog.halisunreal.com/posts/use-your-own-domain-email/">HalisUnreal的Blog</a></li><li><a href="https://mskclover.com/2024/07/31/custom-email-on-gmail-by-cloudflare/">使用 Cloudflare 在 Gmail 上配置域名邮箱</a></li><li><a href="https://www.waterwater.moe/posts/2024/2024-01-01_%E4%BD%BF%E7%94%A8-cloudflare--gmail-%E5%AE%8C%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1%E6%94%B6%E5%8F%91/">使用 Cloudflare + Gmail 完成自定义域名邮箱收发</a></li></ul><p>可能後期還是要考慮一下是不是要為了縮減過多的服務平台把Email也轉移反正可以mapping到任意的Gmail帳號上隨便申請一個Gmail後拿來mapping就好了</p><p>這樣家人的mail address也容易弄好</p><h1 id="總結"><a class="markdownIt-Anchor" href="#總結"></a> 總結</h1><p>$難賺,所以還是花點心思把這些<code>必要支出</code>都做個整理力求最小化還是比較實在的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible中毒中....</title>
      <link href="/2024/11/15/2024111401/"/>
      <url>/2024/11/15/2024111401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本來是想振作起來寫一些<code>shell script</code>的說…結果中間有些動作想說用<code>ansible</code>寫看看可能會比較簡單<br>結果一寫下去…就..不 可 挽 回的沈迷進去了….</p><span id="more"></span><h1 id="Ansibleとは？"><a href="#Ansibleとは？" class="headerlink" title="Ansibleとは？"></a>Ansibleとは？</h1><p>Ansible是RedHat開發的一個自動化工具,透過python跟ssh,實現了一台<code>control machine</code> rules them all<br>之前我也不是沒有試著用過,但是當時的我只覺得ansible是個又慢又複雜又難懂的東西….所以就稍微弄了點入門的就放棄了<br>結果這次我不知道哪裡忽然開竅了,寫著寫著就越來越包山包海</p><h2 id="相關的教學"><a href="#相關的教學" class="headerlink" title="相關的教學"></a>相關的教學</h2><p>補充一些想使用ansible的入門者參考的文獻與影片</p><h3 id="Documents"><a href="#Documents" class="headerlink" title="Documents"></a>Documents</h3><ul><li><a href="https://docs.ansible.com/ansible/latest/index.html">Ansible Community Documentation</a></li><li><a href="https://docs.ansible.org.cn/ansible/latest/index.html">Ansible社區文檔</a></li><li><a href="http://www.ansible.com.cn/index.html">Ansible中文權威指南</a></li></ul><h2 id="Youtube教學影片"><a href="#Youtube教學影片" class="headerlink" title="Youtube教學影片"></a>Youtube教學影片</h2><p><a href="https://www.youtube.com/playlist?list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70" title="Playlist - Getting started with Ansible"><img src="http://img.youtube.com/vi/3RiVKs8GHYQ/0.jpg" alt="Getting Started with Ansible - Learn Linux TV"></a></p><p>Jay from Learn Linux TV會提供很多有用的Linux教學影片（不過基本上都是比較基本的教學）除了Ansible也可以翻翻其他的主題影片</p><h2 id="先前的卡關點"><a href="#先前的卡關點" class="headerlink" title="先前的卡關點"></a>先前的卡關點</h2><p>我之前使用ansible主要卡在以下兩點</p><h3 id="變數-迴圈使用"><a href="#變數-迴圈使用" class="headerlink" title="變數&#x2F;迴圈使用"></a>變數&#x2F;迴圈使用</h3><p>ansible的迴圈功能基本上都會伴隨變數一起,若是不會定義<code>&quot;&#123;&#123;  &#125;&#125;&quot;</code>的Jinja2變數格式基本上就用不了迴圈<br>不用迴圈的ansible playbook就是一個肥大,機器與重複性動作越多就跑得越囉唆與緩慢的東西</p><h3 id="條件"><a href="#條件" class="headerlink" title="條件"></a>條件</h3><p>這個也是一個很大的重點,如同<code>shell script</code>不會使用<code>if ..else ..fi</code>來判斷狀態的話<code>shell script</code>也會寫不下去的….</p><h2 id="其他上癮的地方"><a href="#其他上癮的地方" class="headerlink" title="其他上癮的地方"></a>其他上癮的地方</h2><h2 id="inculde-task-inculde-roles"><a href="#inculde-task-inculde-roles" class="headerlink" title="inculde_task, inculde_roles"></a>inculde_task, inculde_roles</h2><p>之前我就針對<code>ansible</code>的<code>roles</code>機能很有好感,畢竟這是可以將一個很大的playbook.yml支解成多個小型好寫的<code>roles</code>來減輕編寫的負擔以及再利用等特徵<br>但是<code>roles</code>是靜態的寫上的就是一定會被呼叫並且執行,但是搭配上<code>inculde_task</code>與變數判定,就可以做成依照<code>node</code>特性(例如<code>os_family</code>自動判別作業系統的類型）<br><code>動態的</code>載入對應的<code>task.yml</code>使一個playbook.yml的覆蓋範圍擴大到幾乎所有的機器（尤其是像我這種喜歡用不同<code>distrobution</code>來做不同類型server&#x2F;workstation的人）</p><h1 id="殘存的問題點"><a href="#殘存的問題點" class="headerlink" title="殘存的問題點"></a>殘存的問題點</h1><h2 id="高級用法還搞不清楚"><a href="#高級用法還搞不清楚" class="headerlink" title="高級用法還搞不清楚"></a>高級用法還搞不清楚</h2><p>ansible是一個不停在改版而且有一大堆人在鑽研的工具,所以有蠻多複雜條件判斷與迴圈寫法我還不是很懂(對..就是那種看人家的範例也看不懂的那種…不懂）<br>所以目前寫起來的playbook.yml還是看起來很粗糙,效率也沒最佳化到最好不過最起碼能動了….不過話說回來我<code>shell script</code>的寫作水準也就那樣…算是兩個半斤八兩吧…</p><h2 id="Output美化"><a href="#Output美化" class="headerlink" title="Output美化"></a>Output美化</h2><p>這個單純就是有點沒苦硬吃的味道了…雖然可以靠定義<code>ansible.cfg</code>裡的參數<code>display.skipped.host=false</code>把skipped的item都不顯示來讓顯示好看點甚至更過份的把<code>display.ok.host=false</code>也定義上,這樣除了changed的item以外都不顯示….<br>或是我有看到一個利用<code>callback</code>參數變化讓除了定義的顯示以外都不顯示（有點像<code>shell script</code>內有echo的文字才顯示的感覺）<br>不過講穿了這個就算沒有花心力在上面也可以,畢竟我沒打算把我的ansible專案放到外面去….橫豎都只有我自己用,所以不好看也沒關係,堪用就好了</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>首先,因為ansible的進度比以前增加許多,所以我多了不少該update進wiki的筆記在等著我寫….(懶癌要犯了…）<br>所以可見的未來一段時間,我應該會有不少事情可以做了…好高興唷～～（ㄟ！？）<br>坑也挖了…就看後面有沒有辦法填上囉</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雜談 - Version 2024-10</title>
      <link href="/2024/10/15/2024101501/"/>
      <url>/2024/10/15/2024101501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近發生了一件令我傷心的小事情..</p><p>我很喜歡的<code>manjaro-zsh-config</code>從AUR消失了,原因是原作者認為是Manjaro特有的Package所以不希望放在AUR內….</p><span id="more"></span><h1 id="Manjaro-zsh-config"><a href="#Manjaro-zsh-config" class="headerlink" title="Manjaro-zsh-config"></a>Manjaro-zsh-config</h1><p>其實我翻找了一下我自己的<a href="https://kiwi0093.github.io/wiki/wiki/Misc/Zsh/1-Zsh&Powerlevel10k/">Wiki</a>內是有手動安裝的方法的, 只不過我沒寫成script安裝而已</p><p>即使是被拿掉也是可以裝的上去, 只不過感覺不太開心</p><p>我可以試試是否依靠保留PKGBUILD檔案搭配<code>makepkg -si</code>的方法可能不能一樣安裝</p><p>不過可能寫成script會比較好…</p><h1 id="生成式AI"><a href="#生成式AI" class="headerlink" title="生成式AI"></a>生成式AI</h1><p>在同事的需求下,我也嘗試了<code>Ollama+WebUI</code>的方案搭配<code>LLaMA 3</code>的LLM測試過了….</p><p>結果是跑得不快（我架在我的Orcal Free Tier - Arm VPS)而且看起來要讓它可以指令畫圖有點囉唆…</p><p>所以我就把它砍了….</p><p>有興趣的人可以參考下面的Blog</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://ivonblog.com/posts/foss-local-llm/">Ivon的Blog - 離線版ChatGPT安裝方法！在個人電腦跑AI大型語言模型的開源軟體列表</a></li><li><a href="https://ivonblog.com/posts/ollama-llm-docker/">Ivon的Blog - Linux用docker-compose部署Open WebUI + Ollama語言模型網頁界面</a></li></ul><h2 id="垃圾話"><a href="#垃圾話" class="headerlink" title="垃圾話"></a>垃圾話</h2><p>我最近都在翻這位Ivon的Blog, 不得不說我還真感謝它, 整個Blog的內容很多都是我感興趣的主題</p><p>甚至有它都寫好了我幹麻要自己試過後再寫一遍的感想….</p><h1 id="好用的工具-Android相關"><a href="#好用的工具-Android相關" class="headerlink" title="好用的工具 - Android相關"></a>好用的工具 - Android相關</h1><p>其實大多數也是從Ivon的Blog看到後裝來用看看的….所以我就不多寫,大概列一下我覺得對我真的有用的幾個</p><h3 id="Obtainium"><a href="#Obtainium" class="headerlink" title="Obtainium"></a>Obtainium</h3><p>這個可以自動確認並update從Github安裝的apk程式真的還蠻屌的…要是他有出windows版我應該會裝上…<br>（阿你不是都用<code>Winget</code>?）</p><h3 id="Innertune-Pipepipe"><a href="#Innertune-Pipepipe" class="headerlink" title="Innertune &amp; Pipepipe"></a>Innertune &amp; Pipepipe</h3><p>這兩個基本上都是無廣告Youtube的類型, 只是一個是看片,令一個是拿來聽youtube music的….<br>雖然我因自己的松鼠屬性,大多數都會試圖把東西收在自己可以控制的地方,然後跑串流,但是對於少數想聽的但是又不想收一大堆的東西這還是很好用的（例如我還蠻喜歡Simyee的粵語版青花瓷的…但是我又不收中文歌…）</p><h3 id="Pairdrop"><a href="#Pairdrop" class="headerlink" title="Pairdrop"></a>Pairdrop</h3><p>這個真的是好用….其實就是open source的airdrop…我也試著自己架設<code>via docker</code>不過沒弄好,暫時就先用官方的服務,後續再來弄一下</p><h1 id="煮飯…"><a href="#煮飯…" class="headerlink" title="煮飯…"></a>煮飯…</h1><p>好啦…其實我這段時間都比較集中在做菜上面</p><p>為此還去裝上了<code>mealie</code>來紀錄自己的食譜…不過因為我很覽的拍照片…所以我也不知道這些食譜到底我有耐心紀錄到什麼時候….</p><h1 id="觀影心得"><a href="#觀影心得" class="headerlink" title="觀影心得"></a>觀影心得</h1><p>無…老實說有小孩後我發現自己越來越不像阿宅了…（但是還是不喜歡出門）</p><p>不要說動畫或是電影了…連書都少看了</p><p>還是等小孩再大一點看看有沒有機會回歸好了…（嘆氣…）</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>阿里阿雜的寫了一堆…</p><p>這個Blog當初是為了紀錄我自己的做的翻牆學習筆記弄的….現在搞的很像一個失意中年的牢騷抒發空間…</p><p>不過這樣也好,畢竟我都盡量把筆記都挪到Wiki去了…這裡基本上就當老頭子我的抒發天地好了….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雜談 - Version 2024-09</title>
      <link href="/2024/09/05/2024090501/"/>
      <url>/2024/09/05/2024090501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>沉寂了很久,不僅僅是我一直持續地去做物理治療企圖改善我困擾許久的坐骨神經痛,更大的理由是生活陷於平靜,沒有弄新東西的衝動</p><span id="more"></span><p>驚覺感覺自己越來越像退休後無所事事的老年人,昨天還是開始沒事找事的開始測試一些其實用不上的東西…</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>馬上就來結論,結論就是測試搞了一天沒有任何有效益的成果,於是我全數砍掉了…,不過還是大概講一下相關的心得吧</p><h1 id="研究-內容"><a href="#研究-內容" class="headerlink" title="研究(!?)內容"></a>研究(!?)內容</h1><p>主要的測試部分都是跟影音有關的Service</p><h2 id="小雅Alist"><a href="#小雅Alist" class="headerlink" title="小雅Alist"></a>小雅Alist</h2><p><a href="https://www.youtube.com/watch?v=L5AbBdMBo8k" title="小雅Alist"><img src="http://img.youtube.com/vi/L5AbBdMBo8k/0.jpg" alt="小雅Alist"></a></p><p>我承認,我看到介紹後我心動了,然後我就想弄起來…<br>但是我在第一步的第一步 - 創建阿里雲盤帳號 這點就夭折了…因為我沒有中國電話門號…<br>所以只能想像我自己應該是可以弄得起來的…..</p><h2 id="TubeArchivist"><a href="#TubeArchivist" class="headerlink" title="TubeArchivist"></a>TubeArchivist</h2><p><a href="https://www.tubearchivist.com/">TubeArchivist</a>是一個Off-line的Youtube收集器,基本功能就是可以訂閱youtube chanel後把該chanel內的影片全數載下來,變成離線可以觀看….</p><p>然而它還可以合併提供檔案給<code>emby</code>&#x2F;<code>plex</code>&#x2F;<code>jellyfin</code>當作庫藏影片播放</p><h2 id="TubeArchivist-Plugin-for-metadata"><a href="#TubeArchivist-Plugin-for-metadata" class="headerlink" title="TubeArchivist-Plugin for metadata"></a>TubeArchivist-Plugin for metadata</h2><p>雖然Tubearchivist抓下來的已經是影片檔,但是檔名是依Youtube ID建立的,根本不是給人看得metadata<br>所以就會有人開發把youtube metadata弄下來轉到<code>emby/jellyfin</code>上讓人看到的是正確的東西的Plugin</p><h3 id="TubeArchivist-emby"><a href="#TubeArchivist-emby" class="headerlink" title="TubeArchivist-emby"></a><a href="https://github.com/xinmans/tubearchivist-emby">TubeArchivist-emby</a></h3><p>因為<code>emby</code>沒有做成plugin的形式,所以得外掛一個Python的service去轉,基本上我弄了一個早上都沒成功,我又不想去debug python code…所以就打上放棄的印章</p><h3 id="TubeArchivist-JF-Plugin"><a href="#TubeArchivist-JF-Plugin" class="headerlink" title="TubeArchivist-JF-Plugin"></a><a href="https://github.com/tubearchivist/tubearchivist-jf-plugin">TubeArchivist-JF-Plugin</a></h3><p>為了可以動,我還去裝了<code>jellyfin</code>結果很成功…眉角就是</p><ul><li><p>安裝好Pligin後要記得重開機Jellyfin不然plugin不會啟動</p></li><li><p>設定好Plugin後存檔完後記得也要重開機Jellyfin不然連線會一直失敗…..沒辦法更新meta</p></li></ul><h2 id="IPTV"><a href="#IPTV" class="headerlink" title="IPTV"></a>IPTV</h2><h3 id="Jellyfin"><a href="#Jellyfin" class="headerlink" title="Jellyfin"></a>Jellyfin</h3><p>因為<code>Emby</code>的電視直播功能需要付費解鎖….所以我就剛好因為TubeArchivist的關係把主意打在Jellyfin頭上</p><p>結論上來說,在我好不容易搞定IPTV一堆前置設定(嚴格說起來也不算搞定,因為最終我的節目表還是有問題)<br>最後還是不能撥放…(同樣的連結我用<code>VLC</code>, 甚至Emby的IPTV Plugin都可以撥放電視節目<br>但是Jellyfin就是error不能撥…所以我也放棄了..連同弄好的TA一起消滅</p><h3 id="Xetve"><a href="#Xetve" class="headerlink" title="Xetve"></a>Xetve</h3><p>這是一個IPTV用的Tuner跟Guide聚合工具,不過我到最後還是沒搞懂…</p><h4 id="相關網頁"><a href="#相關網頁" class="headerlink" title="相關網頁"></a>相關網頁</h4><ul><li><a href="https://iptv-org.github.io/">IPTV-org</a></li><li><a href="https://xmltv.host/">XMLTV Source</a></li><li><a href="https://epg.pw/xmltv.html?lang=zh-hant">EPG.PW</a></li></ul><h3 id="Emby"><a href="#Emby" class="headerlink" title="Emby"></a>Emby</h3><p>雖說電視直播是要錢的,但是有個免錢的<code>IPTV</code> plugin可安裝,基本上把iptv-org裡有效的m3u link一個一個的建入也是可以看得…不過頻寬可能不夠,加上畫質慘不忍睹的只有480p…所以還是放棄比較實在..</p><h1 id="結論-Again…"><a href="#結論-Again…" class="headerlink" title="結論 Again…."></a>結論 Again….</h1><p>雖然失敗了..不過好歹也花了時間…後面再看看還有什麼可以鑽研一下….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雜談 - Version 2024-03</title>
      <link href="/2024/03/28/2024032801/"/>
      <url>/2024/03/28/2024032801/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搬家住了一陣子,生活也日趨平淡,除了惱人的坐骨神經痛以外,平靜的生活沒有什麼特別的….</p><span id="more"></span><h1 id="最近的動向"><a href="#最近的動向" class="headerlink" title="最近的動向"></a>最近的動向</h1><p>一言以蔽之，就是又把心思放在學習做飯上面…（沒錯…就是做飯）</p><h2 id="藏書-水盆羊肉-山寨版"><a href="#藏書-水盆羊肉-山寨版" class="headerlink" title="藏書&#x2F;水盆羊肉(山寨版)"></a>藏書&#x2F;水盆羊肉(山寨版)</h2><p>在蘇州生活的那些年，一到冬天，就常常跟同事去吃個藏書羊肉，對於不喜歡羊羶味的我來說這是少數幾個我還蠻喜歡的羊肉料理(其他還有烤羊肉串)</p><p>去年跟著老婆回家省親的時候也順便帶了水盆羊肉的燉料回來，所以就做了以下這個<br><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/lamp.jpg" alt="山寨版藏書/水盆混何"></p><p>山寨的原因是，藏書羊肉不放燉料..水盆羊肉沒有大白菜等東西…<br>我單純就是混在一起弄</p><p>然後朋友來家慶祝喬遷的時候又做了這個</p><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/lamp+chicken01.jpg" alt="羊肉湯+乾鍋"></p><p>不過後面發現還是不要乾鍋跟羊肉湯一起做成鴛鴦鍋….這樣乾的會燒焦…</p><h2 id="Paella-山寨版"><a href="#Paella-山寨版" class="headerlink" title="Paella(山寨版)"></a>Paella(山寨版)</h2><p>這個是我跟老婆小孩去大有梯田玩的時候吃了Paella後，忽然心中有感招覺得我應該自己也來做一下之後做的一號試作品，之所以叫山寨版是因為我沒用昂貴的番紅花..</p><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/paella01.jpg" alt="Paella(Fake)"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>做飯的確是很令人開心的事情…害我都想是不是要來寫自己的食譜了….（還是算了吧寫食譜要一堆照片….）<br>因為我家小孩好像很喜歡吃義大利麵，所以後面應該會稍微花時間研究一下好吃的義大利麵怎麼做…</p><p>另外上面照片的食物作法..我都不會放在wiki唷…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎念 - Version 2024-02</title>
      <link href="/2024/02/17/2024021701/"/>
      <url>/2024/02/17/2024021701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>同上一篇所述,最近因為搬家所以重新整理了<ruby><font color="lightblue"><del>家中的所有系統與服務</del></font><rp>(</rp><rt><font color="red">聯合艦隊</font></rt><rp>)</rp></ruby>除了上篇重點的硬體以外,我也想來<ruby><font color="lightblue"><del>Review一下軟體面</del></font><rp>(</rp><rt><font color="red">訴苦跟抱怨</font></rt><rp>)</rp></ruby></p><span id="more"></span><h1 id="系統安裝"><a href="#系統安裝" class="headerlink" title="系統安裝"></a>系統安裝</h1><p>我之前在wiki上放了不少安裝的script,但是這次發現其實很多都用不到了(或是不需要寫成那樣了)</p><h2 id="Archlinux"><a href="#Archlinux" class="headerlink" title="Archlinux"></a>Archlinux</h2><p>自從<code>Archlinux</code>提供了<code>archinstall</code>這個自動安裝script後..我就再也不需要自己寫Archlinux的安裝script了(當然啦要視需要裝很多台設定特化的還是可以寫…)主要是現在docker很方便所以也不需要那麼多台ＶＭ跑個別archlinux host所以自動設定好的安裝script的CP值就大幅度下降了…</p><h3 id="Unifi-Network-Application"><a href="#Unifi-Network-Application" class="headerlink" title="Unifi Network Application"></a>Unifi Network Application</h3><p>這玩意經過奮戰後,還是無法正常用docker來跑,(跟dnsmasq一樣)所以最終我就只好掛在一台</p><p>Archlinux上,安裝上倒是很簡單,如上一篇所述,只需要把<code>AUR</code>內的裝上就好了</p><p><del>不過我後來發現,可能是SSL的關係,後來我給他一個內部指向用的Domain卻沒辦法用該domain去access管理介面只能用<code>https://ip:8443</code>來連線</del>事後確認不是DN的問題是Vaultwarden的紀錄錯了所以才不能login….(已懺悔)</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>本來在Windows10以後安裝Windows就不需要花什麼時間跟精神了,現在又因為往Linux靠齊(我也不知道是不是這個緣故)導致Windows的cli工具也變好用了,所以我現在安裝程式都是用<code>winget</code>直接安裝,倒也不是這樣安裝就比較炫,只是單純的依靠winget安裝的程式可以很輕鬆地靠<code>winget</code>來update</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尋找XXX程式</span></span><br><span class="line">winget search XXX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝XXX程式</span></span><br><span class="line">winget install XXX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除XXX程式</span></span><br><span class="line">winget uninstall XXX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有程式</span></span><br><span class="line">winget update --all</span><br></pre></td></tr></table></figure><h2 id="PhotonOS"><a href="#PhotonOS" class="headerlink" title="PhotonOS"></a>PhotonOS</h2><p>這個其實沒什麼特別好設定的,就這次裝的5.0來說,基本上只要一開始IP設定是OK的,頂多就是</p><p>在<code>/etc/fstab</code>裡面加上要加掛的NFS folder,然後記得要安裝<code>docker-compose</code>(現在可以直接用<code>yum install docker-compose</code>安裝就好了)以及<code>systemctl enable docker.service</code>還有<code>systemctl enable remote-fs.target</code>讓機器開機會自己跑docker還有加掛NFS folder就好了</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>經過測試,目前我怎麼測試<code>nfs-volume</code>都還是失敗的,所以我現在還是老方法的在本機上乖乖的建立docker volume然後用script自動備份到nfs folder內進行備份比較簡單</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>我想我需要大改一下wiki內的資料,因為有蠻多東西現在沒用到了,script的方向大概也只會有個人化用途的,另外應該會花些時間再來研究ansible</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FreeBSD </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Server! New IT Device</title>
      <link href="/2024/01/30/2024013001/"/>
      <url>/2024/01/30/2024013001/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一陣子終於完成新家的裝潢及搬運,稟持著<ruby><font color="lightblue"><del>更新換代</del></font><rp>(</rp><rt><font color="red">喜新厭舊</font></rt><rp>)</rp></ruby>,新家的網路設備與相關Server我幾乎都換了,所以自然會有一些更換機器與設定的部份要來筆記一下</p><span id="more"></span><h1 id="硬體介紹"><a href="#硬體介紹" class="headerlink" title="硬體介紹"></a>硬體介紹</h1><ul><li><p>ASUS TS110-E14</p><ul><li><p>這台現在是我的主要Esxi Server,目前跑以下VM</p><ul><li><p>FreeBSD 14-release X1 : Gateway + Firewall</p></li><li><p>Archlinux X1 : DHCPd + DNS + Unifi Network Application</p></li><li><p>PhotonOS 5 X3 : Docker hosts for Containers</p></li><li><p>Xigmanas 13 With PCI passthrough X2 : Server Backup and Temp</p></li></ul></li></ul></li><li><p>HPE Microserver Gen8</p><ul><li>Xigmanas 13 : Main NAS for Media Center</li></ul></li><li><p>Unifi Switch Enterprise 8 PoE</p><ul><li>Main Switch</li></ul></li><li><p>Access Point U6 In-Wall</p></li><li><p>Access Point U6 Pro(運送中)</p></li></ul><h1 id="內容介紹"><a href="#內容介紹" class="headerlink" title="內容介紹"></a>內容介紹</h1><h2 id="Unifi系列"><a href="#Unifi系列" class="headerlink" title="Unifi系列"></a>Unifi系列</h2><p>其實主打的就是一個騷包….</p><p>想說把新家的IT基礎設備換成類商用等級的,並且可以用一個中控台直接apply設定到AP,應該會比較方便,並且剛好被老家之前換的<strong>TP-Link Deco X75</strong>雷到,高單價的Mesh AP居然沒有whitelist mode的MAC Address filter功能…</p><p>原來想說房子不大用台<strong>U6 In-Wall</strong>就可以搞定,無奈位置不好電視牆背後的空間訊號都不好</p><p>所以再買台<strong>U6 Pro</strong>來補一下</p><h2 id="HPE-Microserver-Gen8"><a href="#HPE-Microserver-Gen8" class="headerlink" title="HPE Microserver Gen8"></a>HPE Microserver Gen8</h2><p>這台是舊機本來有兩台,不過因為老家的ASUS Server硬體掛了(10年左右也夠本了)所以得挪用一台回老家充當NAS使用,剩下的一台就直接<strong>10GbE NIC + 16TB HDD X4</strong>變成一台有<strong>48T</strong>可用空間的<strong>raidz1</strong> NAS</p><h2 id="ASUS-TS110-E14"><a href="#ASUS-TS110-E14" class="headerlink" title="ASUS TS110-E14"></a>ASUS TS110-E14</h2><p>這台沒什麼懸念就是<strong>Esxi Server</strong>,不過在建構基礎網路環境的時候還是很痛</p><h3 id="FreeBSD-14-Gateway"><a href="#FreeBSD-14-Gateway" class="headerlink" title="FreeBSD 14 Gateway"></a>FreeBSD 14 Gateway</h3><p>沿用過去的習慣,Gateway還是選用老牌可靠的FreeBSD+pf+ipfw</p><h4 id="網路架構"><a href="#網路架構" class="headerlink" title="網路架構"></a>網路架構</h4><p>本來是想要全部用一個C class子網路搞定所有的（這樣可以簡化架構,只是沒有在我手上跟殘廢沒兩樣的DMZ區隔）結果發現因為<strong>NAT Loopback</strong>問題導致內部網路沒辦法Access<del>我對外的Service所以只能再次改回原來的WAN+LAN+DMZ的架構</del>修改pf設定後解決了這個問題-參考<a href="https://www.twbsd.org/cht/book/new/ch12.htm">這裡</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Nat Loopback</span></span><br><span class="line">no nat on $int_if proto tcp from $int_if to $int_net</span><br><span class="line">rdr on $int_if proto tcp from $int_net to $ext_ip port &#123; 25, 165, 993 &#125; -&gt; 192.168.0.2</span><br><span class="line">nat on $int_if proto tcp from $int_net to 192.168.0.2 port &#123; 25, 165, 993 &#125; -&gt; $int_if</span><br></pre></td></tr></table></figure><p>所以最終還是整回一個C Class subnet解決</p><h3 id="Archlinux-Dnsmasq-Unifi"><a href="#Archlinux-Dnsmasq-Unifi" class="headerlink" title="Archlinux Dnsmasq+Unifi"></a>Archlinux Dnsmasq+Unifi</h3><p>這個算是本次的大型地雷的一部份,在原始的構想中我是打算把<strong>dnsmasq</strong>還有<strong>Unifi Network Application</strong>都用docker container掛起來就好了結果</p><h4 id="Dnsmasq"><a href="#Dnsmasq" class="headerlink" title="Dnsmasq"></a>Dnsmasq</h4><p>用Docker是可以跑得起來,但是因為IP區段的關係加上我沒有認真去研究Mapping,所以就出現了,service雖然有跑起來,但是其他client根本沒有辦法正常跑dhcp跟dns,搞了半天一把dnsmasq移到獨立的VM上就好了什麼都不用改….</p><h4 id="Unifi-Network-Application"><a href="#Unifi-Network-Application" class="headerlink" title="Unifi Network Application"></a>Unifi Network Application</h4><p>這個就更氣人,不是依照說明搭配的<strong>mongodb</strong>有問題就是mongodb搞定後controller因為java問題無法正確跑出網頁…看了原來落落長的說明之後發現只需要在<strong>Archlinux</strong>有安裝yay的狀態下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S unifi</span><br></pre></td></tr></table></figure><p>然後只要確認jre的version是17就好了….一行指定搞定所有…..</p><h3 id="XigmaNAS"><a href="#XigmaNAS" class="headerlink" title="XigmaNAS"></a>XigmaNAS</h3><p>有鑑於Docker後端及一些系統的備份需求,我掛了一個ZFS Mirror的NAS透過nfs掛到各server上進行基本備份, 後續會搭配自建的Git server一併做整體內部的專案管理</p><p>另外,老家的機器之前是直接在Esxi上加HDD做TEMP供BT download或是其他系統需要的容量擴充使用,但是在這次的移機中我也飽受因為沒有同時加掛該HDD導致某些VM開不起來</p><p>所以這次我就把Temp HDD掛在XigmaNAS內再走nfs export出去</p><h1 id="酸爽的過程重點"><a href="#酸爽的過程重點" class="headerlink" title="酸爽的過程重點"></a>酸爽的過程重點</h1><h2 id="XigmaNAS無法加掛Temp槽"><a href="#XigmaNAS無法加掛Temp槽" class="headerlink" title="XigmaNAS無法加掛Temp槽"></a>XigmaNAS無法加掛Temp槽</h2><p>不知道是啥原因,我的XigmaNAS就是沒辦法加上Temp槽,所以最後我只好再加開一台VM以及其配套PCI Passthrough的硬體去跑一個單獨的XigmaNAS專做Temp export使用</p><h2 id="Unifi系列-1"><a href="#Unifi系列-1" class="headerlink" title="Unifi系列"></a>Unifi系列</h2><p>如同前面提到的,該死的Unifi-Network-Application沒辦法在Docker上好好的運作…加上Dnsmasq也不順所以最終多開了一台VM</p><h2 id="WiFi-AP位置不良"><a href="#WiFi-AP位置不良" class="headerlink" title="WiFi AP位置不良"></a>WiFi AP位置不良</h2><p>裝潢設計的時候大概我的腦子被什麼東西啃了,所以U6 In-Wall的安裝位置不好,會背對兩個臥室及兩個洗手間導致訊號不好…所以只好在加裝一顆U6 Pro提早達成Unifi無性增殖…</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>住在新家是個很高興的事情,但是過程中的搬家卻不是….使用新的Server及變更架構是很高興(?)的事情,但是硬體爆掉得緊急救援以及大量資料搬遷卻不是….</p><p>一些詳細的設定變更部份我會再update到wiki裡面去</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fight! New Working NB</title>
      <link href="/2023/07/26/2023072701/"/>
      <url>/2023/07/26/2023072701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於<ruby><font color="lightblue"><del>不知名原因</del></font><rp>(</rp><rt><font color="red">高達八成是我家小孩幹的</font></rt><rp>)</rp></ruby>我的公司配給NB的螢幕整個死透<br>讓我過了一段只能外接的日子…</p><p>在敝司<ruby><font color="lightblue"><del>狼狽為奸</del></font><rp>(</rp><rt><font color="red">心地善良</font></rt><rp>)</rp></ruby>的IT大大的協助下,我又換了一台NB..</p><p>想當然爾,我就得來<ruby><font color="lightblue"><del>Fine Tune</del></font><rp>(</rp><rt><font color="red">違法改造</font></rt><rp>)</rp></ruby>..</p><span id="more"></span><h1 id="機器介紹"><a href="#機器介紹" class="headerlink" title="機器介紹"></a>機器介紹</h1><p>這次算是我運氣好,更換的這批不僅不是<ruby><font color="lightblue"><del>Lenovo</del></font><rp>(</rp><rt><font color="red">萬惡的阿共牌</font></rt><rp>)</rp></ruby>還是原來預計要給ME的機器,所以給了我一台<code>Dell Precision 3561</code></p><p>我算是因禍得福整個Spec UP<br>CPU from 11th gen i5 to 11 gen i7(好啦我知道都是好幾個世代前的cpu了)<br>RAM from 16GB to 32GB(這個就真的有差..畢竟我喜歡跑一堆亂七八糟的)<br>GPU from Intel Iris@Xe to Nvidia T600 Laptop(好啦有快一些)</p><h1 id="機器整理"><a href="#機器整理" class="headerlink" title="機器整理"></a>機器整理</h1><p>基本上這台機器還是公司的NB所以不能亂改的太嚴重,(不過好心的IT還是有給我Admin的權限可以先做Tuning)</p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>因為是公司的機器所以基本上就是<code>Windows 11 pro</code><br>所以拿到的時候是已經預裝了公司工作用的軟體(什麼？你說我的工作不是只要一個Browser就可以了？怎麼可能,我還是會需要用到Office的唷),所以我就只需要用<code>Winget</code>裝一下以下幾個</p><ul><li><p>Open-shell - 好啦這個其實不是最重要的,單純只是我不喜歡<code>Win10</code>後的選單所以才裝的</p></li><li><p>VirtualBox - 這個其實是核心之一,有vbox就可以很大程度上做自己了</p></li><li><p>WSL - 這個其實也很重要不過這次有些問題</p></li></ul><h2 id="VitrualBox"><a href="#VitrualBox" class="headerlink" title="VitrualBox"></a>VitrualBox</h2><p>其實這個很單純就是VM內再裝個Archlinux而已…</p><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><h3 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h3><p>這台Windows很奇怪,我其實是沒辦法從任何地方安裝新版的WSL…都會跑出 <code>error code  0x80070490</code><br>用<code>wsl --update</code>則是會跟我說找不到元素….<br>代價就是..WSL Distro沒辦法正常使用<code>systemd</code>(這個很傻眼,因為Windows11的其中一個賣點就是新版的WSL有內建<code>systemd</code>的功能)</p><h3 id="對策與結果"><a href="#對策與結果" class="headerlink" title="對策與結果"></a>對策與結果</h3><p>我基本上是改用<a href="https://github.com/sileshn/ArchWSL2">ArchWSL2 from Sileshn</a>因為這個版本有持續再更新…<br>至於systemd問題,其實我真的需要WSL內的systemd只是為了<code>systemd-resolved.service</code> for <code>Wireguard</code>所以只要把<code>resolvconf</code>裝成<code>oopenresolv</code>就好了</p><h3 id="小發現"><a href="#小發現" class="headerlink" title="小發現"></a>小發現</h3><p>我很愛<code>Manjaro KDE</code>預設改好的zsh theme,之前我都是直接copy <code>/usr/share/zsh/</code>下的customize檔來用,直到最近我發現<code>AUR</code>內其實也有<code>manjaro-zsh-config</code>,裝上後只要確定<code>~/.zshrc</code>內容正確就可以了,唯一的小缺點就是他的console顏色是<code>Manjaro綠</code>而不是<code>Arch藍</code></p><h1 id="結論與後續方針"><a href="#結論與後續方針" class="headerlink" title="結論與後續方針"></a>結論與後續方針</h1><p>結論？老實講就這樣,東西弄好就乖乖上班….<br>後續的方針就是看看怎麼能再擠出一些<code>GPU</code>效能給WSL或是VM囉…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Change to Archlinux</title>
      <link href="/2023/07/18/2023071801/"/>
      <url>/2023/07/18/2023071801/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於<code>Archinstall</code>的驚豔,我正在考慮從<code>Manjaro</code>轉向<code>Archllinux</code>這一切就先從<br>我的<code>WSL</code>及<code>VirtualBox</code>裡的VM開始吧…</p><span id="more"></span><h1 id="ArchWSL"><a href="#ArchWSL" class="headerlink" title="ArchWSL"></a>ArchWSL</h1><h2 id="Github-Project"><a href="#Github-Project" class="headerlink" title="Github Project"></a>Github Project</h2><ul><li><p>Link - <a href="https://github.com/yuk7/ArchWSL">GitHub - yuk7&#x2F;ArchWSL</a></p></li><li><p>Online Manual - <a href="https://wsldl-pg.github.io/ArchW-docs/How-to-Setup/">How to Setup | ArchWSL official documentation</a></p></li></ul><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ul><li><p>需要先初始化&#96;archlinux-keyring&#96;&#96;以免會有問題</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@wsl]$ pacman-key --init</span><br><span class="line">[root@wsl]$ pacman-key --populate</span><br><span class="line">[root@wsl]$ pacman -Sy archlinux-keyring</span><br><span class="line">[root@wsl]$ pacman -Syyu</span><br></pre></td></tr></table></figure></li><li><p>需要建立一般User的帳號(不然一些GUI會有問題)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定義wheel群組的User都可以sudo</span></span><br><span class="line">[root@wsl]$ <span class="built_in">echo</span> <span class="string">&quot;%wheel ALL=(ALL) ALL&quot;</span> &gt; /etc/sudoers.d/wheel</span><br><span class="line"><span class="comment"># 建立一個&#123;username&#125;帳號,並且屬於wheel群組</span></span><br><span class="line">[root@wsl]$ useradd -m -G wheel -s /bin/bash &#123;username&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要設定預設的user為{username},這個操作得在WSL外面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[User@Windows]$ Arch.exe config --default-user &#123;username&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Archlinux-Guest-in-Virtualbox"><a href="#Archlinux-Guest-in-Virtualbox" class="headerlink" title="Archlinux Guest in Virtualbox"></a>Archlinux Guest in Virtualbox</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>基本上就是使用ISO開機,然後使用<code>archinstall</code>選好後直接安裝就好了,實際安裝確認過,需要desktop的可以直接選他的<code>desktop profile</code>,就我直接選<code>KDE</code>的結果來看</p><ul><li><p>它預設<code>Xorg</code> &amp; <code>Wayland</code>都會裝上,可以在<code>SDDM</code>登入時選擇</p><ul><li>基本上現在<code>Wayland</code>的支援還沒很好,連<code>ArchWiki</code>都建議先用<code>Xorg</code></li></ul></li></ul><h2 id="必須packages"><a href="#必須packages" class="headerlink" title="必須packages"></a>必須packages</h2><p>建議必裝的package如下</p><table><thead><tr><th>Pkg Name</th><th>Description</th></tr></thead><tbody><tr><td>git</td><td>除了一般Git使用以外,在安裝上<code>yay</code>之前<code>AUR</code>的package安裝也要靠它（包括安裝<code>yay</code>)</td></tr><tr><td>base-devel</td><td>這個其實是一個package的集合,主要是一些compiler跟相關工具,需要自己compile package的人需要安裝</td></tr><tr><td>virtualbox-guest-utils</td><td>這個是VirtualBox的guest端工具包括特殊的driver之類的等同於VMware tools</td></tr><tr><td>yay</td><td>有在用Arch base的人都知道這是什麼, Manjaro可以直接用pacman安裝,但是Arch內只能用下面附上的方式安裝</td></tr></tbody></table><h3 id="yay安裝方式-under-Archlinux"><a href="#yay安裝方式-under-Archlinux" class="headerlink" title="yay安裝方式(under Archlinux)"></a>yay安裝方式(under Archlinux)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不能用root</span></span><br><span class="line">[user@archlinux]$ git <span class="built_in">clone</span> https://aur.archlinux.org/yay-git.git</span><br><span class="line">[user@archlinux]$ <span class="built_in">cd</span> yay-git</span><br><span class="line">[user@archlinux]$ makepkg -si</span><br></pre></td></tr></table></figure><h2 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h2><ul><li><p>systemd服務要手動啟動</p><ul><li><p>systemd-resolved.service</p><ul><li><p>這是systemd版的resolvconf,主要是<code>wireguard</code>需要使用</p></li><li><p><code>systemctl enable --now systemd-resolved.service</code></p></li></ul></li><li><p>vboxservice.service</p><ul><li><p>這是自動載入virtualbox-guest-utils裡的元件</p></li><li><p><code>systemctl enable --now vboxservice.service</code></p></li></ul></li></ul></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>就目前來看,只要copy了<code>Manjaro</code>（或是其他喜歡的Distro)的一些美化設定(例如zsh-theme-powerlevel10k的設定),整個<code>Archlinux</code>就不會看起來不夠漂亮.</p><p>安裝上也變得很輕鬆.使用上就是Arch base沒什麼不同(跟Manjaro比起來)</p><p>大概要再觀察一段時間才會有比較明顯的好壞比較</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>與時俱進</title>
      <link href="/2023/07/14/2023071401/"/>
      <url>/2023/07/14/2023071401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>已經半年沒跟新這個Blog了，主要還是<ruby><font color="lightblue"><del>工作忙,以及生活瑣事繁雜</del></font><rp>(</rp><rt><font color="red">偷懶</font></rt><rp>)</rp></ruby>的關係,不過最近有些大事發生,加上<ruby><font color="lightblue"><del>忽然醒悟</del></font><rp>(</rp><rt><font color="red">小說看膩了</font></rt><rp>)</rp></ruby>摸了一點這段時間更新的玩具</p><p>因為都是比較零碎的想法我就都湊在這篇裡</p><span id="more"></span><h1 id="Red-Hat停止公開Source-code給下游重製使用"><a href="#Red-Hat停止公開Source-code給下游重製使用" class="headerlink" title="Red Hat停止公開Source code給下游重製使用"></a>Red Hat停止公開Source code給下游重製使用</h1><h2 id="個人看法"><a href="#個人看法" class="headerlink" title="個人看法"></a>個人看法</h2><p>作為一個商用版本（而且是賣錢的版本）用授權與不提供<code>source code</code>的方式來維持他的商業價值是很正常的, <code>SUSE</code>的商用版本(SLES)也沒有直接給人<code>Source code</code>讓人直接重製</p><p>而且兩個都有各自的上游<code>open source</code>版</p><table><thead><tr><th></th><th>Red Hat</th><th>SUSE</th></tr></thead><tbody><tr><td>Open Source 上游</td><td>Fedora &#x2F; CentOS stream</td><td>OpenSuSE</td></tr><tr><td>商用版本</td><td>Red Hat Enterprise Linux</td><td>SUSE Linux Enterprise</td></tr></tbody></table><p>現在被幹掉的是<code>RHEL</code>的下游,想想也很正常,開發公司也是要賺錢的,開發人員也是要生活的,</p><p>公司起飛前承諾過的有多好現在跳票Bla bla, 只能說結婚都有人會離婚了,神明前發誓都可以裝死了….</p><p>至於現在SUSE跟Oracle這些跑出來蹭熱度的,我覺得主要還是想趁這個機會踩一下Red Hat, 看看與論的風向是不是可以讓一些本來支持Red Hat的潛在用戶後面反水跳去自己的收費Distro,後面就讓我們繼續看下去</p><h1 id="NixOS"><a href="#NixOS" class="headerlink" title="NixOS"></a>NixOS</h1><p>最近不知道為什麼NixOS忽然在Linux的Youtuber間忽然熱門起來, 所以我也跟風的試了一下</p><h2 id="試用心得"><a href="#試用心得" class="headerlink" title="試用心得"></a>試用心得</h2><p>老實說,接觸的瞬間我的衝擊跟當年第一次裝<code>Gentoo</code>差不多, 感想也蠻類似的，基本上就是</p><blockquote><p>哇～這玩意的特殊功能好酷炫唷～我可以這樣,也可以那樣唷～～</p></blockquote><p>然後冷靜下來後想一想,這玩意要用也可以,不過挺麻煩的,不用好像也可以.</p><p>沒有什麼非用不可的理由…</p><h3 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h3><p><code>NixOS</code>基本上就是一個Package manager擁有的專用系統..（很像某時期的普魯士對吧….別人家是國家有個軍隊,普魯士是軍隊有個國家)</p><p><code>NixOS</code>的本體就是<code>Nix</code>這個Package manager,所以他可以用一個（或複數個可以被import)的<code>.nix</code>設定檔來進行全系統的設定（講是這樣講啦,他還是有~&#x2F;.config內的設定的特性）並且每次更新&#x2F;增加&#x2F;減少 package都會重新建立系統連結,使每個<code>版本</code>都是獨立的,並且進一步的可以建立不同的profile開發環境而不影響整個系統本身</p><p>聽起來很酷炫也很棒對吧</p><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><p>講的這麼酷炫就一定會有相對應的缺陷沒有被克服(等價交換嘛),小弟粗淺的試玩後就發現了</p><ul><li><p>要永久性的變更系統設定一定要去改<code>/etc/nixos/configure.nix</code>的設定,並跑<code>nixos-rebuild switch</code>做整個系統的版本更新</p></li><li><p>系統本身有大的版號,並且會有所謂的<code>channel</code>為了徹底解決<code>一個configure file rule them all</code>的要求,他又導入一個叫做<code>flake</code>的東西..於是越搞越複雜..還不如一開始就採取滾動式的方式進行….</p></li><li><p>空間需求很大,雖可以用<code>nix-garbage-collection</code>的function來刪除指定範圍外的版本紀錄,不過這樣某程度上也失去了擁護者們引以為傲的各種版本回朔機能,畢竟你把snapshot都幹掉了你要拿什麼回朔？？</p></li></ul><h3 id="小結論"><a href="#小結論" class="headerlink" title="小結論"></a>小結論</h3><p>拿來玩或是有一大堆同質性很高的機器要裝跟管理的人是蠻適合的,前提是你不會一直改系統或是有一台專門拿來調整設定的實驗機弄好再apply all, </p><p>要拿來當一般desktop 做daily drive應該是不太適合….</p><p>除非你很需要多個開發環境整合在一個系統上互不干擾並且又極端討厭docker類的container技術….</p><h1 id="ArchInstall"><a href="#ArchInstall" class="headerlink" title="ArchInstall"></a>ArchInstall</h1><p>之前我看一些Youtuber在介紹<code>Archlinux</code>有新工具對新人安裝比較友善</p><p>但是我一直沒管他直到最近我自己測試了一下果然驚為天人</p><p>我之前自己寫過安裝script, 而且我相信很多用Arch的人都有自己寫過安裝script,</p><p>這玩意就像是這種東西只不過功能更完整.</p><p>目前看起來可以簡單的選一選就可以裝出一個完整可動的desktop</p><p>可惜的是沒找到怎麼去customize他的預設profile….</p><p>看起來是有可以離開Manjaro的本錢了…..（不過Manjaro還是有一些好用小工具Arch不採用…）</p><h1 id="NeoVim-Nvchad"><a href="#NeoVim-Nvchad" class="headerlink" title="NeoVim+Nvchad"></a>NeoVim+Nvchad</h1><p>這個其實是我手賤在測試<code>NixOS</code>的時候又弄了一下（不然我很久沒去碰這個）</p><p>只有幾個重點</p><ul><li><p>在Arch base linux上請不要用<code>AUR</code>安裝<code>NvChad</code>會有error, 請乖乖的<code> git clone</code></p></li><li><p>更新版後預設的key bind就蠻好用的,不太需要手工改key mapping, 而且<code>&lt;leader&gt;+ch</code>還可以看hot key的<code>cheat sheet</code></p></li><li><p>LSP的部份跟Format我還是沒搞定,再找時間研究一下…</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>憾事發生....</title>
      <link href="/2023/01/11/2023011101/"/>
      <url>/2023/01/11/2023011101/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這其實是一篇沒營養抱怨文…不過事情本身也不算是太糟糕的鳥事</p><span id="more"></span><h1 id="故事大綱"><a href="#故事大綱" class="headerlink" title="故事大綱"></a>故事大綱</h1><h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>事情的經過是這樣的,有一天我在上班時間當薪水小偷時，忽然發現我家有台NAS的儲存空間不見了,仔細一看是PCI passthrough的SATA擴充卡忽然死了…</p><h2 id="緊急處理"><a href="#緊急處理" class="headerlink" title="緊急處理"></a>緊急處理</h2><p>雖然每次重開ESXI就可以讓擴充卡暫時性的活起來然後過一陣子才死,不過我當機立斷的馬上下單新的SATA擴充卡（順便在電腦家買了比卡還貴的其他東西）現在還在等東西送到</p><h2 id="緊急處理II-閒置的Gen8"><a href="#緊急處理II-閒置的Gen8" class="headerlink" title="緊急處理II - 閒置的Gen8"></a>緊急處理II - 閒置的Gen8</h2><p>由於家裡還有一台目前閒置的Gen8,於是我昨晚就試圖拆Gen8的零件看能不能修復，就結論上來說,雖然也是4port的卡，而且卡是好的，但是他那1vs4的線有問題（應該啦）所以四顆只能抓到三顆….結論上還是fail..</p><h2 id="緊急處理III-現役的Gen8"><a href="#緊急處理III-現役的Gen8" class="headerlink" title="緊急處理III - 現役的Gen8"></a>緊急處理III - 現役的Gen8</h2><p>於是乎我又把目光放到現役的Gen8身上,想說閒置的卡至少還有兩個PORT是好的，替換一下應該可以吧….然後我拆了機器後發現我好傻好天真…</p><p>那台機器上的SATA擴充卡…是2port的….靠！！（當初的我還真偷工減料）</p><h2 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h2><p>還能怎麼辦,現在就只能把跟掛掉的NAS榜定的service全數關了…把HDD的電也拔了，靜待新來的卡到家裡後在說</p><h2 id="吐血的點"><a href="#吐血的點" class="headerlink" title="吐血的點"></a>吐血的點</h2><p>明明主要的NAS掛了一台，全力搶修後還是得先關閉..結果家人的反應大多數卻是</p><h3 id="沒差…我們沒什麼用都你在用…"><a href="#沒差…我們沒什麼用都你在用…" class="headerlink" title="沒差…我們沒什麼用都你在用…."></a>沒差…我們沒什麼用都你在用….</h3><p>對啦都是我在用啦,下個世代的規劃我就不考慮你們用不用了啦～～～</p><h1 id="未來規劃…"><a href="#未來規劃…" class="headerlink" title="未來規劃…"></a>未來規劃…</h1><p>後來與師匠聊了一下，打破了不少我既有的概念</p><ul><li><p>若是沒買V-motion,或是不想改用Proxmox VE, 那還是集中VM在一台就好了..</p><p>仔細想想其實只要堆高VM host的硬體，的確不需要分散去另外兩台Gen8上面掛esxi..只有16Gb ram其實拿來跑esxi也沒什麼鳥用…</p></li><li><p>你的Gen8拿來跑單純的NAS就好了..</p><p>其實這點是沒錯的,因為Gen8的PCIe只有一個,後續還得上10Gb網卡….本來還想用iSCSI什麼的換回單純的NAS的話基本上OS只要一根USB就好了，硬體效能還可以全數供NAS使用</p></li><li><p>捨棄Raidz1改用ZFS mirror(原raid1)就好了</p><p>現在HDD的價格基本上8T以下每GB的價格已經是死豬價了，所以建議直接上16T的HDD X2現在大概兩顆16T的價格為19k NTD, 這樣的話可以一個4 bay機器慢慢的建立兩個16T的Pool</p></li></ul><p>以現在的情況與我的經濟狀況來看,似乎是個比較好的選項，畢竟光是重新構建10Gb骨幹與Wifi還有基礎Server添購就很貴了（大概快100k NTD)若這個時候還要卯起來一次到位太拼了</p><p>加上若現在因為$$就四顆4T塞滿了..未來也沒什麼擴充空間..還是直接用大HDD直上會比較好..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steam Deck真香！！</title>
      <link href="/2023/01/11/2023011102/"/>
      <url>/2023/01/11/2023011102/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我入手了一台Steam Deck,算是有小孩後久違了的玩具…</p><p>至於為什麼拖了那麼久才拿出來寫，我只能說因為它真香….</p><p>讓我體驗了許久未能爽到的 - 通關遊戲的快感</p><span id="more"></span><h1 id="簡單說明"><a href="#簡單說明" class="headerlink" title="簡單說明"></a>簡單說明</h1><p>趁著KOMODO的亞洲代理販賣,我也買了一台512GB版的Steam Deck(雖然我手上也是有2230的1TB SSD,不過我倒是沒有打算自己改….)</p><p>什麼開箱的東西我就不寫了,畢竟網路上一大堆相關的開箱文跟影片，我就來說說我自己的感受…</p><h2 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h2><p>入手前，我很大程度上沒有真的期望我會常常拿來玩遊戲….我更多的是認為我應該會拿來把本體玩一玩然後他的下場大概就會跟我的PSP一樣拿去堆灰…結果我發現我錯了….</p><p>適逢剛好遇到Steam冬季特賣，我剛好趁打折入手了大概是純收藏等級的幾個遊戲</p><p><code>歧路旅人</code>與<code>三角戰略</code>..從這兩個遊戲開始我就發現我的深夜離不開Steam Deck了….</p><p>（所以後續又在還很貴的時候買了<code>Tactic Orge Reborn</code>)</p><h2 id="簡單評測"><a href="#簡單評測" class="headerlink" title="簡單評測"></a>簡單評測</h2><p>其實valve在Steam OS上還是蠻用心的,有很多小工具整合得很不錯,幾個少數的缺點不外乎是</p><ul><li><p>系統是read only的安裝新的程式都是靠<code>flatpak</code></p></li><li><p>Valve的repo庫穩定性不佳（但是我自己用是沒出過問題大概是初期）</p></li><li><p>3.0 –&gt; 3.3.4變化很大, 這個我個人覺得某程度上也是Arch base的習性,改版就會改比較大，另一方面的看法則是Valve很積極的在改善他們的產品</p></li><li><p>續航力不足</p></li><li><p>畫面只有1280x800解析度不足1080p(但是畫面那麼小看起來差距沒那麼大)</p></li><li><p>太大太重（其實我自己使用是還好）</p></li></ul><p>優點的部份其實也是不少的算是特點吧</p><ul><li><p>UI整合完整，雖說這是一台掌機肯定要做好的，但是看著其他使用Windows平台的強國掌機就覺得贏了不知道幾條街</p></li><li><p>可鎖定FPS降低耗電，有沒有設定為40fps真的影響續航非常嚴重</p></li><li><p>夜間模式等小調整，算是貼心</p></li><li><p>有桌面模式可以用，老實說桌面模式是蠻雞肋的，因為一般玩家只玩遊戲的前提下幾乎用不上，但是當你需要弄一些額外的東西的時候就很需要了（但是還是最好外接鍵盤滑鼠前提下使用）</p></li></ul><h2 id="好用的額外工具"><a href="#好用的額外工具" class="headerlink" title="好用的額外工具"></a>好用的額外工具</h2><ul><li><p><a href="https://github.com/sonic2kk/steamtinkerlaunch">Steam Tinker Launch</a></p><p>基本上透過<code>ProtonUP-Qt</code>安裝就好了，基本上就是神工具，使用上是在Steam啟動部份類似<code>Proton</code>一樣設定，設定好了會在啟動遊戲前先啟動這個launcher的menu, 然後可以設定<code>custom program</code>連動,也可以在勾選<code>tool -&gt; cheat engine</code>後自動在啟動遊戲後啟動<code>cheat engine</code>並且已經設定好process連動,使用時直接load CT file就好了</p><p>唯一美中不足的就是當啟動cheat engine的時候畫面的觸控範圍跟實際畫面有落差</p></li><li><p><a href="https://davidotek.github.io/protonup-qt/">ProtonUp-Qt</a></p><p>算是一個steam proton或是其他Plugin(例如STL)的安裝工具,可透過Discover安裝flatpak版（或是直接下載AppImage版也行），喜歡的話也可以透過這個安裝<code>Proton-GE</code></p></li><li><p><a href="https://github.com/GloriousEggroll/proton-ge-custom">Proton-GE</a></p><p>這算是客製版的Proton加了不少東西在裡面</p><p><a href="https://www.linuxadictos.com/zh-TW/proton-ge-en-que-se-diferencia-con-proton.html">Proton GE：它與 Proton 有什麼不同？ （遊戲） | Linux 癮君子</a></p></li><li><p><a href="https://www.emudeck.com/">Emudeck</a></p><p>由於Steam Deck<code>優異的性能</code>所以很適合在上面跑EMU, Emudeck是一個整合安裝的程式（是的他的用途就是整合安裝而已，EMU還是其他各個獨立的EMU)這也是這堆工具中我唯一還沒安裝的（因為我的SD卡還沒到所以沒空間可以放）</p></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>若你的Steam收藏庫內都是類似<code>AOE</code>, <code>HOI</code>這種很靠滑鼠鍵盤控制的PC Game,那麼Steam Deck就不是那麼適合你, 若你只玩超吃硬體性能的大型PC Game，那麼Steam Deck也不適合你，Steam Deck就適合玩需要把手, loading沒那麼重的遊戲而且很適合只有零碎時間可以玩遊戲的人，至於你是不是很習慣&#x2F;擅長Linux跟他本體沒有什麼嚴重的關聯性，充其量就是越會使用Linux的人越容易去亂搞Steam OS的設定或是調整</p><p>你問我會不會安利Steam Deck給其他人？？</p><p>老實說同樣的價格（或稍微多一點點）就可以買的的到低階的電競筆電了…而再低階的電競筆電性能幾乎都是屌打Steam Deck…</p><p>你說但是他有專用的Steam OS超屌,可是你裝個Manjaro不要Game Mode. 也可以弄的跟Steam OS有87％像，更何況還有人放出可以安裝在一般PC硬體上的Holo ISO（只是我沒在VirtualBox上安裝成功過）所以也沒必要為了他的OS去買Steam Deck</p><p>大概這樣刪去的最終客群就剩一群人傻錢多的….（可是我很窮,應該不屬於這個分類）</p><p>這個商品對我來說就像微軟會了教NB製造商怎麼設計生產出符合Windows 8&#x2F;10的硬體而去做了CP值不高的Surface系列（老實說用surface跑windows還真的蠻舒服的，可惜我已經不太使用WIndows了）Valve為Linux Gaming做出了軟硬體方面的貢獻希望後面還真的有不少廠商願意投入爭先恐後的做出更好的產品</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z-Libary</title>
      <link href="/2022/11/14/2022111401/"/>
      <url>/2022/11/14/2022111401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實我本來沒有注意到這個寶藏庫的..直到他被FBI查封了…..</p><span id="more"></span><h1 id="Z-libary"><a href="#Z-libary" class="headerlink" title="Z-libary"></a>Z-libary</h1><h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>基於<a href="https://zh.m.wikipedia.org/zh-tw/Z-Library">Z-Library - 維基百科，自由的百科全書</a>上的敘述看起來好像挺正面的..不過實際上就是各大書商想除之而後快的網站…</p><p>基本上就是一個超巨大的免錢電子書庫….因為是這樣所以才會被FBI給抄了….</p><h3 id="現狀"><a href="#現狀" class="headerlink" title="現狀"></a>現狀</h3><p>基本上網頁的DN被抄了..不過這種東西肯定不會真的消失，所以就轉入地下了…基於這個沒被抄掉的登入網頁</p><p><a href="https://zh.singlelogin.me/">不知道須不需要低調的帳號申請網頁</a></p><p>申請完帳號後他會給你三種選項</p><h4 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a>Tor</h4><p>這個<code>洋蔥網路</code>某程度上就是幾年前炒作的沸沸洋洋的暗網所在….不過實際上也沒那麼恐怖啦…主要是要連接他需要專用的bowser所以感覺好像特別偷偷摸摸的….</p><p>不過現在我常用的<code>Brave</code> 桌面版就有Tor的瀏覽功能…只需要打開隱密分頁with Tor就可以了….（不過就今天試連的結果反應蠻慢的…需要過一段時間才能連接好可能就是因為節點跟一般的網路相比還是少很多造成的）</p><h4 id="I2P"><a href="#I2P" class="headerlink" title="I2P"></a>I2P</h4><p>老實說這個玩意跟Tor差不多只是更強調隱密性….不過…他就真的要下載專用的browser來使用了…我個人不是很贊成這種還需要另外安裝的….</p><h4 id="Telegram-Bot"><a href="#Telegram-Bot" class="headerlink" title="Telegram Bot"></a>Telegram Bot</h4><p>老實說這個真的出乎我意料…超讚的….</p><p>只要在你的telegram裡面加入他的Bot(@firstlibrarybot)為好友然後通過帳號連結（這個在他的註冊網頁上有照著做就好了</p><p>然後這個Bot的對話就可以直接搜尋你要的書…檔案小於50Mb的就可以直接在Telegram上下載..真的很佛心</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>老實說這個玩意跟打擦邊球沒兩樣..不知道這樣轉入地下還可以活多久…所以要拿書的還是趁早收到自己手上比較實在…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neovim</title>
      <link href="/2022/11/09/2022110901/"/>
      <url>/2022/11/09/2022110901/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有花時間把一些基礎的東西再看一看翻一翻..沒想到<code>vim</code>有很棒的後繼者..</p><p><code>NeoVim</code>這個分支支援很多有的沒的plugin跟功能，搭配上人家寫好的<code>NvChad</code>基本上就很屌了</p><span id="more"></span><h1 id="NeoVim-NvChad"><a href="#NeoVim-NvChad" class="headerlink" title="NeoVim + NvChad"></a>NeoVim + NvChad</h1><h2 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h2><p><a href="https://neovim.io/">Official Neovim Website</a></p><p>這個玩意其實就跟Vim沒什麼兩樣，只不過支援<code>lua</code>的設定檔並且支援很多Plugins</p><p>不過就看在它支援很多新花樣就值得我把使用已久的<code>vim</code> 換成他</p><h2 id="NvChad"><a href="#NvChad" class="headerlink" title="NvChad"></a>NvChad</h2><p><a href="https://nvchad.com/">NvChad · Neovim with lua is cool</a></p><p>老實說這玩意真的是屌炸天….</p><p>透過Lua的語法把Neovim支援的Vim Plugin用基礎方式編寫後展現出一個幾乎是別的editor的東西出來（沒錯，基本上就可以弄成像VS Code的樣子了）</p><p>透過自己的customization,甚至可以用來替代markdown editor…(我還看到picgo的對應plugin…連上傳圖片到圖床的功能都有了…還要其他editor幹麻…)</p><h2 id="客製化"><a href="#客製化" class="headerlink" title="客製化"></a>客製化</h2><p>老實說這個客製化就得懂一些東西了</p><ul><li><p>lua語法</p></li><li><p>vim plugin的導入與設定方式</p></li></ul><p>基本上就是在NvChad寫好的框架下面利用override的功能把一些定義換掉…（當然你也可以fork他的git repo後自己重頭改一版…）</p><p>目前我自己有客製的只有Key mapping的部份（因為原來的功能有點少）後續會塞進我的ansible裡面來套用到我所有的client上面</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DistroBox</title>
      <link href="/2022/11/03/2022110301/"/>
      <url>/2022/11/03/2022110301/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這個很厲害的東西我也是從youtube學來的原影片的連結如下</p><p><a href="https://www.youtube.com/watch?v=p9AdhNgR69k" title="利用Distrobox在Debian內跑Archlinux &amp; AUR"><img src="http://img.youtube.com/vi/p9AdhNgR69k/0.jpg" alt="Debian Stable: Fresh Kernel and the AUR! - YouTube"></a></p><span id="more"></span><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="DistroBox"><a href="#DistroBox" class="headerlink" title="DistroBox"></a>DistroBox</h2><p>專案網址 - <a href="https://github.com/89luca89/distrobox">GitHub - 89luca89&#x2F;distrobox</a></p><p>介紹網頁 - <a href="https://itsfoss.com/distrobox/">Distrobox: Try Multiple Linux Distributions via the Terminal</a></p><p>其實講穿了這個就是利用docker or padman把其他Linux distrobution跑起來後export裡面的東西到外面來跑</p><h1 id="實際操作"><a href="#實際操作" class="headerlink" title="實際操作"></a>實際操作</h1><p>我個人有在<code>Fedora 36 KDE Plasma Edition</code>上面跑過（可惜我沒截圖就把整個VM砍了）</p><p>跑雖然可以跑但是有一些問題</p><h2 id="DE-WM"><a href="#DE-WM" class="headerlink" title="DE &amp; WM"></a>DE &amp; WM</h2><p>基本上就是外面的用什麼你裡面的就是跑什麼，所以…當我外面是<code>wayland</code>裡面的ulauncher就變得怪怪的…</p><h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p>都說了是使用<code>docker</code>&#x2F;<code>podman</code>的基礎了…Kernel還能不一樣嗎？？</p><h2 id="相關指令"><a href="#相關指令" class="headerlink" title="相關指令"></a>相關指令</h2><p>講了這麼多，其實很有可能是我還沒摸熟它該怎麼用最好，光是你export出來的程式可以吃外部的設定檔就很好了，實際上我不知道為什麼那台有放我的Brave設定但是沒裝Brave，結果裡面的Brave一跑起來居然是套用外面的設定檔…真棒！（不過ulauncher卻死的不能再死了）</p><p>基本指令如下</p><table><thead><tr><th>Out&#x2F;In distrobox</th><th align="center">command</th><th>usage</th><th>Example</th><th>Manual Link</th></tr></thead><tbody><tr><td>outside</td><td align="center">distrobox create -n name -i Docker image</td><td>Create a distrobox container</td><td>distrobox create -n Archlinux -i Archlinux</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-create.md">Distrobox-create</a></td></tr><tr><td>outside</td><td align="center">distrobox enter <Name></td><td>into named container</td><td>distrobox enter Archlinux</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-enter.md">Distrobox-enter</a></td></tr><tr><td>outside</td><td align="center">distrobox list</td><td>list all containers</td><td>distrobox list</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-list.md">Distrobox-llist</a></td></tr><tr><td>outside</td><td align="center">distrobox rm <Name></td><td>delete container</td><td>distrobox rm Archlinux</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-rm.md">Distrobox-rm</a></td></tr><tr><td>Outside</td><td align="center">distrobox upgrade <Name></td><td>upgrade conatiner</td><td>distrobox upgrade Archlinux</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-upgrade.md">Distrobox-upgrade</a></td></tr><tr><td>Inside</td><td align="center">distrobox-export -a <App Name>  -ep <path to outside></td><td>export apps install inside container to outside to use</td><td>distrobox-export -a Brave -ep ~&#x2F;.local&#x2F;bin</td><td><a href="https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-export.md">Distrobox-export</a></td></tr></tbody></table><h2 id="額外的重點"><a href="#額外的重點" class="headerlink" title="額外的重點"></a>額外的重點</h2><p>我所有的例子都是用<code>distrobox</code>建立一個<code>Archlinux</code> container然後狂用<code>AUR</code>主要的理由還是因為，沒有必要在Arch系上面另外跑<code>Fedora</code>或是<code>Debian/Ubuntu</code>(因為除了可能會升級到掛掉以外Arch系的程式安裝根本是掃台…)</p><p>不過這裡就有一個很囧的-與其說我已經是<code>Archlinux</code>的形狀還不如說我是<code>Manjaro</code>的形狀…不過無奈<code>manjaro</code>不爭氣..他的offical docker image很鳥…遠不如Archlinux…</p><h1 id="未來可能的最佳解"><a href="#未來可能的最佳解" class="headerlink" title="未來可能的最佳解"></a>未來可能的最佳解</h1><p>最近有試著使用<code>Fedora</code>看起來的確會是個很棒的Base OS搭配上可以安裝AUR的話根本就是無敵（若是事情有我這個傻子想的這麼單純的話當然是這樣）不過就他的桌面風格跟可以調整的內容來看…我可能還有很長的一段時間還會維持<code>Manjaro</code>的形狀….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hollowen - 神奇的KDE</title>
      <link href="/2022/10/31/2022103101/"/>
      <url>/2022/10/31/2022103101/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>雖然之前就有老外做過評測，但是沒有實際感受還是有落差   </p><span id="more"></span><h1 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h1><h2 id="對KDE的刻板印象"><a href="#對KDE的刻板印象" class="headerlink" title="對KDE的刻板印象"></a>對KDE的刻板印象</h2><p>大概是KDE3.x的年代，我曾因為它長的漂亮所以用過，然後就有一個行之有年的刻板印象</p><blockquote><p><code>KDE</code>是個很吃資源的桌面…</p></blockquote><p>因為當時我記得是跟<code>WIndwos Vista/7</code>作比較…的確特效全開的KDE是一個很重的DE</p><h2 id="Manjro-XFCE"><a href="#Manjro-XFCE" class="headerlink" title="Manjro XFCE"></a>Manjro XFCE</h2><p>會扯到Manjaro XFCE是因為當我開始真正的使用Linux Desktop的時候是從Manjaro XFCE開始用的..一開始的我根本不敢想用KDE Edition因為怕我的VM跑不動，後來有本機可以跑的時候為了貪圖漂亮的外觀…我才試用KDE版</p><h2 id="驚為天人的KDE"><a href="#驚為天人的KDE" class="headerlink" title="驚為天人的KDE"></a>驚為天人的KDE</h2><p>老實說我本來做好機器會跑得比較慢的心裡準備，結果發現似乎沒什麼差異…雖然說絢麗程度看起來沒有GNOME那麼天馬行空的感覺（是的，KDE就是一個中規中矩的良家婦女… ）</p><h2 id="Performance差異"><a href="#Performance差異" class="headerlink" title="Performance差異"></a>Performance差異</h2><p>事情得講回我的VNC機器，換了幾個DE(一開始是嫌xfce不夠漂亮)結果發現換來換去都很重…</p><p>直到我換回kde版.在拔除了一些vnc host用不到的東西後發現的確很順（idle RAM about 600~800MB, around XFCE usage）…而且xrdp的相關設定也很神奇的不能在xfce好好的跑（應該是我還沒寫對設定檔）加上Manjaro對於lxqt的安裝沒有很方便…(Manjaro Architect現在不是預設支援了就很難安裝….非包好的desktop環境)</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>我熱愛KDE…雖然GNOME看起來比較漂亮會打扮</p><p>我熱愛KDE…雖然備份桌面設定得cp 一堆檔案看起來很亂，沒有dconf可以用</p><p>GNOME就是個妖豔賤貨..雖然華麗看起來會吸引眼球，但是能好好過日子的還是KDE</p><p>(以上言論僅代表個人感想，無誤導或是詆毀GNOME愛好者的意思…)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近都沒更新</title>
      <link href="/2022/10/12/2022101201/"/>
      <url>/2022/10/12/2022101201/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久沒有更新我的Blog了,雖然說主要的原因是我懶但是也不代表我啥都沒幹…   </p><span id="more"></span><h1 id="廢話園地"><a href="#廢話園地" class="headerlink" title="廢話園地"></a>廢話園地</h1><p>最近我雖然沒有更新Blog但是發生了不少事情</p><ul><li><p>去東南亞爽了一圈 - 馬來西亞 &amp; 泰國</p></li><li><p>Universal script撰寫</p></li></ul><p>這兩件事算是整個九月下旬到今天為止比較值得寫的</p><h1 id="東南亞"><a href="#東南亞" class="headerlink" title="東南亞"></a>東南亞</h1><p>其實也沒什麼,就是工作出差的名義去了趟馬來西亞跟泰國</p><h2 id="馬來西亞"><a href="#馬來西亞" class="headerlink" title="馬來西亞"></a>馬來西亞</h2><p>老實說,雖然我盡量讓自己沒有偏見,但是的確發現我有對東南亞的偏見存在,本來以為馬來西亞的基建什麼的會輸台灣一大截,結果去了當地發現小丑竟然是我自己…</p><p>馬來西亞有著相當好的基建,以及整體給人悠閒但又不貧困的感覺,電子支付更是領先台灣好幾條街….說真的讓人有台灣再不長進就輸一屁股的感覺…</p><h2 id="泰國"><a href="#泰國" class="headerlink" title="泰國"></a>泰國</h2><p>我對泰國的印象還停留在2014年，這次去發現他們的一些電子化作的還不錯…另外可能是這次住的地方是Pattaya的關係感覺比較沒有以前在碧武里那種鄉下感</p><p>不過因為現在台灣也可以輕鬆買到PCHome Thai上的東西，反而不覺的需要買很多土產回家…</p><h1 id="Universal-Script"><a href="#Universal-Script" class="headerlink" title="Universal Script"></a>Universal Script</h1><p>其實嚴格來說真的值得寫的是這玩意，這個其實就是把我以前寫過的<code>Arch Linux Automatic Install Script</code>的放大版,企圖是把我自己會使用的Unix-like OS都塞進去</p><p>目前（預計）涵蓋的範圍</p><ul><li><p>Manjaro Linux with Desktop for Console and VNC&#x2F;RDP server</p><ul><li><p>KDE(90％完成)</p></li><li><p>Xfce(0%完成)</p></li><li><p>Gnome(0%完成) - 考慮是不是要拿掉</p></li><li><p>Cinnamon(0%完成)</p></li></ul></li><li><p>Fedora Linux with Desktop for Console and VNC&#x2F;RDP server (0%)</p></li><li><p>Linux Mint with Desktop for Console and VNC&#x2F;RDP server(0%) - 考慮是否要留</p></li><li><p>Arch Linux (0%)</p></li><li><p>Photon OS(0%)</p></li><li><p>FreeBSD(0%)</p></li></ul><h2 id="概念與作法"><a href="#概念與作法" class="headerlink" title="概念與作法"></a>概念與作法</h2><p>其實就是先寫一個自動判別的script導向對應的子script去進行設定或安裝</p><pre><code class="highlight mermaid">graph TB    id1[Bash script from web server via curl] --&gt; id2&#123;define children script via system Var&#125;    id2 -- Manjro Linux in /etc/os-release --&gt; id3&#123;Select type as Console or VNC/RDP server&#125;    id2 -- Arch Linux in /etc/os-release --&gt; id4&#123;Select type as Server or Console or ...etc&#125;    id3 -- select Console --&gt; id5&#123;auto select by DE ex:KDE or Cinnamon&#125;    id5 -- detect KDE--&gt; id6[run children script for KDE console usage set up]</code></pre><p>大致上就是上面這個圖的邏輯</p><p>現在的進度大致上就是最初的那個選別script我寫好了,然後manjaro的部份核心寫好了(以KDE為主的)其他DE的內容就還需要裝上該版本後再fine tune</p><h2 id="其他收穫"><a href="#其他收穫" class="headerlink" title="其他收穫"></a>其他收穫</h2><h3 id="Script-if-condition"><a href="#Script-if-condition" class="headerlink" title="Script - if condition"></a>Script - if condition</h3><p>這個大概是最近在寫script的時候最常用到的功能..著實花了我一些時間去研究條件怎麼寫</p><h2 id="Script-source-other-script"><a href="#Script-source-other-script" class="headerlink" title="Script - source other script"></a>Script - source other script</h2><p>這個功能算是很後期我才導入的,但是非常棒…基本上就是類似其他程式語言一樣可以把其他寫好的模組（或是重複性很高的code)另外獨立後以<code>source</code>的形式load進來搭配後面學會的<code>function</code>機能可以作到先load要用再呼叫該function的方式使用,甚至可以呼叫的時候加上其他變數</p><h2 id="Script-function"><a href="#Script-function" class="headerlink" title="Script - function"></a>Script - function</h2><p>這個算是比較花俏的script寫法本來的用意是拿來美化用的ex:banner or 選單之類的，不過後來發現什麼亂七八糟的都可以用function來導入…所以就開始亂搞了….</p><h2 id="VNC-RDP"><a href="#VNC-RDP" class="headerlink" title="VNC&#x2F;RDP"></a>VNC&#x2F;RDP</h2><p>最大的發現就是原來這兩個玩意可以共存一起跑….只要裝上該裝的東西後就可以了….</p><p>在Manjaro環境中需要tigervnc for vnc server, xrdp for rdp server</p><p>不過要注意一點要連接xrdp的時候不能預設把user name鍵入,會有問題需要空白進去後再key</p><h2 id="DE-review"><a href="#DE-review" class="headerlink" title="DE review"></a>DE review</h2><p>之前我是Manjaro XFCE for VNC然後console用Manjaro KDE, 然而今天發現GNOME其實跟我胃口不太合,於是我參考了LinuxMint試了一下Cinnamon發現其實還蠻ok的,尤其是可以利用<code>dconf dump /org/cinnamon &gt; file.name</code>形式備份整個DE的設定…實在太開心了….</p><p>可能後面會嘗試把主力DE從KDE再改去Cinnamon,不過Manjaro Cinnamon因為不是Official的版本所以中文化跟效能調校沒有弄的很好…很有機會需要花很多時間來fine tune….</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>其實這段時間累積了不少可以寫的東西…但是真的是因為懶所以就簡化再簡化…等後面完成了再來拆解寫入Wiki好了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悲劇....</title>
      <link href="/2022/09/07/2022090701/"/>
      <url>/2022/09/07/2022090701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 今天忽然發現…我的<code>/var/lib/docker/volumes</code>裡面是空的…   </p><span id="more"></span><h1 id="故事大綱"><a href="#故事大綱" class="headerlink" title="故事大綱"></a>故事大綱</h1><p>就在我最近跟<code>Drone CI</code>搏鬥中 - 又是一個因為實力不足而被迫放棄的工具….</p><p>忽然發現我的<code>/var/lib/docker/volumes</code>裡面是空的…..</p><p>回想起來該不會是一兩個月前, 我手賤用<code>portainer</code>在整理volume庫裡面<code>不需要的</code>目錄造成的…若是這樣那我的內部服務也很厲害的正常跑了一到兩個月….</p><h1 id="影響範圍"><a href="#影響範圍" class="headerlink" title="影響範圍"></a>影響範圍</h1><p>其實也沒什麼,就是內部的服務全中了….看來剛好可以練習今天下午整個重建…..</p><h1 id="補救措施"><a href="#補救措施" class="headerlink" title="補救措施"></a>補救措施</h1><p>我只能說還好我的<code>docker-compose.yml</code>們都有事先保留好，所以服務只需要重建….就好了…（痛苦的設定要重新設定呀）</p><h1 id="賺到的點"><a href="#賺到的點" class="headerlink" title="賺到的點"></a>賺到的點</h1><p>唯一算是收穫的，應該是因為要重新設定所以我去翻了這些服務的說明後，發現人家改版後有多新功能，剛好可以應用上(這算苦中作樂吧….)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible Private Usage</title>
      <link href="/2022/08/15/2022081201/"/>
      <url>/2022/08/15/2022081201/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 玩了幾天的Ansible後針對私人使用用途有一點感想   </p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="About-Ansible"><a href="#About-Ansible" class="headerlink" title="About Ansible"></a>About Ansible</h2><p>老實說，Ansible真的是個很強大的工具，而且還有眾多的社群在後面默默的付出，以便在<code>Github</code>上有許多可以參考借鑒的<code>playbook</code></p><p>能順利的進行方案測試真的要感謝以下兩個參考資料</p><ul><li><p>Ansible 教學系列影片 by Learn Linux TV<br><a href="https://www.youtube.com/watch?v=3RiVKs8GHYQ&list=PLT98CRl2KxKEUHie1m24-wkyHpEsa4Y70"><img src="http://img.youtube.com/vi/3RiVKs8GHYQ/sddefault.jpg" alt="Getting started with Ansible 01 - Introduction - YouTube"></a><br>這個系列其實講得很詳細，對Ansible有興趣的人應該要先看完</p></li><li><p><a href="https://github.com/PauloPortugal/manjaro-playbook">GitHub - PauloPortugal&#x2F;manjaro-playbook: Manjaro&#x2F;Arch Linux Ansible provision playbook</a></p><p>因為我主要的Desktop是<code>Manjaro</code>所以這個Repo對我來說很有幫助</p></li></ul><h2 id="Ansible的限制"><a href="#Ansible的限制" class="headerlink" title="Ansible的限制"></a>Ansible的限制</h2><p>雖然說Ansible功能強大看起來什麼都好棒棒，但是仍有以下這些限制(對我來說)</p><ul><li><p>運作期間沒有手動輸入的功能，所有的東西都先預先寫好，若使用公開的Git Server如<code>Github</code>可能會擔心安全性的問題</p></li><li><p>行為差異由Host Vars定義，非重複的行為由獨立的playbook section控制，跟上面那點合併的感覺就不太好用在初次安裝期間的Server設定</p></li><li><p>透過SSH account控制，同上若是剛裝好的機器沒有帳號與對應的ssh key就沒辦法馬上用</p></li></ul><h2 id="Kiwi流用法"><a href="#Kiwi流用法" class="headerlink" title="Kiwi流用法"></a>Kiwi流用法</h2><ul><li><p>一般安裝透過<code>shell script</code>進行，保留可手動輸入等相關選項讓script泛用性提高</p></li><li><p>搭配Script，Ansible主要用於重複性高，同質性高的行為控制，例如同步更新所有的Server，透過Ansible對所有Server的設定檔案進行版本控制（因為Ansible基本上會搭配Git server使用</p></li><li><p>透過Ansible自動完成需要複雜設定的使用環境，例如複數Desktop，或是重裝Desktop的時候可以簡化作業（這點雖然也是跟script功能一樣，但是Script比較難單獨針對設定檔做版本管控）</p></li></ul><h1 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h1><p>其實現在正在進行中的東西仔細看看，除了不在內部的機器<code>ansible</code>可以派上用場以外，其他的幾乎都是靠內部<code>Git server</code>+<code>shell script</code>就可以搞定的東西（某程度上原來想要的<code>rsync</code>+<code>shell script</code>也是可以滿足的啦….）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Self-hosted Git server</title>
      <link href="/2022/08/09/2022080901/"/>
      <url>/2022/08/09/2022080901/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為我想用<code>ansible</code>以及<code>ansible-pull</code>來自動化自己的<ruby><font color="lightblue"><del>Desktops &amp; Servers</del></font><rp>(</rp><rt><font color="red">各種玩具</font></rt><rp>)</rp></ruby>，所以需要一個搭配的Git server, 有鑑於我覺得東西還是放在自己家裡比較安全的出發點，我就上了一台<code>gitea</code></p><span id="more"></span><h1 id="安裝過程"><a href="#安裝過程" class="headerlink" title="安裝過程"></a>安裝過程</h1><p>其實沒什麼好講的就是單純的<code>docker-compose up -d</code>就好了唯一的坑應該是<code>sqlite</code>沒辦法正常的使用，所以我就上了<code>mariadb</code>一發搞定…詳細的內容我都放在<code>wiki</code>裡面了</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為內部網路加上我是共用docker host，所以我最終只用很不安全的<code>http</code>來進行git的相關動作（連<code>SSH</code>都沒設定）所以可以說超陽春…</p><p>接下來就會把重心轉移到<ruby><font color="lightblue"><del>Ansible</del></font><rp>(</rp><rt><font color="red">netboot.xyz</font></rt><rp>)</rp></ruby>(好像哪裡怪怪的…)</p><p>沒有啦，應該還是會先focus在Ansible上面啦，畢竟Netboot.xyz實質上我沒什麼用的到的機會頂多就是炫而已…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理Oracle Cloud Free Tier</title>
      <link href="/2022/08/02/2022080201/"/>
      <url>/2022/08/02/2022080201/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><ruby><font color=lightblue><del>回顧系列</del></font><rp>(</rp><rt><font color=red>薪水小偷</font></rt><rp>)</rp></ruby>之免費白嫖仔戰記 ～～ 擺弄OCI - Part.I(不一定會有Part.II)</p><span id="more"></span><h1 id="故事大綱"><a href="#故事大綱" class="headerlink" title="故事大綱"></a>故事大綱</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>前幾天在擺弄機器的時候（這個措辭有點糟糕！？）發現現在主要提供服務的那台白嫖VPS非常欠缺RAM..於是就想把主意打到那台一直沒用的ARM Base VPS</p><h2 id="戲肉"><a href="#戲肉" class="headerlink" title="戲肉"></a>戲肉</h2><h3 id="重建"><a href="#重建" class="headerlink" title="重建"></a>重建</h3><p>其實我也不知道之前那個系統怎麼亂搞的..連Traefik對應的功能都怪怪的，於是我就賞了系統一發終結然後又重建了台一模一樣規格的（其實本來是想拆成兩台X86的..但是看到那精美的4Gbps網路,跟24GB RAM我又不爭氣的選下去了）</p><h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><p>途中我發現它可以建立四張網路卡，於是高潮的建了四張，然後絕望的發現只能有兩個<code>public IP</code>於是又砍掉兩個，接著又發現有兩個IP會導致Traefik亂掉….於是又砍掉一個…</p><h2 id="Service搬遷"><a href="#Service搬遷" class="headerlink" title="Service搬遷"></a>Service搬遷</h2><p>其實最大的收穫就是我發現<code>Traefik</code>真的是很萬金油，它所reverse的網址跟他自己的Domain可以完全沒關係….真的很厲害，於是我就在使用者沒感覺的前提下把服務搬走但是Domain沒改….</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>雖然很方便可以無痛的把服務搬走，但是代價就是我原來靠機器DN分類整理好的各<code>docker-compose.yml</code>就變成亂七八糟了，雖然我最終還是依照機器的host分開整理了（東西放在private repo內別人又看不到是講個毛線）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kindle電子書推送格式變更</title>
      <link href="/2022/08/02/2022080202/"/>
      <url>/2022/08/02/2022080202/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>小弟一直都有用<code>calibre</code>+<code>kindle app</code>看<ruby><font color="lightblue"><del>好心人無償提供</del></font><rp>(</rp><rt><font color="red">白嫖</font></rt><rp>)</rp></ruby>的電子書的習慣，前一陣子Amazon通知一直以來使用的<code>mobi</code>格式要被淘汰，改成<code>epub</code>…</p><span id="more"></span><h1 id="主要變更"><a href="#主要變更" class="headerlink" title="主要變更"></a>主要變更</h1><p>一直以來我都用<code>calibre-web</code>來<ruby><font color="lightblue"><del>管理</del></font><rp>(</rp><rt><font color="red">展示</font></rt><rp>)</rp></ruby>手上的電子書，查了一下還好新版有對應這個功能</p><p>於是我就很爽快的把Image給換了…（反正之前用的那個有附的轉檔程式不僅新的規範用不到了，舊版時期我也沒用過…</p><h2 id="Calibre-web"><a href="#Calibre-web" class="headerlink" title="Calibre-web"></a>Calibre-web</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version<span class="punctuation">:</span> &#x27;<span class="number">3</span>&#x27;</span><br><span class="line">services<span class="punctuation">:</span></span><br><span class="line">  calibre-web<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> lscr.io/linuxserver/calibre-web<span class="punctuation">:</span>latest</span><br><span class="line">    container_name<span class="punctuation">:</span> calibre-web</span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">      - PUID=<span class="number">1000</span></span><br><span class="line">      - USE_CONFIG_DIR=<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      - OAUTHLIB_RELAX_TOKEN_SCOPE=<span class="number">1</span></span><br><span class="line">      - DOCKER_MODS=linuxserver/calibre-web<span class="punctuation">:</span>calibre</span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">      - /Books/lib/location<span class="punctuation">:</span>/books</span><br><span class="line">      - /var/lib/docker/volumes/calibre/config<span class="punctuation">:</span>/config</span><br><span class="line">    labels<span class="punctuation">:</span></span><br><span class="line">      traefik.enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      traefik.http.routers.calibre-web.rule<span class="punctuation">:</span> Host(`$Your_Domain`)</span><br><span class="line">      traefik.http.routers.calibre-web.tls<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      traefik.http.routers.calibre-web.tls.certresolver<span class="punctuation">:</span> myresolver</span><br><span class="line">    restart<span class="punctuation">:</span> unless-stopped</span><br></pre></td></tr></table></figure><p>沒錯，我換成會比較常更新來自<code>linuxserver.io</code>的Image</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/calibre-web-epub.PNG"></p><p>我是因為已經把<code>mobi</code>檔都清空了所以只看到一個格式，不然會有選單可以選</p><h1 id="附帶效果"><a href="#附帶效果" class="headerlink" title="附帶效果"></a>附帶效果</h1><p>其實不用兩個格式是很好的，以前我都要把抓下來的書先用desktop版的<code>calibre</code>轉檔然後等於把兩種格式都上傳到Server上幾乎是雙倍佔空間..現在這樣不僅省了功夫，還可以省空間</p><p>一兼二顧非常之好</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>其實我不太清楚<code>mobi</code>跟<code>epub</code>兩種格式到底有什麼差別…不過可以統一成一種格式也是比較方便的….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>無聊～調整Blog主題設定</title>
      <link href="/2022/07/27/2022072701/"/>
      <url>/2022/07/27/2022072701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><ruby><font color=lightblue><del>回顧系列</del></font><rp>(</rp><rt><font color=red>薪水小偷</font></rt><rp>)</rp></ruby>系列又來了…因為不知道要弄什麼，所以乾脆Dig-in現在的NexT主題來看看有沒有什麼好玩的…</p><span id="more"></span><h1 id="修改內容"><a href="#修改內容" class="headerlink" title="修改內容"></a>修改內容</h1><h2 id="Codeblock-Code-fence效果調整"><a href="#Codeblock-Code-fence效果調整" class="headerlink" title="Codeblock - Code fence效果調整"></a>Codeblock - Code fence效果調整</h2><h3 id="設定變更處"><a href="#設定變更處" class="headerlink" title="設定變更處"></a>設定變更處</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">codeblock<span class="punctuation">:</span></span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//theme-next.js.org/highlight/</span></span><br><span class="line">  theme<span class="punctuation">:</span></span><br><span class="line">    light<span class="punctuation">:</span> default</span><br><span class="line">    dark<span class="punctuation">:</span> tomorrow-night</span><br><span class="line">  prism<span class="punctuation">:</span></span><br><span class="line">    light<span class="punctuation">:</span> prism</span><br><span class="line">    dark<span class="punctuation">:</span> prism-dark</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button<span class="punctuation">:</span></span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    # Available values<span class="punctuation">:</span> default | flat | mac</span><br><span class="line">    style<span class="punctuation">:</span> mac</span><br></pre></td></tr></table></figure><h3 id="效果圖"><a href="#效果圖" class="headerlink" title="效果圖"></a>效果圖</h3><h4 id="使用Default-Flat效果如下"><a href="#使用Default-Flat效果如下" class="headerlink" title="使用Default&#x2F;Flat效果如下"></a>使用Default&#x2F;Flat效果如下</h4><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/default_style.PNG" alt="Default &amp; Flat效果"></p><h4 id="使用Mac效果如下"><a href="#使用Mac效果如下" class="headerlink" title="使用Mac效果如下"></a>使用Mac效果如下</h4><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mac_style.PNG" alt="Mac效果"></p><p>看起來還是用Mac比較騷一點…..</p><h2 id="Tag效果調整"><a href="#Tag效果調整" class="headerlink" title="Tag效果調整"></a>Tag效果調整</h2><h3 id="設定變更處-1"><a href="#設定變更處-1" class="headerlink" title="設定變更處"></a>設定變更處</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Tags Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/tag-plugins/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  <span class="built_in">enable</span>: ture</span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: dark</span><br></pre></td></tr></table></figure><h3 id="效果圖-1"><a href="#效果圖-1" class="headerlink" title="效果圖"></a>效果圖</h3><h4 id="啟用Mermaid繪圖"><a href="#啟用Mermaid繪圖" class="headerlink" title="啟用Mermaid繪圖"></a>啟用Mermaid繪圖</h4><h5 id="Markdown-Code"><a href="#Markdown-Code" class="headerlink" title="Markdown Code"></a>Markdown Code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#```mermaid                                 #這個要用code fence語法表示</span></span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    end</span><br><span class="line"><span class="comment">#```</span></span><br></pre></td></tr></table></figure><h5 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h5><pre><code class="highlight mermaid">sequenceDiagram    Alice-&gt;John: Hello John, how are you?    loop every minute        John--&gt;Alice: Great!    end</code></pre><h4 id="不同風格-default"><a href="#不同風格-default" class="headerlink" title="不同風格 - default"></a>不同風格 - default</h4><h5 id="Light-theme"><a href="#Light-theme" class="headerlink" title="Light theme"></a>Light theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-light-default.PNG"></p><h5 id="Dark-theme"><a href="#Dark-theme" class="headerlink" title="Dark theme"></a>Dark theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-dark-default.PNG"></p><h4 id="不同風格-dark"><a href="#不同風格-dark" class="headerlink" title="不同風格 - dark"></a>不同風格 - dark</h4><h5 id="Light-theme-1"><a href="#Light-theme-1" class="headerlink" title="Light theme"></a>Light theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-light-dark.PNG"></p><h5 id="Dark-theme-1"><a href="#Dark-theme-1" class="headerlink" title="Dark theme"></a>Dark theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-dark-dark.PNG"></p><h4 id="不同風格-forest"><a href="#不同風格-forest" class="headerlink" title="不同風格 - forest"></a>不同風格 - forest</h4><h5 id="Light-theme-2"><a href="#Light-theme-2" class="headerlink" title="Light theme"></a>Light theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-light-forest.png"></p><h5 id="Dark-theme-2"><a href="#Dark-theme-2" class="headerlink" title="Dark theme"></a>Dark theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-dark-forest.PNG"></p><h4 id="不同風格-neutral"><a href="#不同風格-neutral" class="headerlink" title="不同風格 - neutral"></a>不同風格 - neutral</h4><h5 id="Light-theme-3"><a href="#Light-theme-3" class="headerlink" title="Light theme"></a>Light theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-light-neutral.PNG"></p><h5 id="Dark-theme-3"><a href="#Dark-theme-3" class="headerlink" title="Dark theme"></a>Dark theme</h5><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/mermaid-dark-neutral.PNG"></p><p>我後來發現可能是我的Dark theme.js有問題，當Mermaid theme light &amp; Dark設定不一樣的時候會只render light theme的樣式..所以我最終採用都一樣的dark theme</p><h1 id="結論…"><a href="#結論…" class="headerlink" title="結論…"></a>結論…</h1><p>就是閒的蛋疼…實際上我也不怎麼用Mermaid畫圖就是了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Isso - again</title>
      <link href="/2022/07/26/2022072601/"/>
      <url>/2022/07/26/2022072601/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><ruby><font color=lightblue><del>溫故知新</del></font><rp>(</rp><rt><font color=red>炒冷飯</font></rt><rp>)</rp></ruby>系列又來了…這次是評論系統的ISSO…</p><span id="more"></span><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>我以前弄過這玩意…但是我忘記為什麼後來拿掉了，是因為Docker host切割？還是因為<code>Traefik</code>導入…反正後來就沒用了….</p><h2 id="簡單流程"><a href="#簡單流程" class="headerlink" title="簡單流程"></a>簡單流程</h2><p>老實說要是成功了我就得去改一下Wiki裡面的文件了….</p><p><font color=red><del>不過很神奇的是我雖然有讓<code>isso</code>成功跑起來..但是我的Blog就是沒有增加評論區塊出來…真的是見鬼….不知道是不是走<code>https</code>的關係….</del></font></p><p>真的見鬼..我用<code>hexo s</code>測試那麼多次都失敗..結果真的<code>hexo g -d</code>居然是有評論系統的….</p><h1 id="結論…"><a href="#結論…" class="headerlink" title="結論…"></a>結論…</h1><p>搞了半天，雖沒人會在我這個自嗨的Blog給我留言..但是我還是多多少少會想弄個留言系統看看是不是真的沒有…人老就愛作怪…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible - again</title>
      <link href="/2022/07/25/2022072501/"/>
      <url>/2022/07/25/2022072501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近我<ruby><font color=blue><del>好學不倦</del></font><rp>(</rp><rt><font color=red>閒的蛋疼</font></rt><rp>)</rp></ruby>所以又把之前碰了一下就放棄的Ansible撿回來再念一下</p><span id="more"></span><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>如同<a href="https://kiwi0093.github.io/wiki/wiki/Network/Ansible/Install%20&%20Configuration/1-Intro/">我的Wiki</a>裡面寫的, 這是RedHat的一個好用Server管理程式，透過Python+ssh可以在client端執行management node端的playbook或是指令來對client進行控制與管理，最大的優點是他有很多module可以來確認client的狀態(例如某個package是否有安裝之類的)以達到對於client端的組態管理成果</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li><p>基本上要順順的連線就要搭配不須另外Key密碼的SSH private key來進行連線</p></li><li><p>執行的速度沒有直接跑script快</p></li><li><p>沒有大量重複性設定的前提下不會比汎用型的shell script快&#x2F;好用</p></li></ul><h2 id="大致結構"><a href="#大致結構" class="headerlink" title="大致結構"></a>大致結構</h2><p>基本上就是利用<code>inventory</code>來管理連線的對象，用<code>動作定義.yml</code>來定義自動化的動作</p><p>這個<code>動作定義.yml</code>可以是最上層的playbook, 也可以是roles內的主要tasks, 也可以是tasks裡面被<code>inculde_tasks</code>帶進的其他<code>動作定義.yml</code>, 所以在編寫的時候可以一塊一塊的先寫出獨立的object,然後在用上層的playbook全部串起來搭配變數做判斷式最終達到通用的server管理框架（這時候就可以回到inventory去定義不同的群組做不同的事情）</p><h1 id="結論…"><a href="#結論…" class="headerlink" title="結論…"></a>結論…</h1><p>寫到一半,我發現要設定server還是用script跑比較輕鬆愉快，要修改也容易，不過要狀態管理的話這個比script方便多了….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Curtail</title>
      <link href="/2022/07/21/2022072101/"/>
      <url>/2022/07/21/2022072101/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是在feedly上看到的….</p><span id="more"></span><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>這是一個圖形壓縮程式,對於會把圖扔到GITHUB上面當圖床的我來說應該算是很有必要的工具..</p><p><a href="https://www.omgubuntu.co.uk/2022/07/curtail-is-an-image-compressor-app-for-ubuntu">Curtail is an Awesome Image Compressor Tool for Linux - OMG! Ubuntu! (omgubuntu.co.uk)</a></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>因為我用的是<code>Manjaro</code>所以就一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S curtail</span><br></pre></td></tr></table></figure><p>就搞定了….</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>執行讓它跑出GUI,然後把圖拉進去….搞定…..</p><h1 id="結論…"><a href="#結論…" class="headerlink" title="結論…"></a>結論…</h1><p>簡單好用的小東西，真的要說要設定Marktext的自動上傳還比較麻煩</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home DNS發春</title>
      <link href="/2022/07/20/2022072001/"/>
      <url>/2022/07/20/2022072001/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為煩人的廣告…我在家裡掛了AD Guard,但是這幾天不知道為什麼家裡的內部網路因為DNS掛點而失效….</p><span id="more"></span><h1 id="簡單Debug"><a href="#簡單Debug" class="headerlink" title="簡單Debug"></a>簡單Debug</h1><p>這段根本是廢話..</p><p>不能連線的時候一看有DNS異常….肯定就是DNS有鬼</p><h1 id="對應方法"><a href="#對應方法" class="headerlink" title="對應方法"></a>對應方法</h1><p>目前把DHCPd裡面指定的DNS指到另一台dnsmasq（因為我需要Mapping一堆內部DN的服務）然後，傑克這實在是太神奇了家裡網路都很順耶(除了會看到廣告以外)</p><h1 id="Root-Cause分析"><a href="#Root-Cause分析" class="headerlink" title="Root Cause分析"></a>Root Cause分析</h1><ul><li><p>AD Guard有正常跑起來</p></li><li><p>斷掉是時好時壞</p></li><li><p>同一台機器上面還跑了<code>tdarr</code></p></li></ul><p>推測（不負責也沒證據的版本）應該是機器Loading過重所以AD Guard要死不死的造成問題…</p><h1 id="結論…"><a href="#結論…" class="headerlink" title="結論…"></a>結論…</h1><p>買新的Server, 要夠力一點的..(大誤)</p><p>未來應該是需要更多docker host把resource進行切割,以確保骨幹服務有足夠的resource跑</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bye-Bey WSL~~</title>
      <link href="/2022/07/16/2022071601/"/>
      <url>/2022/07/16/2022071601/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為是公司的電腦，所以我一直忍著不亂搞，想說用著WSL2+WSLg加減用用就好不要太過分（是說這樣應該已經蠻過份了），但就在我上週末手賤重新整理正在使用的ManjaroWSL時候發現我沒辦法複製出那個被我幹掉的full functional WSL了…然後我就跟WSL說Bye Bye了</p><span id="more"></span><h1 id="現在的方案"><a href="#現在的方案" class="headerlink" title="現在的方案"></a>現在的方案</h1><p>講方案就有點沈重,其實就是Manjaro KDE guest in Virtualbox @ windows10 host</p><h1 id="苦難歷程"><a href="#苦難歷程" class="headerlink" title="苦難歷程"></a>苦難歷程</h1><h3 id="Hypervisor選擇"><a href="#Hypervisor選擇" class="headerlink" title="Hypervisor選擇"></a>Hypervisor選擇</h3><p>其實在選定最終方案之前我也是很猶豫是要用Virtualbox還是VMware workstation player…</p><p>講真的要不是公司的電腦不用考慮太多我應該是會直接選用VMware workstation Pro..</p><p>你說我怎麼不選Qemu？恩….答案非常單純，單純的就是我以為在Windows Host上用效能會很差所以連測試都沒有就跳過了….</p><p>最後真的是VMware player的功能太陽春了，連auto resize都沒有….所以就忍痛放棄</p><h3 id="Convert-from-WSL-to-Virtualbox"><a href="#Convert-from-WSL-to-Virtualbox" class="headerlink" title="Convert from WSL to Virtualbox"></a>Convert from WSL to Virtualbox</h3><p>其實這個只能說我自己蠢…</p><p>在移除WSL還有點三心兩意，以至於Hyper-V相關的套件沒移除乾淨所以很多下個月才會碰到的現象我幾乎全遇上了</p><p>像是莫名其妙會freeze guest os，Linux多核心無法開機，就算可以用也超級慢….</p><p>結果把最後windows的模擬系統平台關了就解決了…什麼鳥問題都沒有</p><h3 id="System-Tuning"><a href="#System-Tuning" class="headerlink" title="System Tuning"></a>System Tuning</h3><p>生在這個時代真的很幸運，什麼系統裝完的基礎調校一律不用，預設都幫你裝好了…</p><p>只要把要拿掉的拿掉，要用的裝上，然後就可以直接用了…</p><h3 id="不免俗的吐槽"><a href="#不免俗的吐槽" class="headerlink" title="不免俗的吐槽"></a>不免俗的吐槽</h3><p>雖說一切看起來很好，但是我還是得吐槽一下那個Guest&#x2F;Host shared folder功能，我想應該不是故意不做好而是真的有些限制才對，結論上來說就是我若是把我的Git repo放在那個共用夾內就會有各種奇怪的問題，像是git clone會莫名其妙失敗，<code>.git</code>底下奇怪的東西會被Host lock住不能remove…或是npm安裝的時候會告訴你link失敗所以失敗…</p><p>完全打碎了我想Git &amp; Hexo靠企鵝，editor在Windows的騷包用法，現在只能乖乖的都在企鵝底下進行這些…</p><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>需要測試多螢幕環境下是否可以弄到一個螢幕一個全畫面系統的方法進行（要是可以的話其實也蠻炫的）</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Windows還是拿來打電動（跟上班)就好了…整合Linux弄出的WSL真的很像個殘廢的砲灰,不能用systemd依賴的東西（我試過genie systemd也是很鳥）然後resolv.conf相關的也會有問題</p><p>在現在這個企鵝對systemd依賴性越來越高的時代，我只能用雞肋來形容</p><p>另外那個看起來很炫的WSLg其實也不能說不好，不過就是包上微軟皮的VcXsrv沒有太多因為微軟而特有的奇淫巧計…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian As Blog/Wiki editor</title>
      <link href="/2022/06/22/2022062201/"/>
      <url>/2022/06/22/2022062201/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於之前的Typora收費了我後來改用TextMark來作為新的Markdown Editor, 雖然沒有什麼不好用的,不過看到有人用Obsidian來寫筆記,我就想說一起改一改好了</p><span id="more"></span><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>其實很單純因為Obsidian是個跨平台的筆記程式,不管是用哪個OS都可以直接安裝,只要打開現有的目錄指定到現在的Git repo位置就好了</p><h1 id="驚豔之處"><a href="#驚豔之處" class="headerlink" title="驚豔之處"></a>驚豔之處</h1><p>老實說..目前還沒看到…可能是它最強的反向連結這塊我還用不到吧？<br>另外有人喜歡Obsidian的知識星圖,喜歡看著一堆Node都串在一起感覺自己的知識也串了一堆<br>不過我看了用Obsidian直接開我以前就寫好的筆記…全部是獨立的node什麼都沒連著….<br>可能後面要另外設定,不過考慮到我不是直接用Obsidian閱讀筆記,而是透過Hexo轉成靜態網頁再塞上github..這個就應該沒用了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reserve Proxy for Private Network</title>
      <link href="/2022/03/15/2022031501/"/>
      <url>/2022/03/15/2022031501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>重整家中內部服務..把內部跟外部的Server拆為Private &amp; DMZ,但是內部連線的部份老是用<code>http://ip:port</code>真的很醜（好啦我很有病）所以就想弄個反向代理來直接指定..無奈又是一個學藝不經的故事..</p><span id="more"></span><h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>其實很單純,沒有要弄到跟很多年前的那個什麼<code>dual chroot bind</code>的超複雜方式進行,而是採用簡單的<code>dnsmasq+adguard home</code>搞定內部DNS（包括內部Domain指定與擋廣告）..你說為什麼不用<code>Pi Hole</code>?<br>因為我懶而且先看到ADGUARD Home, 不過可能為了精簡也導入直接在dnsmasq上做擋廣告也可以</p><p>PS:感謝<a href="https://pgl.yoyo.org/adservers/">師匠提供的偉大連結</a></p><h1 id="基本架構"><a href="#基本架構" class="headerlink" title="基本架構"></a>基本架構</h1><p>其實也說不上什麼架構…就是對比外部使用Traefik,裡面不需要自動SSL(內部Domain也很難做SSL)所以內部就加掛一個<code>Nginx Proxy Manager</code>然後透過NPM來進行轉址</p><h2 id="慘劇"><a href="#慘劇" class="headerlink" title="慘劇"></a>慘劇</h2><p>不知道為什麼,應該是很單純的設定就是沒辦法成功..例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://emby.private -&gt; http://emby.private:8888</span><br></pre></td></tr></table></figure><p>但是卻沒有Mapping過去</p><h2 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h2><p>最終用docker container間指定的方式可以達成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://emby.private -&gt; http://emby:8888</span><br></pre></td></tr></table></figure><p>這樣就搞定了（前提是都要在同一個docker network裡面）</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>只有一句話…學藝不精呀～～～</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企鵝/貨櫃宣教記 - 1</title>
      <link href="/2022/02/23/2022022301/"/>
      <url>/2022/02/23/2022022301/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近都在<ruby><font color=blue><del>傳遞美好之處</del></font><rp>(</rp><rt><font color=red>洗腦</font></rt><rp>)</rp></ruby>公司IT讓他們盡可能的靠向Linux&#x2F;Container，還真的有效了…</p><span id="more"></span><h1 id="神奇的某專案"><a href="#神奇的某專案" class="headerlink" title="神奇的某專案"></a>神奇的某專案</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>這件事起源於被老闆Assign去Support IT部門做某個專案(有企業機密就不細講了..)</p><p>重點是被Assign的任務是去擔任該專案的PM，不過白目如我..手還是伸進專案的Server架構裡去了….</p><h2 id="主要罪行"><a href="#主要罪行" class="headerlink" title="主要罪行"></a>主要罪行</h2><p>因為這個案子需要在公司這邊需要有<code>SQL-Server +JDK環境 ＋ Samba</code></p><p>本來敝公司的IT準備拿出家傳的WIndows Server來搞定一切的時候,我多嘴來了一句</p><p><code>這些不是可以用企鵝+Container直接搞定還好備份嗎？</code></p><p>然而因為我那愛現的個性早就跟IT們展示過家裡的成果後…就得到一句</p><p><code>我們也這麼覺得，但是我們不會，你可以幫忙把環境弄起來嗎？</code></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><h3 id="Amazon-Linux2"><a href="#Amazon-Linux2" class="headerlink" title="Amazon Linux2"></a>Amazon Linux2</h3><p>因為未來這個機器要直接用AWS來跑..所以Linux的distro就被限定使用Amazon Linux</p><p>不得不說在本機的VMware workstation上面測試這玩意真的很讓人倒陽….</p><p>安裝囉唆又麻煩（其實也不是真的麻煩主要是自己功力不足一個網路設定就逼死自己了）</p><p>裝好之後其實用起來很類似<code>Oracle Linux</code>(這不是廢話嗎他們幾乎都是抄同一個來源改的…)</p><h3 id="MS-SQL-Server-on-Docker"><a href="#MS-SQL-Server-on-Docker" class="headerlink" title="MS SQL-Server on Docker"></a>MS SQL-Server on Docker</h3><p>這算是M$佛心有提供SQL-Server 2019官方的Docker Image,所以只要裝上就好了…</p><p>（對啦我的所謂開發就是弄出一版可以用的docker-compose.yml就算搞定了）</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>目前為止還蠻愉快的（那前面講那麼多～～真是蹭的類）</p><p>後面要弄的更貼心的話大概會寫個script讓他可以自動把Amazon LInux環境的Configuration都弄好（<ruby><font color="blue"><del>貼心的自動化服務</del></font><rp>(</rp><rt><font color="red">把別人廢人化</font></rt><rp>)</rp></ruby>）這樣以後就算Server掛掉或是要複製都可以直接上….</p><p>然後也算是我可以實際檢驗一下在商用環境下我會的技能是否足以使用還是需要再精進…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Only Office Workspace</title>
      <link href="/2022/02/15/2022021501/"/>
      <url>/2022/02/15/2022021501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>延續先前G-suite的問題..今天把手伸向了Only Office</p><span id="more"></span><h1 id="開端"><a href="#開端" class="headerlink" title="開端"></a>開端</h1><p>其實也不完全是因為G-suite,主要還是在想說未來家中的服務是否還需要再整合提昇，所以就試裝onlyoffice workspace來試試看，沒想到還挺麻煩的</p><h1 id="OnlyOffice-Workspace"><a href="#OnlyOffice-Workspace" class="headerlink" title="OnlyOffice Workspace"></a>OnlyOffice Workspace</h1><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>其實就是一個免費版的Office365，Workspace包含了</p><ul><li><p>Mail</p><ul><li><p>Web Client</p></li><li><p>SMTP server</p></li><li><p>Customize Domain</p></li></ul></li><li><p>Document</p><ul><li><p>Word</p></li><li><p>Excel</p></li><li><p>Powerpoint</p></li></ul></li><li><p>Project</p><ul><li><p>Task</p></li><li><p>Gantt chart</p></li></ul></li><li><p>CRM</p></li><li><p>People</p></li><li><p>Calander</p></li></ul><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><p>不出意外，這個也是用docker—compose來進行安裝，細節的部份老規矩放到wiki上面去</p><p>但是這個安裝上有著很大的漏洞</p><p>不像其他的docker安裝，他的sql初始化指令跟mysql的設定都沒塞在image裡面得事先手動加上，因為如此所以一開始的時候問題多多</p><h2 id="Server-Resource"><a href="#Server-Resource" class="headerlink" title="Server Resource"></a>Server Resource</h2><p>雖然他一開始就寫了但是我還是很白目的一開始在我那資源很少的Oracle Cloud上試跑，然後下場就是完全用光系統資源然後還是跑步起來….後來只能靠著重開初期勉強還能操作的時候硬把Container砍了…然後才恢復正常…</p><p>後來在家裡的機器上跑看起來的確吃了不少資源（不過原始我就因為追劇套餐得消耗不少系統資源了（大概佔60％的RAM用量）但是還在可以運作的範圍內</p><h2 id="殘留課題"><a href="#殘留課題" class="headerlink" title="殘留課題"></a>殘留課題</h2><ul><li><p>Document無法開啟</p><p>這個看網路上的說法是因為Traefik V2沒有設好middlewares造成的</p></li><li><p>Traefik Middleware不會設定</p><p>好啦….這個搭配上述的就等於是目前我搞不定啦～～</p></li><li><p>沒有繁體中文界面</p><p>這個也無解</p></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>就結果來看目前還蠻令人興奮的，不過話又說回來在Office跟Google Doc都還有免費的可以使用的情況下..似乎除了自己Domain的Mail Address, Project,以及可以直接download文件以外似乎沒什麼誘因一定要克服萬難去把它裝上…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G Suite要收費所衍生的悲劇～～II</title>
      <link href="/2022/02/07/2022020701/"/>
      <url>/2022/02/07/2022020701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看著Google公告的時間還有快五個月，我就大意了，於是，悲劇就這樣一直擴張….</p><span id="more"></span><h1 id="悲劇的正體"><a href="#悲劇的正體" class="headerlink" title="悲劇的正體"></a>悲劇的正體</h1><h2 id="信箱收不到信"><a href="#信箱收不到信" class="headerlink" title="信箱收不到信.."></a>信箱收不到信..</h2><p>事情的發生就是這麼湊巧,其實本來是不會發現我那個信箱已經收不到信件了…<br>直到某天我白目想在企鵝上玩HOI4(因為串流遊玩一直出問題所以我就直接在企鵝上硬上了)<br>然後因為忘記steam密碼但是要重置又一直收不到信…<br>然後我才發現靠是信箱收不到了…</p><h2 id="Steam的解決方案"><a href="#Steam的解決方案" class="headerlink" title="Steam的解決方案"></a>Steam的解決方案</h2><p>用電話號碼…重新變更密碼後再變更信箱…</p><h2 id="Linkedin的解決方案"><a href="#Linkedin的解決方案" class="headerlink" title="Linkedin的解決方案"></a>Linkedin的解決方案</h2><p>用電話號碼…變更密碼後把信箱跟電話號碼都換了(不然我要一直開中國的sim卡真的很累..)</p><h2 id="Oracle-Cloud"><a href="#Oracle-Cloud" class="headerlink" title="Oracle Cloud"></a>Oracle Cloud</h2><p>上次就知道沒救了…但是今天更悲劇其中一個帳號被鎖了….而且還是鎖我有用的那個…<br>跟客服唉過之後下午發現那位應該是阿三的客服真的幫我把鎖的帳號換成一直沒辦法建立VM的大阪帳號…<br>算是好家在吧…..</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>綁電話看來還是有用的…不然今天就一路無解了…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora要收費了</title>
      <link href="/2022/01/27/2022012701/"/>
      <url>/2022/01/27/2022012701/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近更新系統後忽然發現使用typora的時候會跳出BUY Lisence的畫面…查了一下發現Typora要收費了…</p><span id="more"></span><h1 id="免費替代品"><a href="#免費替代品" class="headerlink" title="免費替代品"></a>免費替代品</h1><h3 id="MarkText"><a href="#MarkText" class="headerlink" title="MarkText"></a>MarkText</h3><ul><li>Marktxt - <a href="https://marktext.app/">Hompage</a> , [Github](<a href="https://github.com/marktext/marktext">GitHub - marktext&#x2F;marktext: 📝A simple and elegant markdown editor, available for Linux, macOS and Windows.</a>)</li></ul><p>這是一個基於MIT的markdown編輯器,目前這篇文章就是改用這個寫的</p><h2 id="與Typora差異"><a href="#與Typora差異" class="headerlink" title="與Typora差異"></a>與Typora差異</h2><ul><li><p>Hot-key不同</p><p>習慣了Typora的<code>ctl+/</code>來切換source code mode&#x2F;顯示mode,這個預設改成<code>alt+ctrl+s</code>,需要習慣</p></li><li><p>界面變更</p><p>這個是無可厚非的,不過最大的問題是他是無邊匡的程式設計,沒有熱鍵可以zoon in, 編輯區看起來很小,需要習慣</p></li><li><p>內建github Image uploader</p><p>這個真的是佛心來著,之前Typora都是靠pico-go來upload image, 現在改成內建功能真的很棒,也是只需要github repo token就可以</p></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>軟體轉換期肯定不太習慣,不過比起14.9USD,我的小氣個性可能會drive我很快就習慣這個編輯器</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Blog </tag>
            
            <tag> Wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>G Suite要收費所衍生的悲劇～～</title>
      <link href="/2022/01/24/2022012401/"/>
      <url>/2022/01/24/2022012401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前兩天久未聯絡的師匠傳來了惡耗<br>“G-Suite要收錢了，快逃吧～”<br>對於我一堆帳號跟綁定都是用著師匠給的mail address的我根本就是晴天霹靂….</p><span id="more"></span><h1 id="變更Mail-Address"><a href="#變更Mail-Address" class="headerlink" title="變更Mail Address"></a>變更Mail Address</h1><h2 id="最後的期限"><a href="#最後的期限" class="headerlink" title="最後的期限"></a>最後的期限</h2><h3 id="G-Suite免費版將會於2022-6-30後就正式停止運作"><a href="#G-Suite免費版將會於2022-6-30後就正式停止運作" class="headerlink" title="G-Suite免費版將會於2022&#x2F;6&#x2F;30後就正式停止運作"></a>G-Suite免費版將會於2022&#x2F;6&#x2F;30後就正式停止運作</h3><h2 id="衝擊"><a href="#衝擊" class="headerlink" title="衝擊"></a>衝擊</h2><p>雖然綁定很多,但是最有影響的銀行反而是最好變更了(畢竟這個是看自然人來綁定的只要國家不改我的身份證字號就不會沒救)</p><p>租約的VPS帳號，這些都很麻煩，但是大多數的server都不會再續約其實也沒真的很麻煩(其實是忘記改這些…)除了….</p><h1 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h1><p>基本上算是完成了帳號變更讓我可以用其他的Mail Address來綁定，但是這個過程搞到了一大堆對應的SSL KEY</p><p>自動update ssl key這個功能真的是雙面刃，瞬間沒弄好DNS設定的domain對應的ssl key就掛掉了….得等一週到三個月釋放出來後才能再使用…&#x3D;_&#x3D;!!</p><p>而且還剛好發現開啟proxy功能的Domain不能太多層不然會有問題…這個目前列入待解決事項</p><h1 id="Oracle-Cloud"><a href="#Oracle-Cloud" class="headerlink" title="Oracle Cloud"></a>Oracle Cloud</h1><p>這就是一個沒辦法修改的悲劇…看來只能不忘記密碼的狀態下繼續使用了…..</p><h1 id="Zoho-Mail"><a href="#Zoho-Mail" class="headerlink" title="Zoho Mail"></a>Zoho Mail</h1><p>作為替代品，目前找的到的就是這個，可以使用customize domain的信箱服務，免費可以用5個信箱….</p><p>但是天知道免費倒底可以免費多久….</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>反正現在還有免錢的可以用就先用，要是真的不行了就只能自己搭建Mail Server,好在現在用docker搭建都很方便只是要有server就是了….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Service整理</title>
      <link href="/2022/01/22/2022012201/"/>
      <url>/2022/01/22/2022012201/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在其他VPS上面實驗Traefik等東西後覺得原來家裡的架構不是那麼的好,所以想重新整理現在家裡的相關服務</p><span id="more"></span><h1 id="原來的架構與服務"><a href="#原來的架構與服務" class="headerlink" title="原來的架構與服務"></a>原來的架構與服務</h1><h2 id="原來的服務"><a href="#原來的服務" class="headerlink" title="原來的服務"></a>原來的服務</h2><h3 id="架構類"><a href="#架構類" class="headerlink" title="架構類"></a>架構類</h3><ul><li>Nginx Proxy Manager - 前端的Reserve proxy server</li><li>Mariadb - 主要的DB</li><li>Portainer - Docker Web GUI</li><li>Watchtower - 自動更新Container&#x2F;Image工具</li></ul><h3 id="服務類"><a href="#服務類" class="headerlink" title="服務類"></a>服務類</h3><h4 id="基礎網路服務"><a href="#基礎網路服務" class="headerlink" title="基礎網路服務"></a>基礎網路服務</h4><ul><li>Wireguard - vpn to Home</li><li>Guacamole - Web terminal to Home</li></ul><h4 id="多媒體網路服務"><a href="#多媒體網路服務" class="headerlink" title="多媒體網路服務"></a>多媒體網路服務</h4><ul><li>Navidrome - Music Streaming</li><li>Calibre-web - E-Book Library</li></ul><h5 id="追劇套餐-bundle"><a href="#追劇套餐-bundle" class="headerlink" title="追劇套餐(bundle)"></a>追劇套餐(bundle)</h5><ul><li>qbittorent - Major BT downloader</li><li>Emby - Media Front-end</li><li>Sonarr - Automatic tool for Drama&#x2F;Anime</li><li>Radarr - Automatic tool for Movie</li><li>Lidarr - Automatic tool for Music</li><li>Chinesesubfinder - Automatic tool for Chinese Sub file</li><li>Jackett - RSS feed interface</li><li>Flaresovlerr - Tool for supporting Jackett</li></ul><h4 id="其他類"><a href="#其他類" class="headerlink" title="其他類"></a>其他類</h4><ul><li>Librenms - Monitoring </li><li>phpBB - BBS</li><li>Heimdall - Dashboard</li></ul><h1 id="打算的更新版本"><a href="#打算的更新版本" class="headerlink" title="打算的更新版本"></a>打算的更新版本</h1><h3 id="架構類-1"><a href="#架構類-1" class="headerlink" title="架構類"></a>架構類</h3><ul><li>Nginx Proxy Manager - 更換為Traefik</li><li>Mariadb - 後續依照Service需求不要集中使用改分散到各Service獨立建立db簡化備份</li><li>Portainer - 保留</li><li>Watchtower - 保留</li></ul><h3 id="服務類-1"><a href="#服務類-1" class="headerlink" title="服務類"></a>服務類</h3><h4 id="基礎網路服務-1"><a href="#基礎網路服務-1" class="headerlink" title="基礎網路服務"></a>基礎網路服務</h4><ul><li>Wireguard - 保留</li><li>Guacamole - 保留</li></ul><h4 id="多媒體網路服務-完整保留"><a href="#多媒體網路服務-完整保留" class="headerlink" title="多媒體網路服務 - 完整保留"></a>多媒體網路服務 - 完整保留</h4><ul><li>Navidrome - 保留</li><li>Calibre-web - 保留</li></ul><h5 id="追劇套餐-bundle-完整保留"><a href="#追劇套餐-bundle-完整保留" class="headerlink" title="追劇套餐(bundle) - 完整保留"></a>追劇套餐(bundle) - 完整保留</h5><ul><li>qbittorent - Major BT downloader</li><li>Emby - Media Front-end</li><li>Sonarr - Automatic tool for Drama&#x2F;Anime</li><li>Radarr - Automatic tool for Movie</li><li>Lidarr - Automatic tool for Music</li><li>Chinesesubfinder - Automatic tool for Chinese Sub file</li><li>Jackett - RSS feed interface</li><li>Flaresovlerr - Tool for supporting Jackett</li></ul><h4 id="其他類-1"><a href="#其他類-1" class="headerlink" title="其他類"></a>其他類</h4><ul><li>Librenms - 蠻雞肋的,還在考慮要拿什麼替代或是取消</li><li>phpBB - 沒用途取消</li><li>Heimdall - 沒用途取消</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Cloud</title>
      <link href="/2022/01/10/2022011001/"/>
      <url>/2022/01/10/2022011001/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>隨便亂逛看到Oracle有永久免費的Cloud,一時手癢就申請了</p><p><a href="https://www.oracle.com/cloud/">Oracle Cloud</a></p><span id="more"></span><h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h1><p>免費的部份有一大堆DB相關的服務(不愧是Oracle)都用不上,對我來說大概只有以下幾點好用</p><ul><li>可以建立兩個VM - 免費的OS只有Ubuntu&#x2F;CentOS&#x2F;Oracle Linux..(沒有Arch系的也沒有Debian…)</li><li>過時的CPU+1GB RAM</li><li>486Mb&#x2F;s不限制流量的網路</li><li>據說兩個加起來100GB的空間</li></ul><h1 id="目前的用途"><a href="#目前的用途" class="headerlink" title="目前的用途"></a>目前的用途</h1><p>這樣的東西老實說很適合拿來架梯子(只要牆內直連的速度夠的話…),不過我這次優先拿來跑Calibre-Web,因為我發現現在公司裡面其實也有不少輕小說的愛好者</p><p>所以乾脆拿來架設給大家用的電子書庫比較實在(當然後面應該也是會在同一台上面掛上V2Ray)</p><h1 id="Service構成"><a href="#Service構成" class="headerlink" title="Service構成"></a>Service構成</h1><ul><li>Basic OS - Ubuntu 21.0 mini</li><li>Docker Conainers<ul><li>Traefik  - Proxy&#x2F;Redirect</li><li>Portainer - Docker GUI</li><li>watchtower - Auto Updater</li><li>Calibre-web - Ebook library</li></ul></li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>除了上述的用來增加宅友的用處以外其實更重要的就是拿來練習Traefik的相關使用，目前看起來下一次家裡的大型改版應該就是要把目前用的Nginx Proxy Manger換成Traefik，畢竟這是連Port Mapping都不需要的好東西</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traefik</title>
      <link href="/2021/11/18/2021111801/"/>
      <url>/2021/11/18/2021111801/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因為想自己架設Mail Server, 但是又不想動家裡的Server,於是我測試了Traefik+V2ray…</p><p>效果還不錯</p><span id="more"></span><h1 id="基本架構"><a href="#基本架構" class="headerlink" title="基本架構"></a>基本架構</h1><p>其實這個應該很多地方都說明過了,Traefik就是一個<del>自動</del>靠著Docker-compose.yml裡的Label定義會自動產生container對應的Virtual host的好東西</p><h1 id="與-Nginx-Proxy-Manager的比較"><a href="#與-Nginx-Proxy-Manager的比較" class="headerlink" title="與 Nginx Proxy Manager的比較"></a>與 Nginx Proxy Manager的比較</h1><ol><li>NPM畢竟只是Proxy, 你還是需要自己把Container的Port expose&#x2F;mapping出來</li><li>NPM的SSL認證跟Certbot一樣存在&#x2F;etc&#x2F;letscrypt裡,但是traefik是直接存在ACME.json內格式不一樣</li><li>NPM操作比較直覺,Traefik需要理解Docker-compose.yml的定義</li></ol><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>老實說是還不錯,不需要定義什麼Port有的沒的,基本上只需要在docker-compose.yml裡面定義好你的Hostname他就會自動生成所有的一切</p><p>很適合想要全自動轉移的人</p><p>雖然說還有load balance之類的功能但是目前還用不到所以….</p><h1 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h1><p>使用Traefik基本上就是不會把主要的Domain拿來用,都是加上Subdomain的方式來獨立開所有的container</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pathfinder:WoTR</title>
      <link href="/2021/11/05/2021110501/"/>
      <url>/2021/11/05/2021110501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.youtube.com/watch?v=nhsvrXpyulU"><img src="http://img.youtube.com/vi/nhsvrXpyulU/sddefault.jpg" alt="Pathfinder:WoTR"></a></p><span id="more"></span><h1 id="遊戲本體"><a href="#遊戲本體" class="headerlink" title="遊戲本體"></a>遊戲本體</h1><p>其實我還沒玩到第二章,畢竟都是晚上趁著小孩睡著後用Moonlight連到GL-73斷斷續續的玩,不過感覺的出來這一代比起上一代的Pathfinder:KingMaker更像完整的遊戲,劇情的部份就目前玩到的部份雖說是王道劇情但是也相對灰暗…感覺蠻讚的</p><h1 id="Moonlight"><a href="#Moonlight" class="headerlink" title="Moonlight"></a>Moonlight</h1><p>其實是很好用了,但是還是會有以下問題</p><ul><li>畫面流暢度不足</li><li>需用MSTSC.EXE模擬桌面才會正常</li><li>顏色有時候怪怪的需要重連</li></ul><p>先講畫面流暢度不足問題,我的測試環境是在家中使用1Gb的有線網路連結,設定約20M的流量,採1080p 30fps的設定但是有時感覺還是會頓…</p><p>不知道問題出在哪</p><p>再來是模擬桌面,這個主要是因為Steam的Big Picture不是很順所以得這樣開不過老實說其實我也可以直接開遊戲但是考慮到會需要上Nexusmod等桌面操作我就還是使用桌面比較輕鬆（也許未來真的用電視盒串流的時候我會另外處理吧）</p><p>最後是顏色問題,這個也是無解不知道哪裡設定要改,不過重連後就會正常所以也無所謂</p><p>講了問題後還是要稱讚一下,使用Intel內建的GPU也可以流暢的玩…（目前測試只有在Esxi上的VM沒辦法很順,因為沒有基本的VP9或是HEVC支援…）</p><h1 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h1><p>好啦我承認其實進度很慢的理由是因為我一直努力重玩+魔改….</p><p>目前的Mod還沒有KingMaker那麼豐富（但是主要的幾乎都有了）,職業的部份由於本來就不少所以目前只看到一個Class Mod,不過我想後面應該會越來越多,包括其他可以騎的騎獸修改等</p><p>不過有一個我在KingMaker時期就改過得 - 帶傭兵外型的小弟作法（其實就是把人當成動物夥伴的作法）</p><p>這次也被我try出來怎麼修改了….詳情請看我的Wiki</p><p>我想這樣也就差不多了….後面有空再把他玩完吧….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自動追劇 Windows Base</title>
      <link href="/2021/10/13/2021101301/"/>
      <url>/2021/10/13/2021101301/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實自動追劇的基本都是一樣的,只不過看起來有些人需要Windows Based所以我之前寫了這個</p><p>不過大概比起Windows Base,他們更喜歡HDD流…</p><span id="more"></span><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://sleele.com/2020/03/16/%e9%ab%98%e9%98%b6%e6%95%99%e7%a8%8b-%e8%bf%bd%e5%89%a7%e5%85%a8%e6%b5%81%e7%a8%8b%e8%87%aa%e5%8a%a8%e5%8c%96/comment-page-2/#comment-1651">sleele的Blog</a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="組成元件"><a href="#組成元件" class="headerlink" title="組成元件"></a>組成元件</h3><p>其實不管你用什麼平台主要就是要以下東西分工來達成</p><ul><li><a href="https://github.com/Jackett/Jackett">jackett</a> - 這個負責去Indexer上進行尋找後把資料扔回來</li><li><a href="https://sonarr.tv/">sonarr</a> - 這個是最主要的元件,透過tvdb訂閱你要的影集後往Jackett扔指令讓他去找種子,然後再把找到的訊息扔給下載器去下載,最後再把下載回來的東西改名子整理整齊（搭配emby的格式需要）</li><li><a href="https://radarr.video/">radarr</a> - 基本上跟sonarr功能一樣不過這個是專攻電影的,所以如同建議的要把影集跟動畫分別跑不同的sonarr一樣要跑電影就另外在跑個radarr</li><li><a href="https://www.qbittorrent.org/">qBittorrent</a> - 其實就是個BT下載器,主要是因為sonarr直接可以透過他的WebUI界面去控制他下載所以使用他</li><li><a href="https://emby.media/">Emby</a> - 其實這個可有可無,使用的真正目的只是要讓媒體庫有一個漂亮的UI可以讓所有的Device依照帳號去觀看,簡單的說有看起來就高大上一點</li><li><a href="https://github.com/allanpk716/ChineseSubFinder">Chinesesubfinder</a> - 幫你自動找中文字幕的東西</li></ul><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>因為是自動下載填滿媒體庫,所以主要有以下兩點要滿足</p><ul><li>夠大的空間 - 不管是存放媒體庫的空間,或是BT的暫存空間,都很吃硬碟空間,尤其是BT的暫存可以的話最好找可隨便扔掉的HDD來使用延長媒體庫的硬碟壽命</li><li>能長期開機的主機 -  這也是大多數的教程都會說用NAS+Docker的原因,畢竟NAS就一定是7X24的在跑,所以拿來跑這個是最合適的</li></ul><h3 id="簡易流程說明"><a href="#簡易流程說明" class="headerlink" title="簡易流程說明"></a>簡易流程說明</h3><p>設定好後,只要在Sonarr&#x2F;Radarr的界面上增加你想要訂閱的影集或是電影,接著就放著,只要是Indexer上面有的就會自動安排到下載器,然後就是等他載完,然後會自動改名子,接著繼續等就會自己去找字幕來放好,然後在你的Emby上就可以看到了</p><h3 id="與Blog內的差異"><a href="#與Blog內的差異" class="headerlink" title="與Blog內的差異"></a>與Blog內的差異</h3><p>最大的不同就是Blog裡面的東西都是用Docker安裝的,若你要用Windows來跑,就要去下載這些東西的Windows版(基本上我只有用docker的方式,不過我有確認過這些程式都有提供Windows版的程式,所以應該沒什麼問題)</p><ul><li><a href="https://github.com/Jackett/Jackett/releases">jackett</a></li><li><a href="https://sonarr.tv/#download">sonarr</a></li><li><a href="https://radarr.video/#download">radarr</a></li><li><a href="https://www.qbittorrent.org/download.php">qBittorrent</a></li><li><a href="https://emby.media/download.html">emby</a> - 記得是emby server版</li><li><a href="https://github.com/allanpk716/ChineseSubFinder/releases">Chinesesubfinder</a></li></ul><h3 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h3><p>我覺得Sleele的Blog寫得很詳細,所以我就不多說了,頂多下一個section我提一下我在設定上遇到的一些注意事項</p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><h4 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h4><p>在sonarr&#x2F;radarr的profile設定裡面,會讓你定義要抓到多高解析度的影片,在這裡我只能作人不能貪心,我一開始設定4K最高畫質,然後就是一部電影70GB,若你沒有大到嚇死人的空間請量力而為,一般來說設定在1080p webrip程度的大概一個電影是2~5GB之間</p><h4 id="indexer"><a href="#indexer" class="headerlink" title="indexer"></a>indexer</h4><p>基本上美劇跟電影我是都用RARBG為主,其他就看各自心情,動畫的部份我用DMHY,但是深處在中國的朋友們請先確認你們這些indexer是不是有被牆,若有請記得Jackett連線的那台機器的線路要翻牆</p><h4 id="手動下載"><a href="#手動下載" class="headerlink" title="手動下載"></a>手動下載</h4><p>基本上動畫我都是手動下載的,中劇的部份也是（因為這些玩意對這兩樣的支援性比較差）, 若手動下載下來的檔案請放到sonarr&#x2F;radarr定義的該影集&#x2F;電影的主目錄下面然後在用他們的手動導入功能導入後再整理,這樣就好了</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>上述的各項元件其實可以拆成各自獨立的機器跑,但是請記得&#x2F;download跟&#x2F;media這些地方要讓sonarr&#x2F;radarr都要可以直接控制,其他的我建議你們就先試試看有什麼問題再來討論（甚至需要teamviewer來幫忙處理都ok唷）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Network </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Game Server and Stream</title>
      <link href="/2021/10/13/2021101302/"/>
      <url>/2021/10/13/2021101302/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其實概念很久以前就有想過,但是一直沒有實際需要所以沒弄…(就是懶)</p><p>但是最近因為想要玩<a href="https://store.steampowered.com/app/1184370/Pathfinder_Wrath_of_the_Righteous/">Pathfinder:WoTR</a>所以還是弄了一下</p><span id="more"></span><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>其實很簡單,就是把一台可以玩遊戲的Windows變成可以遠端接續玩遊戲,這樣就可以隨意拿其他Console來玩遊戲而不用被自己的Gaming PC&#x2F;NB限制住</p><p>相關的作法跟教學很多,甚至連<a href="https://www.youtube.com/c/LearnLinuxtv">Learn Linux TV</a>都有教學…</p><p>影片如下</p><p><a href="https://www.youtube.com/watch?v=z2U09XubbAE"><img src="http://img.youtube.com/vi/z2U09XubbAE/sddefault.jpg" alt="Setting up a Windows to Linux Game Streaming Server"></a></p><p>想要弄的人可以自己參考影片</p><h1 id="相關工具"><a href="#相關工具" class="headerlink" title="相關工具"></a>相關工具</h1><ul><li><p>Wake on Lan</p><p>這個其實就是現在主機板都有的功能,詳細怎麼使用請自行Google, Client方面Android有Apk, Linux可以用gwake,都很簡單</p></li><li><p>Nvidia Experiance</p><p>這個基本上是因為我是用N家的卡,所以本來就會裝,要是不用N家的卡,那就會建議用steam link或是kino console,不過沒有搭配的Moonlight快</p></li><li><p>Moonlight</p><p>這個就是個好用的client, 速度快又免錢超贊的而且各平台都有</p></li></ul><h1 id="幾個心得"><a href="#幾個心得" class="headerlink" title="幾個心得"></a>幾個心得</h1><h2 id="垃圾話"><a href="#垃圾話" class="headerlink" title="垃圾話"></a>垃圾話</h2><p>之前就有想過,由於各種需求的增加,會需要很多強大的console,例如高速的平板,足夠玩遊戲的NB,還要輕量好帶的NB,要能跟工作整合的NB等一大堆</p><p>既然家中的Service都開始逐步透過VM的方式虛擬化整合了,在導入docker跟Wireguard後家裡與外面的邊界也越來越模糊,然後就是早從10年前就開始的VM上的Windows P2P專機,到前一陣子的Guaamole+Manjaro,其實我就是開始走系統雲端化的路線讓console回歸真的是個console,不需要高速,不需要性能（網路卡還是需要的）,不過PC&#x2F;NB之於我最原始也是最重要的一個機能 - Gaming卻一直沒被整合進來…</p><p>這次的驗證確立了在網路環境許可的前提下,連同Gaming是可以一併被遠端化的,不過因為耗電等關係,還是不建議一開始就整合進VM裡面(即使可以用PCI passthrogh技術)不玩遊戲的時候還一直讓他開著吃電實在太浪費了</p><h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul><li><p>Wake on Lan的重要性</p><p>說穿了就是省電…老實說要是你不在乎電費以及北極熊的死活,你是可以讓你的Gaming Server 7X24一直開著…</p></li><li><p>Auto Login</p><p>這個其實很重要,因為Windows的尿性,你開機完後沒有真的login的話是不會啟動Nvidia shield,所以你沒辦法連上,要是你用rdp連上去又會相衝而且rdp不會真的讓desktop login…所以不弄auto login的話你就會需要一個可以連上的console..大概是VNC或是DWservice之類的（而且你要連接device要key pin的時候也會需要或是你就去本機按一按弄好再離開也可以）</p></li><li><p>MSTSC.EXE</p><p>需要在shield裡面加上這個玩意直接啟動,用來代替Steam的Big Picture mode,不然你就得去弄個Fake HDMI或是真的接個螢幕(LLT裡面有提到)</p><p>這也是Windows的尿性…但是你設MSTSC.EXE的話就沒這問題了(但是也變成一個遠端桌面不方便把手直接控制)</p></li></ul><h2 id="用後感想"><a href="#用後感想" class="headerlink" title="用後感想"></a>用後感想</h2><p>其實Moonlight真的算是順暢的,網路沒問題的時候用起來跟本機沒太大差異,但是網路不好的時候就很卡…</p><p>另外其實在網路許可的前提下最好是不要把解析度設的比遊戲本體跑得還小..因為這樣還得壓縮更小傳出…反而會有延遲</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Network </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PF被打掛</title>
      <link href="/2021/09/03/2021090301/"/>
      <url>/2021/09/03/2021090301/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近不知道是不是自動追劇用的太爽,常常被家人抱怨家裡的網路掛掉了</p><span id="more"></span><h1 id="症狀說明"><a href="#症狀說明" class="headerlink" title="症狀說明"></a>症狀說明</h1><p>其實也沒什麼好特別說明的,就是家裡的gateway掛掉,查看的結果就是出現了</p><h3 id="PF-state-reach-limit"><a href="#PF-state-reach-limit" class="headerlink" title="PF state reach limit"></a>PF state reach limit</h3><p>上網看了一下大致上的理由就是PF的entry爆掉了所以PF不會動了</p><h1 id="對策"><a href="#對策" class="headerlink" title="對策"></a>對策</h1><h2 id="基本對策"><a href="#基本對策" class="headerlink" title="基本對策"></a>基本對策</h2><p>之前曾經詢問過師匠,他的處理方式是用crontab設定每天固定一個時間重開機,並且利用這個機制它順便讓FreeBSD自動update</p><p>身為弟子的我當然也照抄了這個作法<ruby><font size=+2 color=darkgreen><del>就是這個光～～</del></font><rp>(</rp><rt><font size=+1 color=darkred>しかし〜〜</font></rt><rp>)</rp></ruby>但是昨天下午重開完沒多久就破功了</p><h2 id="sshguard"><a href="#sshguard" class="headerlink" title="sshguard"></a>sshguard</h2><p>好啦,其實這個很久之前從師匠那裡抄來的PF設定檔裡面就有了,師匠需要定期重開的理由也是因為這個table會爆掉(可見<ruby><font size=+2 color=darkgreen><del>亂try ssh的人</del></font><rp>(</rp><rt><font size=+1 color=darkred>Ass hole</font></rt><rp>)</rp></ruby>有多少)</p><p>結果我定睛一看,我根本就沒裝sshgurd…..所以不要說block混蛋的table大到爆掉,我根本就是沒有建立ban的table,所以會爆的更快….</p><h2 id="BT-自動抓劇"><a href="#BT-自動抓劇" class="headerlink" title="BT &amp;自動抓劇"></a>BT &amp;自動抓劇</h2><p>其實說來說去我也不知道用這個玩意會不會有影響,不過我的內心傾向於沒影響,畢竟我之前也是卯起來用其他的P2P在抓東西,也沒看它爆過..</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>簡單的說就是只能再觀察…看看現在的對策是不是真的有效</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Server </tag>
            
            <tag> FreeBSD </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrate Arch Linux into Chrome OS</title>
      <link href="/2021/08/24/2021082401/"/>
      <url>/2021/08/24/2021082401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.youtube.com/watch?v=I6sAvwHgYwQ" title="Integrate Arch Linux into Chrome OS"><img src="http://img.youtube.com/vi/I6sAvwHgYwQ/sddefault.jpg" alt="Integrate Arch Linux into Chrome OS"></a></p><span id="more"></span><h1 id="簡單敘述"><a href="#簡單敘述" class="headerlink" title="簡單敘述"></a>簡單敘述</h1><p>老實說這是個讓我眼睛一亮的東西,依照我之前測試chrome OS base的系統,都是很殘缺的感覺,不僅是因為其需要Google的服務才能正常運作,而且本身可以做的事情也差了很多..但是這個可以利用LXC來跑Linux的作法讓他多了很多可能性(或該說可玩性)</p><p>但是預設是我<ruby><font size=+2 color=darkgreen><del>沒那麼喜愛</del></font><rp>(</rp><rt><font size=+1 color=darkred>不太會用</font></rt><rp>)</rp></ruby>的Debian,這個會讓我軟掉,不過現在有可以把裡面的東西換成Arch Linux的方法,著實令人興奮</p><h1 id="其他參考資料"><a href="#其他參考資料" class="headerlink" title="其他參考資料"></a>其他參考資料</h1><h2 id="Arch-linux"><a href="#Arch-linux" class="headerlink" title="Arch linux"></a>Arch linux</h2><p>老實說號稱超完整的Arch Wiki裡面也有相關的作法如下</p><p><a href="https://wiki.archlinux.org/title/Chrome_OS_devices">Arch Linux for Chrome OS device</a></p><h2 id="Chrome-OS"><a href="#Chrome-OS" class="headerlink" title="Chrome OS"></a>Chrome OS</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Chrome_OS">Wiki的介紹</a></li><li><a href="http://eshensh.net:2369/how-to-install-chromeos-in-pc/">安裝的介紹文章 - 中文</a></li><li><a href="https://www.alphr.com/download-install-chrome-os/">安裝的介紹 - 英文</a></li></ul><h1 id="實做"><a href="#實做" class="headerlink" title="實做"></a>實做</h1><p>對..就是空白..因為我沒有chrome book,也不太想花錢去買一台回來…也許後面有時間的時候可以拿個USB弄在<ruby><font size=+2 color=darkgreen><del>我現在專用的測試ternimal</del></font><rp>(</rp><rt><font size=+1 color=darkred>公司的電腦</font></rt><rp>)</rp></ruby>上使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近日心情</title>
      <link href="/2021/08/20/2021082001/"/>
      <url>/2021/08/20/2021082001/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近,生活周遭有一些紛紛擾擾, 以及一些心境上的變化所以就一直很想寫一篇對讀者來說是單純廢話的東西…</p><span id="more"></span><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>因為事情很亂很雜,所以我這篇改用<ruby><font size=+2 color=darkgreen><del>倒敘法</del></font><rp>(</rp><rt><font size=+1 color=darkred>隨便亂跳</font></rt><rp>)</rp></ruby>的方式來敘述</p><p>簡單的說,心情不太好,不僅僅是Server方面有些挫折,然後朋友發生了我實在很想翻白眼狂幹譙他的事情..以及一段時間後終於發現因為職場&#x2F;生活發生變化後的一些心裡反應….</p><p>不過我想我應該可以<ruby><font size=+2 color=darkgreen><del>自我成長與調適</del></font><rp>(</rp><rt><font size=+1 color=darkred>狂看沒營養的小說&#x2F;影片跟其他休閒</font></rt><rp>)</rp></ruby>讓自己逐步調整過來</p><h1 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h1><h2 id="Desktop-Crash"><a href="#Desktop-Crash" class="headerlink" title="Desktop Crash"></a>Desktop Crash</h2><p>這個事情最單純也是最容易改善的,因為是單純的技術力不足造成的</p><p>我上班時間<ruby><font size=+2 color=darkgreen><del>偷偷摸摸掩人耳目</del></font><rp>(</rp><rt><font size=+1 color=darkred>囂張至極,根本沒在怕</font></rt><rp>)</rp></ruby>的Manjaro系統果然因為用USB stick的關係由I&#x2F;O開始的crash發生了,昨天更是白痴到因為<code>yay -Syu</code>太慢於是我就把他停掉</p><p>造成kernel missing無法開機的窘境…(事後是救回來了啦)</p><p>然後反觀我弄的Manjaro xrdp,效能更是爛到我完全沒興趣使用….(好啦,最近會想辦法啦～～)</p><p>所以一整個心情就是爛到底….</p><h2 id="PHPBB沒人用"><a href="#PHPBB沒人用" class="headerlink" title="PHPBB沒人用"></a>PHPBB沒人用</h2><p>原來興高采烈的弄了個phpbb想說給自己人拿來抓東西…結果一看每個朋友的最後登入時間…</p><p>幹～就是給我面子去註冊後就在也沒用過了….我還在那邊努力的post抓回來的東西….</p><p>e04!!真的很厭世~~</p><h2 id="朋友的鳥事"><a href="#朋友的鳥事" class="headerlink" title="朋友的鳥事"></a>朋友的鳥事</h2><p>基於我講出來就會被滅口…所以這個就只能</p><p><font size=+10 color=darkpurple>幹～～ 你他媽早就不是處男了搞屁呀～～</font></p><h2 id="心裡落差"><a href="#心裡落差" class="headerlink" title="心裡落差"></a>心裡落差</h2><p>好啦,這個其實才是主宰我最近情緒的部份</p><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p>某大公司主管,底下有20個小嘍嘍,對上對下對外面管理都得心應手（雖然也被人覺得是個死白目,但是臨北才沒有在插洨他）</p><p>任何事情都只要嘴巴說一說就有足夠的影響力…各種雜事都有小妹代勞（工作上的雜事啦 幹！)</p><p>明明享受著title帶來的便利性與POWER~~但是很愛講,我才不在乎頭銜呢～～（對啦現在看就是個蹭的累）</p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p>一人部門,全公司可能只有打掃阿姨講話比我沒份量….所有事情要親力親為…</p><h3 id="場景敘述完畢之後…"><a href="#場景敘述完畢之後…" class="headerlink" title="場景敘述完畢之後…"></a>場景敘述完畢之後…</h3><p>因為是自己的選擇導致的老實說我沒什麼好抱怨的,而且不用管人也的確讓我覺的某些地方的壓力輕鬆很多,不過還是會產生落差感</p><p>於是我就在想,這樣的感受怎麼來的？？</p><p>我想,也許就是過了這些歲月,脫下了本來就不屬於我的環境Buff後,讓我再次體會到我只不過就是個中年的肥宅….</p><p>能力上並沒有比起同齡人傑出,過往的一切只是運氣好不是實力…</p><p>大概就是這些讓我覺得失落,才會一直想抓著過去的榮光~~~</p><p>古羅馬凱旋式的時候需要一個人在後面不斷的提醒”你是人,不是神,這個光榮且充滿全能感的時間只是暫時的…”</p><p>古人的確很優秀也很務實</p><p>我想,我該再去看一遍羅馬人的故事,再看一遍那些在身上有虛假Buff時代前構成我之所以為我的東西…</p><p>也許</p><p>這樣才能再次確認</p><p><ruby><font size=+2 color=darkgreen><del>我的自我價值</del></font><rp>(</rp><rt><font size=+1 color=darkred>我就是個隨處可見的平凡肥宅</font></rt><rp>)</rp></ruby></p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慘劇 &amp; 成就感</title>
      <link href="/2021/08/16/2021081601/"/>
      <url>/2021/08/16/2021081601/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這幾天其實有一些可以拿來寫Blog&#x2F;Wiki的<ruby><font size=+2 color=darkgreen><del>素材</del></font><rp>(</rp><rt><font size=+1 color=darkred>破爛鳥事</font></rt><rp>)</rp></ruby>但可能是因為最近工作有點上軌道,所以就懶的寫….</p><span id="more"></span><h1 id="鳥事A-Webtop-Remote-Desktop"><a href="#鳥事A-Webtop-Remote-Desktop" class="headerlink" title="鳥事A - Webtop &amp; Remote Desktop"></a>鳥事A - Webtop &amp; Remote Desktop</h1><h2 id="事由"><a href="#事由" class="headerlink" title="事由"></a>事由</h2><p>說來丟臉…由於小弟<ruby><font size=+2 color=darkgreen><del>上班</del></font><rp>(</rp><rt><font size=+1 color=darkred>當薪水小偷</font></rt><rp>)</rp></ruby>時,忽然被問,怎麼AD Server上都沒看你的連線紀錄,你不是都有來上班嗎？？</p><p>於是驚覺,看來在辦公室的時候還是得乖乖的用公司的系統連公司的內網才不會引人注目…</p><p>之前覺得沒搞頭的webtop&#x2F;Remote desktop就忽然變得超有搞頭了</p><h2 id="Webtop"><a href="#Webtop" class="headerlink" title="Webtop"></a>Webtop</h2><p>基於此,我就弄了Linuxserver.io的webtop,然後發現..雖然說得很好聽兩種distro跟複數的DE可以選擇</p><p>但是真的用起來感覺都<ruby><font size=+2 color=darkgreen><del>跟屎一樣</del></font><rp>(</rp><rt><font size=+1 color=darkred>不甚順手</font></rt><rp>)</rp></ruby>,所以我很快就放棄了,不過發現他的作法就是跑個Apache Guacamole來把內部的VNC&#x2F;RDP轉出來</p><p>所以我就天真的想..我也來弄一個好了….</p><h2 id="Apache-Guacamole"><a href="#Apache-Guacamole" class="headerlink" title="Apache Guacamole"></a>Apache Guacamole</h2><p>其實是不難弄啦,就一樣docker-compose.yml寫一寫然後去跑就好了,用起來去接後面的windows via RDP是蠻順暢的,但是我的Manjaro就變成悲劇了..</p><h3 id="Manjaro-VNC"><a href="#Manjaro-VNC" class="headerlink" title="Manjaro -VNC"></a>Manjaro -VNC</h3><p>看著教程覺得應該很簡單吧,就跑個TigerVNC隨便弄一下就可以跑了…然後就是全黑的話畫面…</p><p>後來試了x0vncserver也沒比較好用到哪去..於是我很快就放棄了…</p><h3 id="Manjaro-Xrdp"><a href="#Manjaro-Xrdp" class="headerlink" title="Manjaro - Xrdp"></a>Manjaro - Xrdp</h3><p>這個算是跑起來看起來比較像樣的..但是速度很慢比資源開的更少的Windwos跑得不順,雖然現在還讓他存活..但是我已經很想砍掉他了…</p><p>要這樣用我還不如<ruby><font size=+2 color=darkgreen><del>直接用Wireguard後開RDP client去連</del></font><rp>(</rp><rt><font size=+1 color=darkred>結果還是一樣爛…</font></rt><rp>)</rp></ruby></p><h1 id="鳥事-B-自動追劇套餐"><a href="#鳥事-B-自動追劇套餐" class="headerlink" title="鳥事 B - 自動追劇套餐"></a>鳥事 B - 自動追劇套餐</h1><h2 id="事由-1"><a href="#事由-1" class="headerlink" title="事由"></a>事由</h2><p>看了某Blog見到了超棒的自動追劇套餐,於是我也想自己弄…然後…然後就爆了</p><h2 id="Docker-Network"><a href="#Docker-Network" class="headerlink" title="Docker Network"></a>Docker Network</h2><p>不知道為什麼當我把Emby弄上去跑得時候他預設的Network會是192.168.0.0&#x2F;16,然後就衝突到我的內部網路架構…害我一時之間以為是我的pf設定爛掉了嚇死我…於是我就只好砍掉一堆container才確認問題出在哪….之後就去學習了docker container的Network寫法</p><h2 id="RAM-Disk…"><a href="#RAM-Disk…" class="headerlink" title="RAM &amp; Disk…."></a>RAM &amp; Disk….</h2><p>這個真的是….</p><p>簡單的說我之前太天真了…跟Video有關的事情怎麼可能是少少的RAM跟不大不小的DIsk space可以搞定的…</p><p>從結論上來說就是我的PhotonOS, RAM太少了,預設給的disk也不夠,然而我在online擴容的時候搞砸了</p><p>所以就是週六的整個重裝….</p><h2 id="重裝PhotonOS"><a href="#重裝PhotonOS" class="headerlink" title="重裝PhotonOS"></a>重裝PhotonOS</h2><p>其實這件事嚴格來說不算鳥事,可以當作檢驗自己這段時間以來對於PhotonOS跟Docker的熟悉度….</p><p>我大概花了一個小時左右就把所有的container都弄回去唯一討厭的就是</p><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>雖然我備份了<code>/etc/letsencrypt</code>目錄但是他<code>live</code>目錄內的link卻沒辦法直接cp,所以變成後來還要手工的一個一個去建立link..真痛苦…</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><ul><li>Manjaro的Xrdp&#x2F;VNC後面由時間再來研究,目前只要會動就好了…</li><li>自動追劇套餐現在弄好了真的很強大,不過動畫的部份目前幾乎不會動…這點很討厭…</li><li>最近偷懶..看來後面Wiki有很多可以寫….</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好樣的Github</title>
      <link href="/2021/08/16/2021081602/"/>
      <url>/2021/08/16/2021081602/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>為了安全性,從今年的8&#x2F;13開始Github就不再接受使用username&#x2F;password via https來login github了…</p><p>詳情請看<a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">這篇文章</a></p><span id="more"></span><h2 id="變更Login方法"><a href="#變更Login方法" class="headerlink" title="變更Login方法"></a>變更Login方法</h2><p>可能是我嫌使用ssh的方式還得建立ssh key等方法很囉唆,所以我就一直採用帳號&#x2F;密碼的方式來update我的Blog&#x2F;Wiki</p><p>然而今天就出包了</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>使用Token其實不是什麼了不起的大事,畢竟pico也是用Token來upload的…</p><p>但是為了使用Token,我現在得把我的Blog&#x2F;Wiki都改成Private才能預防寫在_config.yml裡的資料流出去…</p><p>真的是夠麻煩的….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Server </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更換Blog留言系統</title>
      <link href="/2021/08/06/2021080601/"/>
      <url>/2021/08/06/2021080601/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前弄了個Disqus以及不成功的DisqusJS,但是老實說看起來並不好看,所以我就換Isso,不過即使這樣還是沒人會在這個日記形式上的Blog留言的吧…</p><span id="more"></span><h1 id="Isso"><a href="#Isso" class="headerlink" title="Isso"></a>Isso</h1><p>這是一個需要self-hosted的留言系統,不過很輕,並且我再用的Hexo-theme-Next也內建支援,在遍尋可以用的留言系統時,看來看去都不太好用的感覺所以就決定採用這個</p><ul><li><font size=+1 color=darkgreen>可以匿名</font> 我想說沒人留言大概是因為留言還要登入很麻煩..<del>但其實就是沒人看才…</del></li><li><font size=+1 color=darkgreen>支援Markdown</font> 所以我可以自己在上面加註..<del>自己的Blog還要自己加註到底是多邊緣…</del></li><li><font size=+1 color=darkgreen>不用翻牆就可以Access</font> 除非對岸發瘋連cloudflare的的CDN都封鎖了</li></ul><h1 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h1><p>我是用docker跑server端然後改一下Next的設定就可以用了…</p><p>詳細的作法我會放到WIki上面去</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>發現這玩意這麼簡單..忽然覺得我之前是傻的嗎？？</p><p>為什麼要去註冊一堆沒什麼鳥用的東西搞了半天都弄的不上不下的</p><p>對..我就是在抱怨你們</p><p>Disqus, Valine….你們這些超難用的…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悲劇～～</title>
      <link href="/2021/08/05/2021080501/"/>
      <url>/2021/08/05/2021080501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天興高采烈的拿到透過<ruby><font size=+2 color=darkgreen><del>人肉快遞</del></font><rp>(</rp><rt><font size=+1 color=darkred>好心的王叔叔的熱心幫忙</font></rt><rp>)</rp></ruby>回台的Server用記憶體,立刻就開心的把我的<ruby><font size=+2 color=darkgreen>主力航母</font><rp>(</rp><rt><font size=+1 color=darkred>Esxi</font></rt><rp>)</rp></ruby>升級到32GB</p><p><ruby><font size=+3 color=darkgreen>喜咖喜</font><rp>(</rp><rt><font size=+2 color=darkred>しかし</font></rt><rp>)</rp></ruby>悲劇就這麼發生了…</p><span id="more"></span><h1 id="事情經過"><a href="#事情經過" class="headerlink" title="事情經過"></a>事情經過</h1><p>其實事情的經過是很簡單的,就是我的PhotonOS重開過了之後發現討論區不能正常啟動,仔細看了一下是docker的volumes印射沒有成功,加上我不只是重開機</p><p>我還因為原來的設定沒有設定restart,導致重開後沒有自動跑起來的情況下手賤下了<code>docker-compose up -d</code></p><p>然後就很docker就很帥的幫我recreate container….</p><p>然後就沒資料爆掉了…..</p><h1 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h1><p>事後調查的結果非常的令我傻眼貼在下面</p><h2 id="這是我原來的docker-compose-yml的節錄"><a href="#這是我原來的docker-compose-yml的節錄" class="headerlink" title="這是我原來的docker-compose.yml的節錄"></a>這是我原來的docker-compose.yml的節錄</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...    </span><br><span class="line">    volumes:</span><br><span class="line">      - /var/lib/docker/volumes/phpbb/mariadb:/bitnami/mariadb<span class="string">&#x27;</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="這是我改過後正常的的docker-compose-yml的節錄"><a href="#這是我改過後正常的的docker-compose-yml的節錄" class="headerlink" title="這是我改過後正常的的docker-compose.yml的節錄"></a>這是我改過後正常的的docker-compose.yml的節錄</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...    </span><br><span class="line">    volumes:</span><br><span class="line">      - /var/lib/docker/volumes/phpbb/mariadb:/bitnami/mariadb</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>看到了嗎？就差了一個<code>&#39;</code>符號….</p><h1 id="影響"><a href="#影響" class="headerlink" title="影響"></a>影響</h1><p>其實也沒什麼啦</p><p>就是昨天一天的努力全部做了白工…..</p><p>媽的…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpBB</title>
      <link href="/2021/08/04/2021080401/"/>
      <url>/2021/08/04/2021080401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回到台灣生活後,要像以前那樣跟中國的朋友交流檔案變得比較麻煩且困難了…所以就想用論壇+網盤的方式來進行分享</p><span id="more"></span><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>其實分享檔案這部份只需要網盤就夠了,但是老是用手機IM在那邊傳來傳去網盤的下載連結,以及並不是每個人都在同一個群內（甚至有跨IM類型的）</p><p>實在是有點麻煩,所以就想弄個可以貼連結的地方,若東西都是從我這裡分享出去的話,我大概就是在寫個類似Blog的東西列出來就好了</p><p>但是很可惜的是主力的分享人物並不是這麼Geek的人….所以我就想說弄個簡易的平台,挑來挑去就選了phpBB弄個論壇來放</p><p>（跟那堆什麼輕國,3DM差不多的概念啦）</p><h1 id="phpBB"><a href="#phpBB" class="headerlink" title="phpBB"></a>phpBB</h1><p><font size=+2 color=blue>為什麼挑phpBB?</font></p><p>這是個好問題,其實我沒什麼挑,主要是大學的時候有弄過當時很舊版的phpBB,從結論上來說當時覺得比起BBS來的不方便（因為速度慢）</p><p>但是後來這種php base的論壇大量出現,程式也相對比較好</p><p>那為什麼不挑在大中華區叱吒風雲的Discuz呢？</p><p>雖然網路上很多相關比較,各自有其擁護者,但是最根本的選用原因比這些簡單多了..</p><p><font size=+3 color=darkgreen>因為phpBB有很簡單就可以架好的Docker Image可以用啊～～～</font></p><p>是的所有的一切就是來自小弟懶懶的想用Docker搞定一切,所以就是這麼簡單,這麼樸實無華的理由</p><p>詳細的相關作法照慣例,會放到Wiki上面去</p><h1 id="免費空間"><a href="#免費空間" class="headerlink" title="免費空間"></a>免費空間</h1><p>講到這個老實說就蠻尷尬的,現今的世道多得是免費可以用的網盤,但是某程度上來說橫跨台灣跟中國之間的分享就讓選擇變得少很多了</p><p>台灣常用的基本上中國不是要翻牆才連的上就是速度慢到可悲</p><p>中國常用的雖然一般都是空間大,在中國境內速度快,但是註冊帳號就很想讓台灣人打退堂鼓</p><p>後來在抓小說的時候發現一個註冊只要E-mail就好,免費容量500G,下載不用註冊,中台兩地速度都還可以的</p><p><font size=+2 color=blue><a href="https://www.ctfile.com/">城通網盤</a></font></p><p>不過也不知道這玩意還能用多久反正免費空間就這回事大家用用就這樣..不行了再找就好了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireguard</title>
      <link href="/2021/07/30/2021073001/"/>
      <url>/2021/07/30/2021073001/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>雖然離開中國後就不需要<ruby><font size=+2 color=darkgreen>科學上網</font><rp>(</rp><rt><font size=2 color=darkred>翻牆 aka 梯子</font></rt><rp>)</rp></ruby>但是畢竟家裡一堆服務還是掛在NAT後面, 所以弄個VPN來連家裡面也是很正常的</p><span id="more"></span><h1 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h1><p>是的,我沒有挑我在中國熟到爛掉的V2ray,而採用Linux Kernel直接support的WIreGuard,原因如下</p><ul><li>不在中國境內不需要使用偽裝連線</li><li>WireGuard目前是Linux Kernel直接支援</li><li>設定上Wireguard比較簡單（這點嘛..懂了之後的確是啦）</li></ul><p>不過由於這個通訊協定是明確告訴人家我是VPN,所以很自然就算在台灣用得再順,也沒辦法拿來當梯子用</p><p>想要使用梯子還是乖乖的用V2ray之類有偽裝的會比較好</p><h1 id="架設方式"><a href="#架設方式" class="headerlink" title="架設方式"></a>架設方式</h1><p>一如往常,我還是把詳細的技術細節放在<a href="https://kiwi0093.github.io/Wiki-site/">Wiki</a>上面,自己上去看</p><h1 id="雜談"><a href="#雜談" class="headerlink" title="雜談"></a>雜談</h1><h2 id="Wireguard-Manager"><a href="#Wireguard-Manager" class="headerlink" title="Wireguard-Manager"></a>Wireguard-Manager</h2><p>我最開始試跑的是帶有Web-UI的Wireguard Manager,使用docker是無痛架起來了,但是…他不會動…（是的,我弄了一個下午界面看起來很漂亮但是最重要的機能卻不會動…)</p><h2 id="Wireuard"><a href="#Wireuard" class="headerlink" title="Wireuard"></a>Wireuard</h2><p>後來我死心了就直接用wireguard,不過不得不說本來以為很麻煩的但是實際用起來發現linuxserver.io提供的image還真的很好用,一開始docker-compose.yml裡面寫了要多少peer就直接建好多少peer,絲毫不拖泥帶水真的是棒,追加peer到docker-compose.yml也會自動追加</p><h2 id="Linux-Client"><a href="#Linux-Client" class="headerlink" title="Linux Client"></a>Linux Client</h2><p>老實說Android的設定很簡單甚至只要刷一下QR code就好了,但是Linux的設定就相對麻煩,所有的參數都要一致才會動</p>]]></content>
      
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近日雜寫 - 找不到用途的VPS</title>
      <link href="/2021/07/14/2021071401/"/>
      <url>/2021/07/14/2021071401/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近<ruby><font size=+1 color=darkgreen><del>每天都跑到辦公室認真努力上班</del></font><rp>(</rp><rt><font size=+1 color=darkred>躲到辦公室逃避小朋友的騷擾</font></rt><rp>)</rp></ruby>所以把一些已經整理過得Service再次整理了一下,然後就是上週的那台VPS,老實說速度還好不怎麼樣,測起來只有7~8Mbps</p><p>另外還在想怎麼擴增我還沒膨脹到極致的Docker遊戲….</p><span id="more"></span><h1 id="實驗內容"><a href="#實驗內容" class="headerlink" title="實驗內容"></a>實驗內容</h1><h2 id="Portainer-agent"><a href="#Portainer-agent" class="headerlink" title="Portainer-agent"></a>Portainer-agent</h2><h3 id="雜話"><a href="#雜話" class="headerlink" title="雜話"></a>雜話</h3><p>我在vps上裝了Docker但是不知道要幹麻,所以第一個container就拿來跑portainer-agent,搭配我已經有的主機界面,發現真的可以動耶,即使沒有跑<code>k8s</code>或是<code>docker-swarm</code>也可以增加node來跑（不過代價就是得裝個portainer-agent)</p><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>因為作法我都放在Wiki上所以這裡就講點廢話,我的使用感想是使用<code>portaner-ce</code>+<code>portainer-agent</code>配合他的stack功能果然很不錯,不需要進入console去跑<code>docker-compose</code>指令,對於沒有先入為主一定要用cli的人我覺的的確是好用(尤其是stack可以migrate或是dualpicate到其他機器上)</p><h2 id="Nginx-Proxy-manager"><a href="#Nginx-Proxy-manager" class="headerlink" title="Nginx Proxy manager"></a>Nginx Proxy manager</h2><h3 id="雜話-心得"><a href="#雜話-心得" class="headerlink" title="雜話&amp;心得"></a>雜話&amp;心得</h3><p>會裝這玩意主要的理由還是因為我本來是想利用多個階層的方式把各項web service弄出來,自己寫nginx的config又覺得煩,所以就裝了,不過用了之後發現,因為Nginx的location設定比較麻煩還很容易出問題,所以就漸漸的萌生乾脆全部的服務都掛一個Virtual Host就好了,反正這玩意也可以申請SSL Key不這樣搞好像<ruby><font size=+1 color=darkblue><del>對不起付了錢買DN的我…</del></font><rp>(</rp><rt><font size=+1 color=darkred>賤人就是矯情</font></rt><rp>)</rp></ruby></p><p>本來想說VPS上也來弄一個結果看著我的V2ray設定檔,忽然覺的好懶…算了….</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>不過玩著玩這我就發現了一個問題</p><p>現在這個躲在Private Network後面一堆亂七八糟服務都直接mapping到host IP的作法放在直接暴露的VPS上面感覺就很不是味道了,雖然上面沒跑什麼正經的東西但是還是不太喜歡這種門戶大開的行為,後面應該還是要來習慣一下docker network的設定把東西盡量都藏在docker網路內部</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> VPN </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BuyVM</title>
      <link href="/2021/07/08/2021070801/"/>
      <url>/2021/07/08/2021070801/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前還在蘇州的時候租用的Anynode看起來是賣掉了,所以收到要將服務轉到BuyVM去的mail通知,經過兩三天的操作今天成功開通了新的VPS服務…</p><span id="more"></span><h1 id="BuyVM-Frantech"><a href="#BuyVM-Frantech" class="headerlink" title="BuyVM&#x2F;Frantech"></a>BuyVM&#x2F;Frantech</h1><h2 id="VPS-方案"><a href="#VPS-方案" class="headerlink" title="VPS 方案"></a>VPS 方案</h2><p><a href="https://my.frantech.ca/cart.php?gid=39">方案網頁</a></p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/buyvm.PNG" alt="AMD Ryzen KVM" style="zoom:60%;" /><p>作為一個無限流量的VPS,一個月<font color=green>$2.00USD</font>一次付一年只要<font color=green>$19.67USD</font>算是很佛心的價格,還提供DMCA管不到的盧森堡server,另外這家還提供</p><p>加掛空間的<font color=orange>Block Storage</font>服務,只要每個月加點錢就會有相對大的容量可以使用</p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/block_storage.PNG" style="zoom:60%;" /><p>若是想幹嘛的話的確還是挺方便的</p><p>不過速度上,老實說我就不知道了,畢竟現在沒有身在<ruby>&lt;font size+2 color&#x3D;red&gt;<del>神州天朝</del></font><rp>(</rp><rt>&lt;font size+1 color&#x3D;orange&gt;對岸的鄰國</font></rt><rp>)</rp></ruby>的實體網路可以測試,所以只能拜託還在那邊的朋友幫忙</p><p>但是若是自己想架站不過缺乏設備跟線路的倒是可以考慮租用,一個月大概不到$5USD就有夠大的空間可以使用</p><h2 id="Server安裝"><a href="#Server安裝" class="headerlink" title="Server安裝"></a>Server安裝</h2><p>這個VPS終於比較有誠意用的不是solusVM介面,看起來比較像一回事,而且機器本身也允許安裝windows或是其他ISO,不過我試了一下發現arch linux似乎開機不太順我就用預設可以裝的debian了</p><p>操作介面叫做Stallion看起來比起之前的廉價VPS用的管理介面有質感一點,希望這家會是個各項指標都合格的好廠商</p><h2 id="Anynode-轉移"><a href="#Anynode-轉移" class="headerlink" title="Anynode 轉移"></a>Anynode 轉移</h2><p>這次的重點,因為Anynode賣掉了所以轉移到BuyVM的方法很有意思,他不是直接提供我兩台(是的我名下有兩台Anynode的VPS)可以直接使用的VPS,而是將兩台的使用時間折算現在BuyVM的費率回到你的credit account裡,原來兩台都還可以用到今年11月的anynode,當初一台兩年才花$21USD,剩下的部分總共折算了<font color=green>$28.05USD</font>這樣算起來還蠻划算的</p><h2 id="其他VPS-現況"><a href="#其他VPS-現況" class="headerlink" title="其他VPS 現況"></a>其他VPS 現況</h2><p>自從回來後,因為沒有實際用途,的確那堆手上的VPS都在逐漸凋零到期,或是停止更新,不過這周我還是有把還健在的機器整理一回,本來想用docker來跑,不過看了看似乎VPS都是OpenVZ或是KVM的,不知道Docker會不會有問題</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> VPN </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近動態 - Calibre-web &amp; Navidrome</title>
      <link href="/2021/07/05/2021070501/"/>
      <url>/2021/07/05/2021070501/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color=#800000>前言</font></h1><p>針對之前的Server使用,我真的開始了使用docker的道路,並且參考了一些網路上的<font color=green>Self-hosted</font>服務,挑選了兩個服務來使用</p><ul><li><h2 id="電子書管理服務-Calibre-Web"><a href="#電子書管理服務-Calibre-Web" class="headerlink" title="電子書管理服務(Calibre-Web)"></a><ruby><font color=blue>電子書管理服務</font><rp>(</rp><rt><font color=orange>Calibre-Web</font></rt><rp>)</rp></ruby></h2></li><li><h2 id="音樂串流服務-Navidrome"><a href="#音樂串流服務-Navidrome" class="headerlink" title="音樂串流服務(Navidrome)"></a><ruby><font color=blue>音樂串流服務</font><rp>(</rp><rt><font color=orange>Navidrome</font></rt><rp>)</rp></ruby></h2></li></ul><span id="more"></span><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a><font color=#800000>Markdown</font></h1><p>忽然先跳tune去一個跟主題不搭嘎的Markdown, 其實也不是,主要就是我最近因為整理電子書的關係,看到很多酷炫的文字表現,所以就去找了Markdown &amp; Html語法,可以看到前面那個酷炫的顏色跟注音標示方法,沒錯就是我的最新娛樂</p><h1 id="Calibre-Web-Navidrome"><a href="#Calibre-Web-Navidrome" class="headerlink" title="Calibre-Web &amp; Navidrome"></a><font color=#800000>Calibre-Web &amp; Navidrome</font></h1><p>搭建的方法都在<ruby><font size=+2 color=blue><a href="https://kiwi0093.github.io/Wiki-site/">我的筆記</a></font><rp>(</rp><rt><font  size=2 color=orange>Kiwi’s Wiki</font></rt><rp>)</rp></ruby>裡面,我就不多說了主要還是來說說過程的辛酸….</p><p>首先是PhotoOS這個玩意我很不熟,所以光是為了熟練它的操作我就<ruby><font size=+2 color=green>花了不少時間</font><rp>(</rp><rt><font size=2 color=red>重新安裝很多次</font></rt><rp>)</rp></ruby>之後又花了很多時間在熟悉Docker的使用方法,最終確定還是docker-compose比較方便,然後就是好幾天的不斷四處搜括epub回來填充我的書庫,仔細想想花最多時間的果然不是架設服務而是整理內容…</p><h1 id="電子書-Kindle"><a href="#電子書-Kindle" class="headerlink" title="電子書&amp;Kindle"></a><font color=#800000>電子書&amp;Kindle</font></h1><p>不得不說要蒐集日輕的epub檔真的需要<ruby><font size=+2 color=red><del>偉大祖國 aka.天朝</del></font><rp>(</rp><rt><font  size=2 color=orange>海峽對岸的鄰國</font></rt><rp>)</rp></ruby>同好的熱情與分享,找了一圈都是簡體的書,並且都是在簡體的網站上,令人感嘆現在對岸的ACG文化比<ruby><font size=+2 color=green><del>這個又小又老又窮的小島</del></font><rp>(</rp><rt><font  size=2 color=orange>偉大的台灣</font></rt><rp>)</rp></ruby>來的興盛了(雖然講的難聽點就是盜版的還是很兇,不過既然自己也去拿這些東西就不要在那裏講什麼正論的屁話…)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upgrade Esxi Server</title>
      <link href="/2021/06/26/2021062601/"/>
      <url>/2021/06/26/2021062601/</url>
      
        <content type="html"><![CDATA[<h1 id="艦隊升級計畫"><a href="#艦隊升級計畫" class="headerlink" title="艦隊升級計畫"></a>艦隊升級計畫</h1><p>從回到台灣後,持續的家裡Server維護&#x2F;升級就一直沒停,終於到了該對主要Server的ESXi進行升級的時候了…</p><span id="more"></span><h1 id="升級ESXi"><a href="#升級ESXi" class="headerlink" title="升級ESXi"></a>升級ESXi</h1><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>這次的升級主要參考<a href="https://roidintw.kaienroid.com/2020/09/vmware-esxi-upgrade-from-60-to-65-with.html">師匠的經驗</a></p><p>不過他比較驚險沒有進入maintenance mode 就跑,我好歹還是有進maintenance mode去執行</p><h2 id="檔案取得"><a href="#檔案取得" class="headerlink" title="檔案取得"></a>檔案取得</h2><p>首先先去登入你的My VMware,然後找VMware vSphere Hypervisor下載,雖然6.X目前有6.7版了,不過看了看都是ISO,於是我就只下載了6.5的<strong>VMware vSphere Hypervisor (ESXi) Offline Bundle</strong></p><p>這是個zip檔,下載完後扔到esxi的datastorage裡面去就可以了</p><h2 id="升級順序"><a href="#升級順序" class="headerlink" title="升級順序"></a>升級順序</h2><h3 id="maintenance-mode"><a href="#maintenance-mode" class="headerlink" title="maintenance mode"></a>maintenance mode</h3><p>這個很簡單,使用原來的client連上ESXi,然後選maintenance mode就好了</p><h3 id="確認檔案位置"><a href="#確認檔案位置" class="headerlink" title="確認檔案位置"></a>確認檔案位置</h3><p>使用putty ssh login你的ESXi主機</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /vmfs/volume/</span><br></pre></td></tr></table></figure><p>你就會看到datastorage,你剛剛upload的ZIP就在裡面</p><h3 id="確認Profile-Image"><a href="#確認Profile-Image" class="headerlink" title="確認Profile Image"></a>確認Profile Image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esxcli software sources profile list -d /vmfs/volumes/$(your_volume)/$(your_file.zip)</span><br></pre></td></tr></table></figure><p>你就可以看到他的profile image</p><h3 id="升級"><a href="#升級" class="headerlink" title="升級"></a>升級</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esxcli software profile update -d /vmfs/volumes/$(your_volume)/$(your_file.zip) -p $(profile-image)</span><br></pre></td></tr></table></figure><p>他就會開始安裝一堆VIB,最後重開(這裡很討厭,因為他的shell不接受reboot或是shutdown指令,所以我去他的client上按reboot host)</p><h3 id="升級重開後"><a href="#升級重開後" class="headerlink" title="升級重開後"></a>升級重開後</h3><p>改用web介面登入後記得去關閉maintenance mode,然後把你的VM該開的打開就好了</p><h1 id="後續規劃"><a href="#後續規劃" class="headerlink" title="後續規劃"></a>後續規劃</h1><p>這波主要的升級原因還是想開始把家裡的幾個服務從獨立的Linux VM改成直接在Photon OS上跑docker,這樣一來可以比較省空間跟機器的效能</p><p>二來也減少跑服務的Linux安裝手順或是調教之類的</p><p>因此後續有幾個學習的方向需要再花時間</p><ul><li>Photon OS的使用<ul><li>Photon OS多IP的設定</li><li>Photon OS shell變更與相關工具的安裝與調教(搞了半天還是得從Arch跳到Photon OS)</li></ul></li><li>Docker用法<ul><li>基本語法</li><li>Docker的活用方式</li></ul></li><li>我到底要整合哪些服務在家裡跑</li></ul><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>其實最後的問題才是最大的問題,最近弄了Nextcloud但是覺得很雞肋,感覺用不太到,想說建一個Airsonic來當作音樂串流又覺得動力沒那麼大(這個主要是Nextcloud Music雖然可以用但是感覺一下子就卡住),抑或是來架設Emby(感覺也用不太到,因為現在大多數都是直接上串流平台)架設Calibre-web好像有搞頭一點但是這個也牽扯到後續要整理一大堆的電子書…想到就很累…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近日幾點tmux, nextcloud</title>
      <link href="/2021/06/24/2021062401/"/>
      <url>/2021/06/24/2021062401/</url>
      
        <content type="html"><![CDATA[<h1 id="WFH-WTF"><a href="#WFH-WTF" class="headerlink" title="WFH &#x3D; \ &#x3D; WTF"></a>WFH &#x3D; \ &#x3D; WTF</h1><p>最近都在Work From Home,於是可以花一點時間假借工作之名,實則弄一點有意思的玩具</p><p>所以我把家裡的Server進一步的整理過一遍(之前是應急恢復,現在是以擴充之名行娛樂之實)</p><span id="more"></span><h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><p>老實說這是我在看Youtube的時候發現這玩意的(你看多廢,還得逛Youtube才知道有tmux).</p><p>現在就已經成為我的標準配備(用來取代screen)</p><p>這玩意支援powerline,但是蠻雞肋的在X環境下powerline才有用(至少我還沒找到console下powerline可以正確顯示相關字體的方法)</p><p>不過講是這樣講,功能還是比screen稍微強一些,所以我就開始過度到tmux去了</p><h2 id="Nextcloud"><a href="#Nextcloud" class="headerlink" title="Nextcloud"></a>Nextcloud</h2><p>這個就有點冷飯新炒…之前還在蘇州的時候其實就玩過了,但是其實當時不是很好用(老實說現在也沒好用到哪去…)</p><p>不過這次倒是對於Nextcloud-Apps感到有趣</p><h4 id="Nextcloud-Music"><a href="#Nextcloud-Music" class="headerlink" title="Nextcloud Music"></a>Nextcloud Music</h4><p>這個App的基本功能就是在網頁下可以直接撥放Nextcloud folder裡的音樂,並且同時在建立成媒體庫後可以串流出去</p><p>搭配subsonic系列的apps(如<a href="https://play.google.com/store/apps/details?id=org.moire.ultrasonic&hl=zh_TW&gl=US">Ultrasonic</a>)就可以串流撥放,還支援封面等功能算是一個不用emby也可以使用的媒體Server</p><p>(不過要是只剩下這個功能有用,那我可能還是會去找其他的串流server來使用)</p><h4 id="Nextcloud-Deck"><a href="#Nextcloud-Deck" class="headerlink" title="Nextcloud Deck"></a>Nextcloud Deck</h4><p>這就是一個Deck程式,說真的是沒有什麼google的替代方案所以我才用的(其實我是想要有免費的Milanote可以用…)</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>這個也是不陌生的東西,但是老實說我一直沒有花時間去好好用過Docker,因為我都是用VMware ESXi直接架VM來用,很少會一台機器上跑好幾個docker的形式處理</p><p>但是現在docker也越來越方便,很多東西都可以直接弄個Image跑起來就好,省的安裝跟設定</p><h4 id="Webtop"><a href="#Webtop" class="headerlink" title="Webtop"></a><a href="https://docs.linuxserver.io/images/docker-webtop">Webtop</a></h4><p>老實說這是一個看起來很炫,聽起來很炫,但是真的要用我還真找不到用途的東西….</p><p>簡單的說就是用Browser就可以遠端跑DE的東西,目前支援Alpine&#x2F;Ubuntu的Xfce&#x2F;KDE&#x2F;mate&#x2F;iceWM&#x2F;i3&#x2F;Openbox(沒有我喜歡的Manjaro..&#x3D;-&#x3D;!!)</p><p>聽起來好像還不錯對吧,但是你都有Browser可以用代表你在GUI環境,然後要開另一個DE來使用…除了架好給公司電腦什麼都鎖死的機器可以利用browser逃出去</p><p>享受自由空氣以外,我還真沒想到能幹嘛</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>其實就是在家工作很無聊,既不能玩遊戲,又不能專心工作,所以就會無聊到去找其他可以打斷的東西來試試</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雜談</title>
      <link href="/2021/05/26/2021052601/"/>
      <url>/2021/05/26/2021052601/</url>
      
        <content type="html"><![CDATA[<p>因為家庭因素,結束了在蘇州漂泊的外派生活回到台灣安分過日子</p><span id="more"></span><h2 id="近況說明"><a href="#近況說明" class="headerlink" title="近況說明"></a>近況說明</h2><p>其實最近基本上就是當廢人,回到台灣接受小孩的洗禮後基本上沒時間跟之前一樣把大把大把的時間花在玩新玩具上(其實這也跟上班時間得認真上班不能跟之前一樣一邊上班一邊寫Blog有關….)</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>因為回來台灣,所以重心自然就會從原來在蘇以<del>翻牆</del>科學上網為主,改回不用考慮網路環境主攻服務內容為主,Server的OS也自然從對科學上網友善的Arch Linux換回用了很久但是在對岸跟屎一樣難用的FreeBSD</p><h5 id="Server-OS"><a href="#Server-OS" class="headerlink" title="Server OS"></a>Server OS</h5><p>還是需要一點轉換期的不過重新安裝的時候發現其實安裝起來比Arch真的輕鬆太多了</p><p>只要光碟開機,然後選擇要安裝的Item,其他的基本上啥都不用多用腦,就可以快速的裝完</p><p>然後再把原來Server的設定資料</p><ul><li>&#x2F;etc&#x2F;rc.conf</li><li>&#x2F;usr&#x2F;local&#x2F;etc&#x2F;screenrc</li><li>&#x2F;etc&#x2F;csh.cshrc</li><li>&#x2F;etc&#x2F;pf.conf</li><li>&#x2F;etc&#x2F;ipfw.conf</li></ul><p>放回去重開機….搞定….實在太簡單了</p><h5 id="Esxi"><a href="#Esxi" class="headerlink" title="Esxi"></a>Esxi</h5><p>因為一些問題(對啦就是那個一周停兩次電)我有一台ESXi Server就掛掉了…</p><p>但是也因為那台是把Esxi裝在USB內的所以很快地就可以重裝拿回去跑起來</p><p>這次我選擇的是把Esxi5.1 改成Esxi 6.5U2 for HPE的custom ISO(因為我的Gen8只能用到6.5 pre-Gen9的ISO)</p><p>換完的感覺是終於不需要另外安裝client了,畢竟原來用的vsphere client也只支援到6.0 我就沒有找到安裝檔了所以我就都改用html5的web client,用起來還是挺好用的</p><p>不過,passthrough要是一次沒設定好就會有問題…得重裝(因為我沒有client可以修改)</p><p>花了我一個早上….</p><h5 id="PCHome-24-H-D"><a href="#PCHome-24-H-D" class="headerlink" title="PCHome 24 H D"></a>PCHome 24 <del>H</del> D</h5><p>過程中發現我自己的NAS有顆HDD掛了,在以前這只是掏出信用卡刷四顆HDD等他到就可以解決事情</p><p>無奈這次遇到了十年難得一遇的PCHome 24D事件,變成等待HDD成了最辛苦最耗時的作業(雖然我最後都改到Momo上買….)</p><p>現況無趣的報導就到此為止</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fyde OS ＆....</title>
      <link href="/2020/12/18/2020121801/"/>
      <url>/2020/12/18/2020121801/</url>
      
        <content type="html"><![CDATA[<p>上次的Bliss OS以及Phoenix OS甚至原始的Android X86都有不能直接安裝apk的問題(主要是沒有Google簽章導致無法安裝)雖然看了不少利用<code>adb</code>安裝apk的方法之類的說明,不過實測上來看Bliss OS在Surface Pro4很常會出現Touch panel失效等問題..所以就只能另謀出路…</p><span id="more"></span><h2 id="Fyde-OS"><a href="#Fyde-OS" class="headerlink" title="Fyde OS"></a>Fyde OS</h2><p>基本上這個不是android,是個中國廠商二次創作的<em>ChromeOS</em>不過因為ChromeOS也可以安裝APK跑Android程式的特點,加上安裝起來比安裝ChromeOS簡單又有號稱針對Surface Pro4特化的Image,所以我就下載來試試了</p><h3 id="官方訊息"><a href="#官方訊息" class="headerlink" title="官方訊息"></a>官方訊息</h3><p><a href="https://fydeos.com/">官方網頁</a></p><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><p>只要在<a href="https://fydeos.com/download">下載頁面</a>下載對應機種的Image檔,然後用<a href="https://www.balena.io/etcher/">Etcher</a>刷進USB裡用USB開機跑完安裝程式就算裝完了..</p><h3 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h3><p>目前確認過可以安裝ChromeOS的程式,可以安裝Google play, 可以透過Google Play&#x2F;豌豆莢&#x2F;單獨的APK進行Android程式安裝,基本驅動也是ok的,正由機器的主人在做更進一步的使用體驗（看看容不容易掛掉或是什麼亂七八糟的問題…)目前已知若是很激烈的使用Touch Panel的話會導致Touch panel的驅動崩潰而無法使用Touch panel….所以要用這個玩Android遊戲的朋友還是去弄個藍芽把手吧…</p><h2 id="不負責推論"><a href="#不負責推論" class="headerlink" title="不負責推論"></a>不負責推論</h2><p>因為我在fydeos的Github專案上看到anbox_fyde,所以我推測這個FydeOS應該是用anbox來跑他所謂的android子系統,若是這樣過一段時間我也會找台VM在上面弄個Manjaro+anbox來試試看是不是Linux+anbox的效果都這麼好…</p><p>若是這樣可能Ubuntu touch+anbox會是個好選擇！？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Chromebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phoenix OS</title>
      <link href="/2020/12/14/2020121401/"/>
      <url>/2020/12/14/2020121401/</url>
      
        <content type="html"><![CDATA[<p>同是有台ASUS T100想改裝成Android給小朋友玩..</p><p>看了看可能還是中國國產的Phoenix OS(其實就是客製的Android X86)比較適合他的需求…</p><span id="more"></span><h2 id="ASUS-T100"><a href="#ASUS-T100" class="headerlink" title="ASUS T100"></a>ASUS T100</h2><p>這是一台ASUS早期的二合一小筆電,規格非常的陽春,算是Windows7轉Windows8.1各家廠商都把CPU &amp; RAM下降規格降價的時期產品</p><p> <a href="https://www.asus.com/us/2-in-1-PCs/ASUS_Transformer_Book_T100_Chi/specifications/">詳細Spec</a></p><ul><li><p>Intel® Bay Trail-T Quad Core Z3775 1.46 GHz ~ 2.39 GHz Processor</p></li><li><p>Memory</p><p>OnBoard Memory 2 GB</p></li><li><p>Display</p><p>10.1” 16:10 Full HD (1920x1200) LED Backlight Touchscreen LCD Panel</p></li><li><p>Graphic</p><p>Integrated Intel® HD Graphics</p></li><li><p>Storage</p><p>32GB eMMC<br>64GB eMMC</p></li><li><p>Card Reader</p><p>card reader (Micro SD )</p></li><li><p>Camera</p><p>Front 2 MP and Rear 5 MP</p></li><li><p>Networking</p><p>Dual-band 802.11 a&#x2F;b&#x2F;g&#x2F;n<br>Built-in Bluetooth™ V4.0+HS</p></li><li><p>Interface</p><p>1 x COMBO audio jack<br>1 x Micro USB<br>1 x micro HDMI<br>1 x micro SDXC card reader<br>1 x Volume up&#x2F;down</p></li><li><p>Audio</p><p>Built-in Speakers And Array Microphone</p></li><li><p>Battery</p><p>31 Whrs</p></li><li><p>Dimensions</p><p>Tablet:<br>10.1 x 6.9 x 0.3 inch (WxDxH)</p></li><li><p>Weight</p><p>Tablet:<br>1.3 lbs (with Polymer Battery)</p></li></ul><hr><h2 id="Phoenix-OS"><a href="#Phoenix-OS" class="headerlink" title="Phoenix OS"></a><a href="http://www.phoenixos.com/">Phoenix OS</a></h2><p>這是一個基於<a href="https://www.android-x86.org/">Android X86</a>中國客製化的Android系統</p><p>特點是針對PC環境做了UI調整,加上有線網路連線的功能,並且預設的安裝方式中就有用exe檔直接裝在Windows下做成雙系統開機</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><h4 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h4><ul><li><p>在ASUS T100上就算讓他強制USB開機,也只會停在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub&gt;</span><br></pre></td></tr></table></figure><p>這時候需要手動keyin才能boot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configfile /efi/boot/grub.cfg</span><br></pre></td></tr></table></figure></li><li><p>若選擇安裝,進入HDD選擇畫面鍵盤就失效了..所以無法下一步</p></li><li><p>若改採用exe在WIndows界面下安裝,不管怎麼裝都會出現安裝失敗…</p></li></ul><h4 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h4><p>搞了一天才發現,其實是T100非常神奇的是32bit UFEI開機的奇妙舊時代產物…</p><p>為了這個,我只好重新去download並做了一個Windows 10 32bit版的安裝USB來重裝那個被我搞壞掉的系統</p><p>然後去下載32bit的PhoeinxOS(基於Android5的版本)</p><p>重新安裝好Windows 10然後跑exe安裝,接著在開機的時候按<code>esc</code>進入選單選Phoenix OS就可以開機進入新裝好的Phoenix OS了</p><p>什麼？你說可不可以用x86版的Iso整個裝Phoenix OS就好？</p><p>我也想,但是該死的鍵盤還是不會動呀～～～～</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bliss OS</title>
      <link href="/2020/12/14/2020121601/"/>
      <url>/2020/12/14/2020121601/</url>
      
        <content type="html"><![CDATA[<p>最近不知道怎麼了,又迷上了在PC上安裝Android的風潮…</p><p>繼Phoenix OS後又找了一個可以說更符合我的期望的Android X86 - Bliss OS</p><span id="more"></span><h2 id="Bliss-OS"><a href="#Bliss-OS" class="headerlink" title="Bliss OS"></a><a href="https://blissos.org/">Bliss OS</a></h2><p>這是一個Open source版的android x86,比起天朝公司的Phoenix OS可以說先天上就比較合我的胃口(好啦,我知道是我對於天朝製品有偏見…)</p><p>更棒的是,這個團隊是用Surface作為開發機,所以對於Surface的相容性可以說是很好的</p><h4 id="基本系統"><a href="#基本系統" class="headerlink" title="基本系統"></a>基本系統</h4><p>這個一樣有分X86&#x2F;X64兩種,基本上都是X86的版本都是比較舊的Android版本,不過這個系統貼心的點在於下載的時候會問你準備安裝的機器條件替你選擇該下載哪一個版本的ISO來安裝,很大程度可以迴避上次在Phoenix OS上遇到的悲劇….(不過這樣講不太公平,因為裝Phoenix OS之前我也不知道T100限制那麼多…)</p><p>現在的stable版本是基於Android 9開發的版本</p><p>裝起來很陽春,很乾淨,很大程度的很討我的歡心..(yes！我就是有這種怪癖)</p><p>不過這一點在天朝似乎就不一定是好事..因為畢竟有GFW擋在那裡….</p><h4 id="Linux-driver-for-Surface"><a href="#Linux-driver-for-Surface" class="headerlink" title="Linux driver for Surface"></a>Linux driver for Surface</h4><p>基本上是直接套用<a href="https://github.com/jakeday/linux-surface/tree/master/firmware">jakeday的linux-surface github project</a>開發的Linux版Surface Driver,不過痛苦的是不能直接把這些firmware塞進iso裡面直接裝了就好了</p><p>而是需要先在觸控螢幕無法做動的環境下把東西塞進去然後重開(講到這裡就得感謝昨天實裝的surface pro4有著完整的配套docking&#x2F;keyboard等東西…)</p><h2 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h2><p>首先,不愧是Surface Pro4, i5的CPU+8G的RAM跑起來很順暢, 安裝過程也依照官方網頁的教學很順利(好啦,我現在對於這種只有UEFI開機的機器都覺得該敬遠…)</p><p>雖然開機畫面蠻醜的,最好可以自己再改一下…</p><p>不過可能最佳化還是沒弄好,昨天發現若是連著docking開機那wifi就不會動…</p><p>後面的小問題還是有待實機的主人後面邊玩邊看吧….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ベルウィックサーガ 再び</title>
      <link href="/2020/12/07/2020120701/"/>
      <url>/2020/12/07/2020120701/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Berwick_Saga_boxart.png" alt="ベルウィックサーガ"></p><p>2005年的PS2遊戲 - ベルウィックサーガ,最近又翻出來用模擬器重玩一次</p><span id="more"></span><h2 id="ベルウィックサーガ"><a href="#ベルウィックサーガ" class="headerlink" title="ベルウィックサーガ"></a>ベルウィックサーガ</h2><p>這是一個類似聖火降魔錄aka.火焰的紋章的回合制戰略遊戲(因為製作人之前就是做FE的後來跑出來做這個系列然後就跟任天堂有著一堆糾葛不多講)</p><p><a href="https://ja.wikipedia.org/wiki/%E3%83%86%E3%82%A3%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%82%AC%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA_%E3%83%99%E3%83%AB%E3%82%A6%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B5%E3%83%BC%E3%82%AC">日文的wiki在這裡</a></p><p>對我來講有好玩的不只是**<em>馬是消耗品</em><strong>的騎兵系統,更加上這是一個</strong><em>主角也會騎馬</em>**全員一起<del>高速移動</del>當騎兵的遊戲(好啦就是這種莫名其妙的點點中我),加上是PS2時代的遊戲畫面(雖然現在玩起來也是很陽春啦～～)</p><p>打算這輪過完後回去重玩PS版的前作 - <strong>ティアリングサーガ ユトナ英雄戦記</strong>好了,這個據說是雙主角的系統</p><h2 id="PCX2"><a href="#PCX2" class="headerlink" title="PCX2"></a>PCX2</h2><p><a href="https://pcsx2.net/">Official Link在這裡</a></p><p>老實說這是一個很強大的模擬器…用起來很直覺也很順手,而且還內建金手指作弊系統,真的很適合我這種休閒玩家拿來重溫PS2的遊戲用的</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>大概這段時間回到房間我就會黏在電腦前面玩這個…看看過一段時間又有什麼遊戲吸引了我的目光….</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重整Wiki資料</title>
      <link href="/2020/12/04/2020120401/"/>
      <url>/2020/12/04/2020120401/</url>
      
        <content type="html"><![CDATA[<p>今天繼續沉迷在Arch Linux的安裝script裡,弄著弄著,就把Wiki裡面的內容幾乎全改了….</p><span id="more"></span><h3 id="故事大綱"><a href="#故事大綱" class="headerlink" title="故事大綱"></a>故事大綱</h3><p>為了讓那個很私人使用的script變得稍微通用一點點,今天把那整個部份幾乎重寫了..</p><h3 id="除去幹話的重點"><a href="#除去幹話的重點" class="headerlink" title="除去幹話的重點"></a>除去幹話的重點</h3><p>簡單的說就是我把昨天學會的case loop應用上去了,並且將原來看起來支離破碎的多個安裝script整合成使用者只要key一次就可以用選的一路裝完我預設好的幾種安裝結果</p><ul><li>單純的Arch Linux - 老實說這個安裝結果有可能未來是我實驗東西最常用的script..因為什麼都沒裝,就是個可以開機有網路用而的東西</li><li>Nextcloud預裝好的Arch Linux - 這個應該是使用幅度最低,然後內容跟其他的script最不一樣…(也應該是我最後才可能完成的script<del>若是我沒有嫌麻煩最後把這個選項砍掉的話</del>)</li><li>V2ray Server - 這個基本上就是用來跑在台灣家裡的Arch Linux base的V2ray server專用,因為根本沒看到哪個VPS可以用Arch的<del>就算有我也不會為了arch去租用比較貴的..</del></li><li>V2ray Gateway - 這個是等於我現在在蘇州房間裡面Gateway的雛型,基本框架都弄好了就差V2ray跟iptable的設定就一模一樣</li><li>V2ray Gateway ver.K - 這個就是最矛盾的啦,這個選項就是完全重現我現在正在服役的Arch Linux Gateway with V2ray&#x2F;Iptable設定的東西,可以說寫這種自動安裝script的核心就是為了他..但是…..因為現在的wiki跟script的放法基本上就是脫光光給人看,再怎麼說也不可能會把現在正在用的設定全部公開給人抄…所以這個會比較彆扭..要用上加密&#x2F;解密的方式來復原設定檔</li></ul><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>我想就一句話</p><blockquote><p>我還真的是閒的蛋疼,祕密的script不弄搞成公開形式的複雜版…</p><p>加上寫著寫著覺得每一篇都落落長乾脆都支解弄成很多小檔案…</p></blockquote><p>我真的給人感覺過太爽也說不定….</p><p>好了,六點到了,也該是薪水小偷下班的時間了~~各位啾掰～～</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理Arch linux自動安裝的囉唆抱怨</title>
      <link href="/2020/12/03/2020120301/"/>
      <url>/2020/12/03/2020120301/</url>
      
        <content type="html"><![CDATA[<p>雖然Wiki裡面寫了一堆Archlinux自動安裝用的script,不過昨天才開始<em>本格的</em>進行驗證跟補充,然後就很想把自己打死…</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先這一篇不是什麼技術補充的Blog,而是一篇純粹抱怨的**<em>深宮怨婦文章</em>**, 若是希望在這裡尋得什麼有價值的資料的捧油麻煩左轉去<a href="https://kiwi0093.github.io/Wiki-site/wiki/Linux/Arch%20Linux%20&%20Manjaro/Archlinux%20Gateway%E8%87%AA%E5%8B%95%E5%AE%89%E8%A3%9D/1-Arch_linux_Gateway_installation/">Wiki</a>可能對你才有幫助</p><h2 id="以下全是抱怨"><a href="#以下全是抱怨" class="headerlink" title="以下全是抱怨"></a>以下全是抱怨</h2><ul><li><p><a href="https://raw.githubusercontent.com被牆/">https://raw.githubusercontent.com被牆</a></p><p>真的很想罵人…把東西放在Gitub上就是想說<del>牆國</del>天朝不會對github下手,所以東西放在上面使用很方便,結果…天朝還是來了一記DNS污染..真的很OOXX</p></li><li><p>pacstrap &#x2F;mnt base沒有安裝kernel</p><p>看著新的<a href="https://wiki.archlinux.org/index.php/installation_guide">Archlinux installation Guide</a>裡面說不需要跑mkinitpico這是實話,<del>但是沒說跑pacstrap的時候不會順手裝上kernel package,所以當然不會跑mkinitpico,然後grub-mkconfig當然也就不會建立選單…</del>然後開機就變成一個悲劇….</p><p>更正:好吧是我自己白目,最新版的Installation Guide裡面是要求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware</span><br></pre></td></tr></table></figure><p>這個算是自己白目..但是還是罵一下…</p></li><li><p>netctl變成另外裝的</p><p>其實我也忘記之前是不是另外裝,原來預設的網路界面設定說明是用netctl的,現在變成用ip指令,不過還是可以以package安裝後拿來使用</p></li><li><p>pacman-mirrors居然不是arch linux的package</p><p>因為我Linux Desktop喜歡用Manjaro,而Manjaro幾乎跟archlinux一模一樣(好啦其實除了Logo還是有些差別啦),不過沒想到繼yay之後還有package是archlinux裡面沒有的…這樣在安裝的時候就只能用sed指令去篩選出mirrorlist裡面想要的location..後面研究一下AUR可不可以安裝好了…</p><p>追申:查過Arch的AUR,裡面沒有pacman-mirrors…（哭哭）</p></li></ul><h2 id="抱怨之後"><a href="#抱怨之後" class="headerlink" title="抱怨之後"></a>抱怨之後</h2><p>雖說我喜歡Arch,但是仔細想想,其實我喜歡的是Manjaro….</p><p>Arch linux大概只有在Server端或是Gateway上我才會使用…不過似乎也可以使用Manjaro直接裝沒有GUI的版本來使用…</p><p>不過我個人比較龜毛,對於Server跟Desktop的要求不太一樣,Server還是盡量簡潔乾淨最好,而Desktop還是方便為主只要還是在Arch系內就好…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>間歇性斷食</title>
      <link href="/2020/12/03/2020120302/"/>
      <url>/2020/12/03/2020120302/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=SlzBMJvtGHo" title="斷食體內變化"><img src="http://img.youtube.com/vi/SlzBMJvtGHo/0.jpg" alt="Dr.Berg的斷食說明"></a></p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身為一個母胎肥仔,自今年年初因為高血壓住院後,考慮到還有老婆小孩,還是該認真減重來延長自己的壽命,上網查詢了減重相關的東西後發現了似乎從這一兩年開始,一堆人開始鼓吹利用間**<em>間歇性斷食</em>**來進行減重</p><h2 id="階段性斷食"><a href="#階段性斷食" class="headerlink" title="階段性斷食"></a>階段性斷食</h2><blockquote><p>****間歇性斷食法（intermittent fasting）**，作法是有策略的在**進食**期間正確飲食，在*<em>禁食*<em>期間則是不能吃下任何有熱量的東西，讓胰島素休息，升糖素起來作用分解脂肪。</em></em></p></blockquote><h2 id="親身體驗"><a href="#親身體驗" class="headerlink" title="親身體驗"></a>親身體驗</h2><p>就我個人來說,在出院後實行過超低熱量飲食,低碳飲食,16&#x2F;8間歇性斷食法,曾將體重從112.7KG降低到98Kg並且當時看起來還會有持續下降的趨勢..</p><p>不過來了趟返台休假,在飯店隔離&#x2F;food panda&#x2F;以及那個花了快三十年把我養成這種體型的媽,不是很拼命的effort下,我的體重開始快速回升,然後..我又一次的因為女兒出生再次返台,體重就回到了109KG並且頑固的死不降低</p><p>基本上都是穩定在執行16&#x2F;8間歇性斷食,但是可能我的身體狀況真的不好,以及進食的時候吃的太多,所以很難看出持續有效的脂肪消耗,所以最近開始採用更加激進的23&#x2F;1間歇性斷食,第一天實施就開始降從109.6Kg–&gt;107.8Kg,不過第一天是不凖的預計要觀察至少一週後看看效果如何</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>目前看起來間歇性斷食是我試過最有效果的方式,後面的主要課題應該是看如何可以完整的併入生活中,畢竟上次的破功是來自於生活模式的劇烈改變(隔離是變胖的主因？？還是隔離就開始卯起來吃是主因？？)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯子,後篇...</title>
      <link href="/2020/12/01/2020120101/"/>
      <url>/2020/12/01/2020120101/</url>
      
        <content type="html"><![CDATA[<p>手上還有幾台V2ray 4.2x的Debian等著我升級….</p><span id="more"></span><h2 id="現況說明"><a href="#現況說明" class="headerlink" title="現況說明"></a>現況說明</h2><p>這幾天勸敗了幾台新的RackNerd的VPS後,著實的好好練習了V2ray 4.33的安裝..(截至今天一共弄了四台新的加兩台update),但是除了名下的機器外,看著我的CF裡的DNS列表…還是有在我的DN下的別人家的機器,其實是該幫人家升級的…</p><p>因為討人厭的是</p><h2 id="不是每個4-3x的Client都跟4-2x的Server相容"><a href="#不是每個4-3x的Client都跟4-2x的Server相容" class="headerlink" title="不是每個4.3x的Client都跟4.2x的Server相容"></a><em>不是每個4.3x的Client都跟4.2x的Server相容</em></h2><p>所以要就得一口氣連同Client一起升一下不然很容易出悲劇…</p><h2 id="升級"><a href="#升級" class="headerlink" title="升級"></a>升級</h2><p>其實依照我的尿性,不過就是VPS,上面也沒什麼重要的東西..保留一下<strong>V2Ray</strong>的<strong>config.json</strong>裡的內容,然後直接選<strong>reinstall</strong>一切重來可能還比較省事…不過既然有不是我可以隨便<strong>reinstall</strong>的VPS那還是來弄個複雜版的升級好了….</p><p>你說為什麼技術性的東西不抄來放在Wiki裡?這種一次性的東西做完就可以忘記的東西為什麼要放在Wiki裡面??</p><h3 id="升級細節"><a href="#升級細節" class="headerlink" title="升級細節"></a>升級細節</h3><p>簡單的說他的流程就是</p><ul><li>把systemd裡面的service停掉並且disable</li><li>用rm把之前裝的Bin等東西都砍掉</li><li>用mv把設定檔從原來預設的*&#x2F;etc&#x2F;v2ray&#x2F;<em>挪到</em>&#x2F;usr&#x2F;local&#x2F;etc&#x2F;v2ray&#x2F;*至於為什麼要換位置?我猜可能是<del>中了FreeBSD的魅惑</del>想把v2ray的設定跟系統的主設定位置分開</li><li>用新的script安裝(若是不想變更預設位置就要手工修改script,但是這樣要放進crontab裡面就麻煩了耶~~)</li><li>enable v2ray.service</li><li>V2ray.service跑起來就可以收工了</li></ul><p>若是要改用<strong>VLESS</strong>的話就再加上增加v2ray帳號,處理certbot的key(或是用其他方式弄Key也可以只不過我還不會)最後再改一下config.json的內容就可以了</p><p>詳細的作法,算是<a href="https://github.com/v2fly/fhs-install-v2ray/wiki/Migrate-from-the-old-script-to-this">官方文件</a>裡面寫得很清楚</p><h4 id="若是你的Server使用的是Archlinux…"><a href="#若是你的Server使用的是Archlinux…" class="headerlink" title="若是你的Server使用的是Archlinux…."></a>若是你的Server使用的是Archlinux….</h4><p>那就只要來一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure><p>你的V2ray就會升級到最新….什麼屁事沒有..超輕鬆的….</p><p>真的很討厭為什麼VPS的OS預設都沒有arch可以選…煩死了</p><h2 id="Client-選用"><a href="#Client-選用" class="headerlink" title="Client 選用"></a>Client 選用</h2><p>Client的部分,老實說我用得最兇的是Archlinux下的V2ray,相容性最好(因為跟Server是一模一樣的程式),穩定性也高,不過就如同之前講過,還是會考慮一下其他的client</p><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>最近真的是迷上了<strong>V2RayNG</strong>不過這個也是我目前遇到4.33的core連不上4.23的Server的唯一一個Client….最新改版之前的那一版(1.33)與現在最新改過的對於VLESS的支援性以及速度上真的有差,可能未來會變成Server的 V2Ray-Core升級了這個就得馬上跟著升級才會順…..(我希望不會是這樣…)</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>因為Linux Desktop下我都是用QV2Ray+V2Ray-Core所以用起來很順暢,沒什麼問題,不過Windows下就<del>得換一下了</del>一樣用QV2ray就好了…(這玩意是跨平台的..WIndows&#x2F;Linux&#x2F;MacOS都通吃)</p><p>下載位置<a href="https://github.com/Qv2ray/Qv2ray/releases">QV2Ray</a>,搭配服用的<a href="https://github.com/v2fly/v2ray-core/releases">V2Ray-Core</a></p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>中國區的捧油,請去找有沒有善心人士的美區帳號用一下就好了….</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯子,與其附屬</title>
      <link href="/2020/11/27/2020112701/"/>
      <url>/2020/11/27/2020112701/</url>
      
        <content type="html"><![CDATA[<p>前天又入手了一台廉價的VPS,來自<strong>RackNerd</strong>的感恩節特賣,以18USD左右的價格入手了兩年的使用權</p><span id="more"></span><h2 id="VLESS"><a href="#VLESS" class="headerlink" title="VLESS"></a>VLESS</h2><p>入手這台主要是用來驗證一下VLESS的相關設定與使用,所以拿到的時候就直接上VLESS,詳細的安裝筆記照慣例會放在Wiki裡面,這裡就不特別提及安裝與設定的細節,來聊聊初步的感想好了</p><h3 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h3><p>雖然知道VLESS是由於VMESS有問題會被100%偵測到,但是由於手上的梯子們都是採用WS+TLS架構所以其實也沒那麼危險(要說這樣危險的話那VLESS不也是一樣危險..)所以也不是有必要非上VLESS不可,不過看了一些強國人的推薦看似VLESS效率變好很多(把原來VMESS裡面的加密,認證等東西都拔掉了理論上當然會變快)</p><p>所以一時忍不住….(衝動購物的典範)</p><h3 id="差異"><a href="#差異" class="headerlink" title="差異"></a>差異</h3><p>在使用VMESS+WS+TLS的時候,基本上嫌麻煩所以都是建議用Caddy來處理WS+TLS的部份,不過VLESS的設定上因為要把TLS包進V2Ray裡面,所以會需要定義SSL KEY的位置,所以Caddy原來便利的自動處理SSL認證這部份就變成一個問題(其實應該不會是個問題,只不過因為他是自動的所以還得去找他的Key放哪,還得自己確認一下)加上Caddy v2的設定檔相較V1變得複雜,設定邏輯與相關資料也沒有Nginx或Apache那麼的熟悉(說來說去還是受限於自身的能力…..)</p><h3 id="驗證平台"><a href="#驗證平台" class="headerlink" title="驗證平台"></a>驗證平台</h3><p>因為Caddy不再被需要所以有著莫名其妙習性的我,自然會想要重裝整個系統來取代解除安裝等相關動作(我覺得某程度上也是VM慣壞的習慣,懶的大改的時候就重裝)所以一開始在動家裡那台用來跑備援V2ray的Archlinux上,加上我最近在重寫Archlinux的自動安裝script,就一時腦子熱的一邊重裝一邊進行script的debug(講到這裡不得不說,安裝的過程又稍微改過了導致script一些核心部份只能重寫很討厭…)所以前天的時候主要的時間幾乎都在script的調整跟重裝系統中度過…</p><p>後來入手RackNerd的時候就剛好趁這個機會直接上了,這些VPS基本上都是跑Debian&#x2F;Ubuntu或是CentOS系的OS,沒有我喜歡用的Archlinux….</p><p>看了看網上的一些教學感覺用Archhlinux可能還比較簡單一點,最起碼pacman就可以搞定安裝不用另外跑script,也不用去改crontab來自動更新(講到這裡,其他的VPS的自動更新基本都失效了,因為變更了安裝的script路徑)</p><h3 id="Server端的感想"><a href="#Server端的感想" class="headerlink" title="Server端的感想"></a>Server端的感想</h3><p>因為V2ray可以自己跑WS+TLS的部份處理所以本來很天真的覺得安裝的時候不用再裝上nginx或是apache,不過事後想想還是裝上比較好進行certbot的SSL Key處理就還是裝了…</p><p>不過總體來說只要V2ray設定好就可以不用開啟Nginx&#x2F;Apache也可以進行ws的功能這點倒是蠻省心的,畢竟可以少弄一個Web Server的設定,不過結論上應該還是得把Web Server設定弄一下不然他的fallback可能會有問題</p><p>看得出來這個趨勢符合V2ray團隊的想法,從一開始V2ray就沒打算只是一個socks server, 他們想要的比較像是一個擁有全面擴充性的網路管理大雜燴,裡面有DNS, Routing Table, 通訊的協定與加密等等要是說哪天他裡面也會包括web server的完整模組而非只是單純WS功能大概我也不會覺得很稀奇吧</p><p>目前是依照模板以最精簡方式設定好了VLESS+WS+TLS,等後面解決了XTLS的版權問題也許也會試試VLESS+XTLS看看是不是真的這麼強大(都說跟裸奔一樣快了…)</p><h3 id="Client端的感想"><a href="#Client端的感想" class="headerlink" title="Client端的感想"></a>Client端的感想</h3><h5 id="Gateway-V2ray-client"><a href="#Gateway-V2ray-client" class="headerlink" title="Gateway V2ray client"></a>Gateway V2ray client</h5><p>沒錯,我把房間的Gateway改接到正在跑VLESS+WS+TLS的VPS上去了,看起來使用還蠻正常的,速度上應該是受限於中國連通的爛網路所以根本看不出來有沒有變快..(所以說,等於最開始的動機已經無法達成了,也是啦沒有好網路線路去跟人家計較什麼速度效率不是搞笑嗎？？)</p><p>現在算是在進行穩定性測試看看後面幾天是不是使用上會有什麼驚喜(不要是驚嚇就好了)</p><h5 id="Linux-Client-QV2Ray-V2ary"><a href="#Linux-Client-QV2Ray-V2ary" class="headerlink" title="Linux Client - QV2Ray+V2ary"></a>Linux Client - QV2Ray+V2ary</h5><p>因為我的Linux Desktop(就是現在用來寫Blog的這個)是Manjaro,所以V2ray很容易的就可以裝上這點讓我很感謝Arch的團隊</p><p>用起來的感覺…好吧我只能說我只用了一下下就沒試了,主要的原因還是來自於目前辦公室沒有WiFi可以連線(所以我這篇應該不會在我寫的這天準時的publish出去)</p><p>但是跑起來似乎跟Gateway的狀態差不多,沒什麼差距大概還是受限於線路吧</p><h5 id="Android-Client-V2RayNG"><a href="#Android-Client-V2RayNG" class="headerlink" title="Android Client - V2RayNG"></a>Android Client - V2RayNG</h5><p>由於目前支援VLESS的Client沒有很多,所以我只好在新裝上<strong>V2RayNG</strong>到手機上,不得不說,感覺上比<strong>BifrostV</strong>穩定好用,這篇文章老實說也是主要想講講這個軟體才想寫的(所以說前面的都是廢話！？)</p><h6 id="優點-非常主觀"><a href="#優點-非常主觀" class="headerlink" title="優點(非常主觀)"></a>優點(非常主觀)</h6><ul><li><p>Barcode與QV2Ray通用</p><p>首先,這個程式支援的barcode格式跟<strong>Qv2ray</strong>是一樣的屬於”標準規格”跟<strong>BifrostV</strong>那種用自己規格的Barcode相較起來使用上比較方便,不過這也不是<strong>BifrostV</strong>白目而是先前並沒有很明確的定義過V2ray連結Barcode規格導致的,不過話是這樣說可以用一樣規格的Barcode的確是比較方便</p></li><li><p>沒有廣告,GUI合胃口</p><p>雖然說對於免費可使用的App有廣告這件事我不是那麼的排斥,但若是App裡面很乾淨沒有多餘的廣告是會讓人感覺很開心的</p><p>可能是因為之前<strong>Shadowsocks</strong>這個App給我很好的印象,不管是GUI簡潔的風格,反應速度以及第一個可以讓我穩定翻牆的既定印象,導致我對於<strong>V2RayNG</strong>那長得很像<strong>shadowsocks</strong>的界面有著很高的好感度</p></li><li><p>程式的反應快速,穩定性高</p><p>在我一開始為了V2Ray換用<strong>BifrostV</strong>時時常會覺得這個app的反應以及穩定性似乎沒有<strong>shadowsocks</strong>好,常常會開了沒反應,或是連著連著莫名其妙斷掉等等的問題發生,不過那時候總覺的沒有其他可以替代的程式可以Cover那麼多種通協定所以就一直加減用著,直到我為了VLESS換用<strong>V2RayNG</strong>世界就變了…</p><p>又讓我找回當初用<strong>shadowsocks</strong>的感覺,不過老實說因為大叔蠻少在外面晃來晃去,所以手機&#x2F;平板的翻牆倒也不是真的用得很重加上回房後房內的WiFi都在翻好牆的Gateway內基本上不會重複翻牆….</p></li></ul><h6 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h6><ul><li><p>DNS問題</p><p>我不確定是VLESS的問題還是<strong>V2RayNG</strong>的問題,對於DNS污染並不是處理的很好相同的設定下去連接VMESS+WS+TLS,可以很正常的使用,但是一接上VLESS+WS+TLS後就會出現DNS異常無法連線,最後隨便亂試的結果只有以下的設定可以正常使用</p><ul><li>域名策略 - 不管是IPIfNonMatch或是IPOnDemand都可以</li><li>預定意規則 - 略過區域網路及中國大陸</li><li>啟用本地DNS - 絕不能啟用</li><li>遠端DNS - 改為Google的8.8.8.8</li></ul><p>目前是這樣但是怎麼想都不該會有問題,可能等後面看出什麼端倪了再來更新</p></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總之,梯子相關的技術,放眼全世界大概就是身處<del>強國</del>天朝的人才會去習得的技術,如同大叔的師匠所說”這是一個很偏門的技能樹,這群人中大概只有在那邊派駐的你會去點吧”所以大叔只能去翻網上的資料學會一點皮毛在這裡獻醜</p><p>不過還好天朝的有志之士還是很多的,所以相關的資料還是很好找,是的..當你翻出去用Google的時候很好找,牆內的世界卻是一篇都找不到…</p><p>所以說這梯子這種東西,說穿的只是需要第一次翻出去的工具,有了之後,後面不管你要怎麼搭梯子都是相對輕鬆的…</p><p>不過話說回來,搭梯子這種事本來就是跟天朝的國家機器做一點小小的反抗的行為,屬於需要持續不斷更新,精進的,真的想要一勞永逸</p><p>還是肉身翻牆或是物理翻牆比較實在</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Note taking tools</title>
      <link href="/2020/11/16/2020111601/"/>
      <url>/2020/11/16/2020111601/</url>
      
        <content type="html"><![CDATA[<p>搭建好了Blog&amp;Wiki接下來就該是開始時常寫一點習慣養成,以及一些相關工具的蒐集與使用方式打磨</p><span id="more"></span><p>使用的工具方面目前已經有Typora這個好用又漂亮,加上又是跨平台的Markdown Editor,相關的細部我後面會在Wiki裡面建立條目(這算是挖坑給自己跳嗎?)</p><p>但是總感覺似乎少了什麼,多方追尋(大概花了五分鐘…)找到一個chrome extension的web clipper</p><h4 id="MaoXian-Web-Clipper-Chrome-store的Link"><a href="#MaoXian-Web-Clipper-Chrome-store的Link" class="headerlink" title="MaoXian Web Clipper:Chrome store的Link"></a><a href="https://mika-cn.github.io/maoxian-web-clipper/index-zh-CN.html">MaoXian Web Clipper</a>:<a href="https://chrome.google.com/webstore/detail/maoxian-web-clipper/kjahokgdcbohofgdidndeiaigkehdjdc/related">Chrome store的Link</a></h4><p>不過我自己都還在摸索中,除了軟體本身的使用方法以外,還有就是怎麼跟未來打算要有的習慣進行磨合</p><p>大叔現在也是兩個小朋友的爸爸(幹話開始了..&#x3D;_&#x3D;!)</p><p>也會想以後在小朋友面前耍帥的說老爸我也是有良好的習慣做了一些個人知識庫呢(翹鼻子~~)</p><p>所以就趁現在單身赴任有時間的時候能持之以恆的寫就盡量寫吧…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Tools </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新開張!大改版!</title>
      <link href="/2020/11/15/2020111501/"/>
      <url>/2020/11/15/2020111501/</url>
      
        <content type="html"><![CDATA[<p>本來是想要使用一些Markdown的筆記軟體,例如<a href="https://obsidian.md/">Obsidian</a>來進行一些碎片化筆記來收集與整理後面會碰上的新東西與新作法</p><span id="more"></span><p>不過後來翻著翻著,覺得與其用一個本機的筆記程式不如做成Wiki的形式讓自己查詢就好,看著看著就決定把現在的Hugo+Github Page改成Hexo+Github Page搭配兩個不同的Theme弄成Blog+Wiki的新網站</p><p>使用Github Desktop讓Blog&#x2F;Wiki的文章與能夠方便的透過Github來進行同步與版本控制以期完成想要的功能,詳細的做法可以參考已經寫好的<a href="https://kiwi0093.github.io/Wiki-site/wiki/Network/Hexo/1-introduce/">Wiki條目</a></p><p>後面大概就是在弄個web網頁紀錄的功能來記錄看到的東西,還有慢慢習慣碎片化的短篇Markdown文章來建立一個屬於自己的知識庫</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大叔的碎碎念 - Window &amp; Linux使用工具盤點</title>
      <link href="/2020/07/15/tools/"/>
      <url>/2020/07/15/tools/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用電腦多年,使用的軟體也隨著時間的變更而有些調整,看著自己之前寫過一些Manjaro的安裝使用或是Gaming之類的文章就在想是否該寫一篇<del>大雜燴</del>整合文章把現在這個時間點開始使用或是使用多年也不厭倦的軟體以及習慣的設定方式做個紀錄,也給有興趣的人們留下一點參考</p><span id="more"></span><h1 id="基本前提"><a href="#基本前提" class="headerlink" title="基本前提"></a>基本前提</h1><p>從今年開始大叔我開始慢慢習慣多平台的使用(主要是指Windows&#x2F;Linux的Desktop)所以軟體的選擇使用上也盡量會選擇以下幾個特點</p><ul><li>Freeware or Open-Source的軟體</li><li>支援多平台</li><li>最好可以互相sync不容易因為更換平台或是終端無法繼續接著工作</li><li>不需要依賴網路就可以操作</li></ul><p>以上這幾點基本上就是讓自己盡量少用盜版軟體,減少對於Web app的依賴(例如一大堆的chrome擴充程式)</p><h1 id="Desktop環境"><a href="#Desktop環境" class="headerlink" title="Desktop環境"></a>Desktop環境</h1><h2 id="Editor-Coding-Note-tools"><a href="#Editor-Coding-Note-tools" class="headerlink" title="Editor&#x2F;Coding&#x2F;Note tools"></a>Editor&#x2F;Coding&#x2F;Note tools</h2><h3 id="Markdown-Editor"><a href="#Markdown-Editor" class="headerlink" title="Markdown Editor"></a>Markdown Editor</h3><h4 id="Typora-Windows-Linux"><a href="#Typora-Windows-Linux" class="headerlink" title="Typora - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Typora.jpg" alt="Typora" width="50" /><a href="https://typora.io/">Typora</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade typora <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#None root account &amp; yay installed</span></span><br><span class="line">yay <span class="operator">-</span>S typora</span><br></pre></td></tr></table></figure><p>這是一個用過才知道超好用的,大叔在<a href="https://kiwi0093.github.io/post/git/">另外一篇</a>裡面有提到這個還可以結合Github當圖床自動上傳圖片,習慣Hot-key後拿來寫Blog工作效率會很好是個值得推薦的Markdown Editor</p><p>順便筆記一下,要在Markdown內插入youtube影片的話<a href="https://gist.github.com/billthelizard/a632b6a6a79839cba1c0fd67f64b87ff">請這樣做</a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基本語法</span><br><span class="line"><span class="punctuation">[</span><span class="operator">!</span><span class="punctuation">[</span>alt text<span class="punctuation">]</span><span class="punctuation">(</span>http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span>example.com<span class="operator">/</span>exampl.png<span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">(</span>http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span>example.com<span class="operator">/</span>link <span class="string">&quot;title&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">封面的圖</span><br><span class="line">http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span>img.youtube.com<span class="operator">/</span>vi<span class="operator">/</span><span class="punctuation">&#123;</span>video<span class="operator">-</span>id<span class="punctuation">&#125;</span><span class="operator">/</span><span class="number">0.</span>jpg</span><br><span class="line"></span><br><span class="line">所以範例就是</span><br><span class="line"><span class="punctuation">[</span><span class="operator">!</span><span class="punctuation">[</span>Audi R8<span class="punctuation">]</span><span class="punctuation">(</span>http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span>img.youtube.com<span class="operator">/</span>vi<span class="operator">/</span>KOxbO0EI4MA<span class="operator">/</span><span class="number">0.</span>jpg<span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">(</span>https<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span>www.youtube.com<span class="operator">/</span>watch<span class="operator">?</span>v<span class="operator">=</span>KOxbO0EI4MA <span class="string">&quot;Audi R8&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>其中<em>KOxbO0EI4MA</em>就是Video-id,可以從影片的連結來找,不過play list是沒有封面的</p><h3 id="Editor-for-coding"><a href="#Editor-for-coding" class="headerlink" title="Editor for coding"></a>Editor for coding</h3><h4 id="Notepad-Windows-Linux"><a href="#Notepad-Windows-Linux" class="headerlink" title="Notepad++ - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/notepad%2B%2B.png" width="50" /><a href="https://notepad-plus-plus.org/downloads/">Notepad++</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade notepadplusplus <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>這個Editor在Windows底下算是好用的,大叔主要拿來修改HOI4的檔案(不務正業的代表),不過可惜的是只有Windows版,可以用choco安裝或是抓下來跑,更甚至可以用portable的方式跑</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><h4 id="Notion-Browser-based"><a href="#Notion-Browser-based" class="headerlink" title="Notion - Browser based"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Notion_app_logo.png" width="50" /><a href="https://www.notion.so/">Notion</a> - Browser based</h4><ul><li><p>Windows &amp; Linux &amp; macOS &amp; 只要有Browser的終端</p><p>使用你喜歡的Browser.<a href="https://www.notion.so/">點這裡</a></p></li><li><p>iOS</p><p>到<a href="https://apps.apple.com/us/app/notion-notes-projects-docs/id1232780281">app store上找notion</a></p></li><li><p>Android</p><p><a href="https://play.google.com/store/apps/details?id=notion.id"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/google-play-badge.png" alt="google-play-badge" style="zoom: 33%;" /></a></p><p>自從Notion把免費帳號的使用Block數限制改為unlimited後,Notion一口氣就變成神器了,對於有作筆記習慣的人基本上是推薦必定要去申請一個的(不過大叔的筆記方式改成寫Blog所以就不太用得上)</p><p>八卦一下的是大叔其實是看了Notion的安麗影片才想學用Markdown的,可見他的使用上是多麼誘人,順便附上幾個相關的youtube連結,牆內的捧油就請自動當作沒看到好了</p><p><a href="https://www.youtube.com/watch?v=kI1JQaNpBks&list=PLC5c1koJaYqucZwMGChO36IRPzOxXhXcn"><img src="https://img.youtube.com/vi/8B23t_jqySU/0.jpg" alt="Notion guide" style="zoom:50%;" /></a><br>Note: YouTube Video - Hold Ctrl + Left Click to open in new window</p></li></ul><h2 id="Multimedia"><a href="#Multimedia" class="headerlink" title="Multimedia"></a>Multimedia</h2><h3 id="Player-Video"><a href="#Player-Video" class="headerlink" title="Player - Video"></a>Player - Video</h3><h4 id="K-lite-codepack-Windows"><a href="#K-lite-codepack-Windows" class="headerlink" title="K-lite codepack - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/k-lite-codec-pack-logo.png" width="50" /><a href="https://codecguide.com/download_kl.htm">K-lite codepack</a> - Windows</h4><ul><li>Windwos</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade k<span class="operator">-</span>litecodecpackfull <span class="operator">-</span>y</span><br><span class="line">or</span><br><span class="line">choco upgrade k<span class="operator">-</span>litecodecpackmega <span class="operator">-</span>y</span><br><span class="line">or</span><br><span class="line">choco upgrade k<span class="operator">-</span>litecodecpackbasic <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><h4 id="VLC-Windwos-Linux"><a href="#VLC-Windwos-Linux" class="headerlink" title="VLC -Windwos &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/vlc.jpg" width="70" /><a href="https://www.videolan.org/vlc/index.html">VLC</a> -Windwos &amp; Linux</h4><ul><li>Windwos</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade vlc <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><p>內建,其他的應該用該Distro裡的package manager就可以很容易裝上,甚至用GUI的都可以</p><h3 id="Player-Audio"><a href="#Player-Audio" class="headerlink" title="Player - Audio"></a>Player - Audio</h3><h4 id="foobar2000-Windows"><a href="#foobar2000-Windows" class="headerlink" title="foobar2000 - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Foobar2000_logo.png" width="40" /><a href="https://www.foobar2000.org/">foobar2000</a> - Windows</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade foobar2000 <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>不過這個程式大叔倒是推薦不要用安裝版的,用portable的,主要是用安裝的每次都要調整UI,而它的軟體升級老實說不怎麼有需要,主要是他的codec幾乎都是靠plugin,而plugin也不怎麼更新…</p><p>使用的時候記得搭配<a href="https://lame.sourceforge.io/">Lame MP3 Encoder</a>就可以很方便的進行音樂的轉檔與整理</p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><h4 id="Steam-Windows-Linux"><a href="#Steam-Windows-Linux" class="headerlink" title="Steam - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/steam.jpg" width="50" /><a href="https://store.steampowered.com/">Steam</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade steam <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Mangaro)</li></ul><p>內建裝好的不用特別改</p><p>這個只能說是神器,尤其是對Linux來說根本就是Gaming的最重要software.</p><p>現在年紀大了很多時候遊戲與其花時間精神去到處找人放出的ISO或是什麼亂七八糟的版本,還不如趁特價的時候卡刷下去來的實在省事</p><p>在Steam library裡的遊戲不僅想玩的時候再安裝就好,還可以比對原始檔案把改得亂七八糟的遊戲直接回復到正常可以跑的狀態,搭配workshop跟Nexus mod基本上在電腦上玩遊戲的體驗與爽度(對啦大叔就是Mod黨+cheat愛好者啦)是很高的 </p><p>另外,現在Steam出了Steam link與遠端同樂等新功能,在Linux下也可以跑得很順,是遵循AMD教誨的Linux同伴想要串流的好選擇</p><h4 id="GOG-Glaxy-Windows"><a href="#GOG-Glaxy-Windows" class="headerlink" title="GOG Glaxy - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/galaxy_logo.png" width="50" /><a href="https://www.gog.com/galaxy">GOG Glaxy</a> - Windows</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade goggalaxy <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>這是GOG版的<del>Steam</del>遊戲download&#x2F;Install管理程式,GOG最大的好處就是DRM free,不過一般的玩家應該沒太多感覺,簡單的說就是版權保護沒有那麼嚴格,所以很方便拿來玩就遊戲(阿都叫Good Old Game了)</p><h4 id="Lutris-Linux"><a href="#Lutris-Linux" class="headerlink" title="Lutris - Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/lutris_logo.jpg" width="50" /><a href="https://lutris.net/">Lutris</a> - Linux</h4><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman <span class="operator">-</span>Sy lutris</span><br></pre></td></tr></table></figure><p>Lutris雖說也是神器,因為他是一個集合很多神人寫好的遊戲安裝script並且可以自動化執行的好東西(不過大叔沒有成功地拿來跑什麼遊戲就是了),但是由於它的基礎很多都是使用wine(是的各種不同版本的wine與設定)所以使用前要先把你的硬體設定弄好,跑的時候還是很Linux風味的要一直關注要是有問題要怎麼解決,<a href="https://forum.manjaro.org/t/manjaro-specific-lutris-install-guide/143943">這裡有一篇簡單的Manjaro Lutris Install Guide</a>簡單的說就幾個重點</p><ol><li>如果你用Linux,就買AMD的CPU &amp; GPU, Nvida會讓你懷疑人生</li><li>若是你的遊戲在steam裡面,那還是用Steam吧孩子,玩遊戲應該是快樂的不要為了遊戲以外的事情折磨自己</li></ol><h3 id="GameSteam"><a href="#GameSteam" class="headerlink" title="GameSteam"></a>GameSteam</h3><h4 id="Moonlight-Steam-Windwos-Linux-macOS-Android-iOS"><a href="#Moonlight-Steam-Windwos-Linux-macOS-Android-iOS" class="headerlink" title="Moonlight - Steam - Windwos &amp; Linux &amp; macOS &amp; Android &amp; iOS"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/stream_logo.jpg" width="50" /><a href="https://moonlight-stream.org/">Moonlight - Steam</a> - Windwos &amp; Linux &amp; macOS &amp; Android &amp; iOS</h4><p><a href="https://moonlight-stream.org/">上述連結</a>的最下面就有漂亮而且完整的安裝連結們,大叔就省一點字數</p><p>這個基本上就是一個第三方的Nvidia shield client跟Server的架構,推薦的使用方式是</p><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/moonlight.png"></p><p>這個東西好歸好,但是有以下幾個限制</p><ol><li><p>他只能找到在同一個子網路中的Server,想要從很外部連進來玩<del>需要在gateway上開洞</del>可以透過<a href="https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide#streaming-over-the-internet">Moonlight Internet Hosting Tool</a>達成</p></li><li><p>因為是串流,所以一台Server只能同時讓一個Client連線,並且你在Client上做什麼Server上就在做什麼,某程度上可以當作remote desktop使用</p></li><li><p>Server基本上限定了只能用Nvidia,rending的機能也是用Nvidia的Geforce Experience原始機能,不過好處是Host的設定非常簡單</p></li></ol><p>如同架構圖很適合未來若是大叔想不開決定把所有工作的console都換成Linux後,可以另外建立一台專門拿來玩遊戲的Windows Server,不裝螢幕的扔在某個角落</p><p>搭配WOL(Wake on Lan的功能,要玩遊戲的時候在開啟,打完就把它遠端關機,既省電又不佔地方,還可以搭配電視盒用大電視玩,要是未來這個可以更像Xwindow一樣</p><p>不是畫面rendering送出來而是直接輸出到client,一台Server可以多個Client跑不同的東西那就太棒啦(繼續幻想吧)</p><p>PS:AMD也搞了一個AMD Link應該也是可以這樣搞的只不過大叔還沒試過</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/brave-logo.png" alt="brave-logo" width="40" /><a href="https://brave.com/">Brave Browser</a> - Windows &amp; Linux &amp; Android</p><ul><li>Windows安裝方法</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade brave <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>當然也可以用老方法去官方網頁上下載回來雙擊安裝,只不過我覺得有package manager來管理更新似乎比較現在的胃口一點</p><ul><li>Linux(Manjaro) 安裝方法</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman <span class="operator">-</span>Syu brave</span><br></pre></td></tr></table></figure><ul><li><p>Android安裝方法</p><p><a href="https://play.google.com/store/apps/details?id=com.brave.browser"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/google-play-badge.png" alt="google-play-badge" style="zoom: 33%;" /></a></p></li></ul><p>基本上這個Browser跟Google Chrome有著很高的相容性(因為是用Chromium為基礎開發的嘛)SYNC的方法不是採用帳號式的sync而是用一段文字作為SYNC Code來進行sync,用到現在沒有什麼特別需要提的設定</p><h3 id="SSH-Client"><a href="#SSH-Client" class="headerlink" title="SSH Client"></a>SSH Client</h3><h4 id="Putty-Windows-Linux"><a href="#Putty-Windows-Linux" class="headerlink" title="Putty - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/putty.jpg" alt="putty" width="50" /><a href="https://www.putty.org/">Putty</a> - Windows &amp; Linux</h4><ul><li>Windows安裝方法</li></ul><ol><li><p>使用Portable的版本</p><p> <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">Portable Version</a></p></li><li><p>使用Chocolatey安裝</p></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade putty <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)安裝方法</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman <span class="operator">-</span>Syu putty</span><br></pre></td></tr></table></figure><p>在Windows環境下沒有Putty是很痛苦的,因為沒有什麼好用的SSH Client,但是在Linux環境下由於本來的Terminal或是後裝的Terminator都很好用,所以除了socket功能與private Key的使用條件下其實沒有什麼使用Putty的特別需求</p><h4 id="JuiceSSH-Android"><a href="#JuiceSSH-Android" class="headerlink" title="JuiceSSH - Android"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/download.jpg" alt="download" width="50" /><a href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh">JuiceSSH</a> - Android</h4><p>​      <a href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/google-play-badge.png" alt="google-play-badge" style="zoom: 33%;" /></a></p><p>雖然Android普遍都是觸控螢幕鍵盤用在CLI上面很痛苦,但是應急的時候有個Client其實還是可以頂一下的</p><h3 id="SFTP-FTP-Client"><a href="#SFTP-FTP-Client" class="headerlink" title="SFTP&#x2F;FTP Client"></a>SFTP&#x2F;FTP Client</h3><h4 id="Filezilla-Windows-Linux"><a href="#Filezilla-Windows-Linux" class="headerlink" title="Filezilla - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/1200px-FileZilla_logo.svg.png" alt="download" width="50" /><a href="">Filezilla</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade filezilla <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S filezilla</span><br></pre></td></tr></table></figure><p>現在其實沒有大學時代那麼常用FTP&#x2F;SFTP了但是某程度上還是需要有個SFTP Client,這個也是吃Putty Key的軟體所以其實還是挺實用的,不用這個就只能用<em>WinSCP</em>不過實際上兩個用起來沒有那麼大的差別</p><h3 id="Mail-IM"><a href="#Mail-IM" class="headerlink" title="Mail&#x2F;IM"></a>Mail&#x2F;IM</h3><h4 id="Rambox-Windows-Liunx"><a href="#Rambox-Windows-Liunx" class="headerlink" title="Rambox - Windows &amp; Liunx"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/large.png" alt="download" width="50" /><a href="https://rambox.pro/#home">Rambox</a> - Windows &amp; Liunx</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade Rambox <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S rambox</span><br></pre></td></tr></table></figure><p>這個其實蠻好用的,現在是手機的時代,所以很多IM軟體的主體都是手機版的如同Line&#x2F;Wechat&#x2F;Telegram之類的,Rambox其實就是一個框架可以把有web client的IM&#x2F;Mail Box全部放在一起節省桌面開一大堆程式的雜亂感, 缺點就是沒有Line(因為沒有Web Client)</p><h3 id="Remote-Desktop"><a href="#Remote-Desktop" class="headerlink" title="Remote Desktop"></a>Remote Desktop</h3><h4 id="Remmina-Linux"><a href="#Remmina-Linux" class="headerlink" title="Remmina - Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Remmina-Official-Logo.png" alt="download" width="50" /><a href="https://remmina.org/">Remmina</a> - Linux</h4><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S remmina</span><br></pre></td></tr></table></figure><p>要使用RDP請裝上</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S freerdp</span><br></pre></td></tr></table></figure><p>算是在Linux下想走RDP的好工具,因為大叔不是很喜歡Teamviewer&#x2F;VNC之類要走其他特殊protocol的Remote Desktop程式,所以喜歡用RDP(Windows下就直接用內建的RDP程式),這個似乎可以不需開Putty就直接開SSH Tunnel但是大叔沒有成功試過</p><h4 id="Teamviewer-Windows-Linux"><a href="#Teamviewer-Windows-Linux" class="headerlink" title="Teamviewer - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/teamviewer_logo.jpg" width="50" /><a href="https://www.teamviewer.com/en/">Teamviewer</a> - Windows &amp; Linux</h4><ul><li>Windwos</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade teamviewer <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S teamviewer</span><br></pre></td></tr></table></figure><p>老實說這是一個很強大的Remote Desktop軟體,但是也就是因為他太強大了,所以大叔不是很喜歡,最大的心理障礙就是明明一台在NAT後面的機器,沒在NATD上打洞</p><p>也能透過code或是帳號連上,真的是強大無比的穿透跟連線能力..所以大叔不太敢用這個</p><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><h4 id="qv2ray-Windows-Linux"><a href="#qv2ray-Windows-Linux" class="headerlink" title="qv2ray - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/qv2ray.jpg" alt="download" width="50" /><a href="https://github.com/Qv2ray/Qv2ray">qv2ray</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade qv2ray <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S qv2ray</span><br></pre></td></tr></table></figure><p>要搭配<a href="https://github.com/v2ray/v2ray-core">V2ray-Core</a>服用,算是V2ray-Core的 GUI介面而已,用起來還算順利好用,介紹很少但卻是很重要的梯子</p><h2 id="System-Tools"><a href="#System-Tools" class="headerlink" title="System Tools"></a>System Tools</h2><h3 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h3><h4 id="Orchis-Windows"><a href="#Orchis-Windows" class="headerlink" title="Orchis - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/orchis-51s.png" alt="download" width="50" /><a href="http://www.eonet.ne.jp/~gorota/">Orchis</a> - Windows</h4><ul><li>Windows</li></ul><p>這個程式伴隨我很久了,基本上只能去<a href="http://www.eonet.ne.jp/~gorota/">他的網頁</a>下載回來用,非常日式風格的做法</p><h4 id="Gnome-Pie-Linux"><a href="#Gnome-Pie-Linux" class="headerlink" title="Gnome Pie - Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/1200px-Gnome-Pie_Logo.svg.png" alt="download" width="50" /><a href="http://schneegans.github.io/gnome-pie">Gnome Pie</a> - Linux</h4><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S gnome<span class="operator">-</span>pie</span><br></pre></td></tr></table></figure><p>這個算是我在找Orchis 在Linux上的替代品成果,實際用起來感覺還不錯</p><h3 id="Package-Manager"><a href="#Package-Manager" class="headerlink" title="Package Manager"></a>Package Manager</h3><h4 id="Chocolatey-Windows"><a href="#Chocolatey-Windows" class="headerlink" title="Chocolatey - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/download.png" alt="download" width="50" /><a href="https://chocolatey.org/">Chocolatey</a> - Windows</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">Set<span class="operator">-</span>ExecutionPolicy Bypass <span class="operator">-</span>Scope Process <span class="operator">-</span>Force; <span class="punctuation">[</span>System.Net.ServicePointManager<span class="punctuation">]</span><span class="operator">::</span>SecurityProtocol <span class="operator">=</span> <span class="punctuation">[</span>System.Net.ServicePointManager<span class="punctuation">]</span><span class="operator">::</span>SecurityProtocol <span class="operator">-</span>bor <span class="number">3072</span>; iex <span class="punctuation">(</span><span class="punctuation">(</span>New<span class="operator">-</span>Object System.Net.WebClient<span class="punctuation">)</span>.DownloadString<span class="punctuation">(</span><span class="string">&#x27;https://chocolatey.org/install.ps1&#x27;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>這個非常好用但是前提是你的網路要可以才好用</p><h4 id="yay-Archlinux-Manjaro"><a href="#yay-Archlinux-Manjaro" class="headerlink" title="yay - Archlinux &amp; Manjaro"></a><a href="https://github.com/Jguer/yay">yay</a> - Archlinux &amp; Manjaro</h4><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman <span class="operator">-</span>S yay</span><br></pre></td></tr></table></figure><p>yay在Manjaro裡面可以直接用上面的指令安裝,但是在Archlinux內是沒辦法的,只能用git安裝</p><h3 id="Termanial"><a href="#Termanial" class="headerlink" title="Termanial"></a>Termanial</h3><h4 id="Windows-Terminal-Windows"><a href="#Windows-Terminal-Windows" class="headerlink" title="Windows Terminal - Windows"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/WT.jpg" width="50" /><a href="https://github.com/microsoft/terminal">Windows Terminal</a> - Windows</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade microsoft<span class="operator">-</span>windows<span class="operator">-</span>terminal <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>這算是Microsoft最好用的terminal程式了,以前的cmd, powershell跟這個沒得比,要是安裝了WSL的話可以直接開linux terminal來用很方便</p><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/terminator.jpg" width="50" /><a href="https://terminator-gtk3.readthedocs.io/en/latest/">Terminator</a> - Linux</p><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S terminator</span><br></pre></td></tr></table></figure><p>其實大叔對於Linux的Console沒有太多要求,基本功能就夠用了不過看Chris Titus推薦他愛用這款就來跟風一下</p><h3 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h3><h4 id="VMware-Workstation-Windows-Linux"><a href="#VMware-Workstation-Windows-Linux" class="headerlink" title="VMware Workstation - Windows &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/vmware-workstation-logo-png.png" width="70" /><a href="https://www.vmware.com/products/workstation-pro.html">VMware Workstation</a> - Windows &amp; Linux</h4><ul><li>Windows</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade vmware<span class="operator">-</span>workstation <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S vmware<span class="operator">-</span>workstation</span><br></pre></td></tr></table></figure><p>VMware,在我心中統治著Virtual Machine環境的王者,簡單但是功能強大的VM,大叔連Server都用VMware ESXi來跑了,Windows下可以用Chocolatey安裝這件事也是導致大叔整個偏向Chocolatey使用的關鍵原因</p><h4 id="Qemu-Windwos-Linux"><a href="#Qemu-Windwos-Linux" class="headerlink" title="Qemu - Windwos &amp; Linux"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/qemu_logo.jpg" width="50" /><a href="https://www.qemu.org/">Qemu</a> - Windwos &amp; Linux</h4><ul><li>Windwos</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Powershell as Administrator with Chocolatey</span></span><br><span class="line">choco upgrade qemu <span class="operator">-</span>y</span><br></pre></td></tr></table></figure><p>GUI請使用<a href="https://qtemu.org/"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/QtEmu.jpg" width="100" /></a></p><ul><li>Linux(Manjaro)</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S qemu</span><br></pre></td></tr></table></figure><p>GUI請安裝<a href="https://virt-manager.org/"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/virt-m.png" width="50" /></a></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay <span class="operator">-</span>S libvirt</span><br></pre></td></tr></table></figure><p>說實話,會想碰qemu最主要的理由只有一個,他是目前看起來唯一可以做Portable Virtual Machine的程式,其他的基本上都需要安裝</p><p>關於Qemu的使用後面會專門寫一篇筆記</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大叔的碎碎念-Git的基本使用 &amp; Blog用的基本工具</title>
      <link href="/2020/07/11/git/"/>
      <url>/2020/07/11/git/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自從大叔換用Github+Markdown語法來寫Blog後,效率的確變好很多,但是苦於大叔對於git指令的不熟悉,做了很多很蠢的事情(像是把自己的Repo砍掉重練很多次)</p><p>Push的時候有分岐不會處理等等在熟悉使用Git的前輩眼中蠢到爆的各種,所以我就想花一個簡單的篇幅把自己會用上的Git指令以及針對這個Blog會常用到的指令都先寫成Script,以便日後使用</p><span id="more"></span><h1 id="基本寫作環境"><a href="#基本寫作環境" class="headerlink" title="基本寫作環境"></a>基本寫作環境</h1><p>基本上大叔的用法很單純,只是會在不同的機器上寫Blog而且沒辦法一次寫完一篇,所以會需要多地的機器可以無縫接軌的方式進行寫作(講多地其實也就是辦公室跟宿舍兩地而已)</p><ol><li>可以跑git的機器 - 大叔基本上就是公司機器上跑的Manjaro以及房間Windows裡的VM Manjaro</li><li>有Typora+PicGo - 因為Typora是跨平台的所以完全沒問題</li><li>有Github帳號 - 依照上一篇學習的結果,你會需要一個repo放整個站,一個repo是放網頁對外,還有一個repo是拿來當圖床用的,大叔後續應該還會再建一個repo用來放寫好可以通用的script</li></ol><p>濃縮起來說就是不管在哪裡只要能裝上git, Typora加上可以接上網路的環境大叔就可以寫</p><h1 id="工具Setup"><a href="#工具Setup" class="headerlink" title="工具Setup"></a>工具Setup</h1><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>基本上要先裝上Typora(本來都是用Remarkble寫的,但是後來用Typora上癮了就全部改這個)</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>我們可以用chocolatey來安裝很方便</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco upgrade typora -y</span><br></pre></td></tr></table></figure><p>我知道標準語法應該用<code>choco install</code>但是<code>choco upgrade</code>不僅可以拿來upgrade你的package,還可以把沒裝的裝上….所以只用這個指令其實就很方便了</p><h3 id="Linux-Manjaro"><a href="#Linux-Manjaro" class="headerlink" title="Linux(Manjaro)"></a>Linux(Manjaro)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -Syu typora</span><br></pre></td></tr></table></figure><p>Typora目前還是在AUR裡面所以要用<em>yay</em>來安裝</p><p>附帶一提雖然Typora支援很多Markdown的繪圖語法,但是因為大叔挑的Theme沒有支援所以當hugo生成靜態網頁之後並沒辦法看到圖,所以某程度上想要直接用Markdown語法的圖還不如直接去畫一個圖上傳到圖床上還比較簡單</p><h3 id="PicGO"><a href="#PicGO" class="headerlink" title="PicGO"></a>PicGO</h3><p>不管哪個平台的Typora都可以去</p><blockquote><p>File–&gt;Preferences…–&gt;Image裡的Image Uploader內選擇PicGo-Core</p></blockquote><p>它就會自動安裝PicGo,至於設定檔的部分,雖然官網都是教你使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></table></figure><p>讓他自動設定,但是..用這個方式裝的PicGo位置很不好找,加上使用Github當圖床即使用自動設定設定也是錯的…還不如直接用它的<em>Open Config File</em>把設定檔用下面的改一改貼進去</p><h4 id="PicGo-Config-file-for-Github"><a href="#PicGo-Config-file-for-Github" class="headerlink" title="PicGo Config file for Github"></a>PicGo Config file for Github</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;picBed&quot;: &#123;</span><br><span class="line">    &quot;current&quot;: &quot;github&quot;,</span><br><span class="line">    &quot;github&quot;: &#123;</span><br><span class="line">      &quot;repo&quot;: &quot;&lt;Github_User_name/Repo_Name&gt;&quot;,</span><br><span class="line">      &quot;branch&quot;: &quot;master&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;&lt;Your Github Token&gt;&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;&lt;your path under your Repo&gt;&quot;,</span><br><span class="line">      &quot;customUrl&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;picgoPlugins&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&lt;Github_User_name&#x2F;Repo_Name&gt; - 填寫你的帳號&#x2F;你的倉庫名稱<br><Your Github Token> - 你的Github Token用來Access你的Github API<br><your path under your Repo> - 看你有沒有想要建個目錄</p></blockquote><p>基本上這個Plug-in功能很強大,可以把你Local的圖檔直接上傳到你的圖床,同時幫你把連結改成從圖床連結,這樣就讓Blog裡面用到的圖檔都可以輕鬆的上傳並且設定的好好的不過同名字的檔案不能複寫就是了所以有時候會失敗的話看一下是不是檔名重複了改一下就好了</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://gitbook.tw/">TW git book</a></p><p><a href="https://ihower.tw/git/remote.html">ihower 的 Git 教室</a></p><h3 id="常用語法"><a href="#常用語法" class="headerlink" title="常用語法"></a>常用語法</h3><ul><li>git clone - 在什麼都沒有的地方下載整個git repo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/&lt;user_name&gt;/&lt;repo_name&gt;.git</span><br></pre></td></tr></table></figure><p>由於這個教學上拿github來當作Blog使用時會在一個Git內包含不只一個submodule,所以要加上*–recursive*參數確保會連submodule一起下載</p><ul><li>git config - 這是用來設定git的環境的, 加上*–global*參數就是用來進行全域定義用的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global pull.ff only</span><br></pre></td></tr></table></figure><p>由於大叔都是自己寫,所以基本上所有的版本都不會出現分歧,這個是指定merge的時候都用FF模式進行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&lt;Github_account&gt;&quot;</span><br></pre></td></tr></table></figure><p>這行是用來定義你的Git帳號的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;&lt;your_Email_address&gt;&quot;</span><br></pre></td></tr></table></figure><p>這是用來定義你的Email</p><ul><li>git branch - 這是用來建立分支或是查詢分支的,在大叔的應用方面基本上就是用來確認有沒有亂七八糟的分支導致update不順利</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>這是可以看你有那些分支詳細可以看<a href="https://gitbook.tw/">台灣的git book</a></p><ul><li>git checkout - 切換分支用的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;repo_you_want&gt;</span><br></pre></td></tr></table></figure><p>將目前的分支切換成<repo_you_want></p><ul><li>git pull - 從遠端抓下來同步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>  從origin&#x2F;master抓下來同步,等同於<em>git fetch</em>+<em>git merge origin&#x2F;master</em></p><ul><li>git push - git pull的相反</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/master</span><br></pre></td></tr></table></figure><p>從本地推上origin&#x2F;master是發布以及upload主要的指令</p><h1 id="寫成script"><a href="#寫成script" class="headerlink" title="寫成script"></a>寫成script</h1><h2 id="自動下載讓本地先跟遠端倉庫同步-減少分支產生"><a href="#自動下載讓本地先跟遠端倉庫同步-減少分支產生" class="headerlink" title="自動下載讓本地先跟遠端倉庫同步(減少分支產生)"></a>自動下載讓本地先跟遠端倉庫同步(減少分支產生)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[0;32mSync your Local git folder with github\033[0m&quot;</span><br><span class="line"></span><br><span class="line">#pull data from github</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">#update theme</span><br><span class="line"></span><br><span class="line">git submodule update --remote --merge</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自動上傳更新網頁與備份文件"><a href="#自動上傳更新網頁與備份文件" class="headerlink" title="自動上傳更新網頁與備份文件"></a>自動上傳更新網頁與備份文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[0;32mDeploying updates to GitHub...\033[0m&quot;</span><br><span class="line"></span><br><span class="line"># Build the project.</span><br><span class="line"></span><br><span class="line">hugo </span><br><span class="line"></span><br><span class="line"># Go To Public folder</span><br><span class="line"></span><br><span class="line">cd public</span><br><span class="line"></span><br><span class="line"># Add changes to git.</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># Commit changes.</span><br><span class="line"></span><br><span class="line">msg=&quot;rebuilding site `date`&quot;</span><br><span class="line">if [ $# -eq 1 ]</span><br><span class="line">  then msg=&quot;$1&quot;</span><br><span class="line">fi</span><br><span class="line">git commit -m &quot;$msg&quot;</span><br><span class="line"></span><br><span class="line"># Push source and build repos.</span><br><span class="line"></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"># Come Back up to the Project Root</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"># Commit source repository changes</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;$msg&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>git是個功能很強大的版本控制軟體,搭配佛心的廠商&#x3D;無敵好用的東西,</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企鵝育成-Archlinux Gateway-彙整篇</title>
      <link href="/2020/07/07/archlinux-server-install/"/>
      <url>/2020/07/07/archlinux-server-install/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>換了新的Blog但是還沒想到內容要寫什麼,所以就想說先把之前寫的筆記再整理一次做個精簡的增補版(其實就是把一些後來發現不好用的部份拿掉或改掉)</p><p>並且練習用Github來管理大叔自己寫的script,不過因為很多是私人性質的所以應該會放在不公開的Repo裡面然後另外寫一個公開版的放在外面供有需要的人使用</p><span id="more"></span><h1 id="期望環境"><a href="#期望環境" class="headerlink" title="期望環境"></a>期望環境</h1><h2 id="基本條件"><a href="#基本條件" class="headerlink" title="基本條件"></a>基本條件</h2><p>會使用Archlinux而非使用大叔長年使用的FreeBSD來作為一個網路環境的主要Gateway的最大因素就是V2Ray+iptables的翻牆組合(單看V2ray的話其實FreeBSD也可以裝啦,但是沒有iptables),從網路上看到的所有教範幾乎清一色都是這個搭配,由於大叔也不是什麼真正的高手所以就隨波逐流挑個看的順眼的Linux destro來使用,在這裡可能有人會問為什麼大叔不乾脆就跟教範一樣直接用Ubuntu就好了,在這裡只能說因為大叔還是有點傲驕的….</p><p>其實本來是想更極端用Gentoo的,但是過去那個光安裝系統就花了我三天(因為一堆compile)的慘痛過去(那時候機器不夠力也是啦)所以就退而求其次的改用幾乎都是binary安裝的Archlinux</p><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>基本上最大的期望就是打造一個不須額外做什麼就可以跟在台灣家裡類似的網路環境,基於此一個大型的NAT內部網路以及從Gateway端就把牆翻好就是最基本中的基本要求</p><h2 id="規劃藍圖"><a href="#規劃藍圖" class="headerlink" title="規劃藍圖"></a>規劃藍圖</h2><p><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/Network_top.png" alt="Network_top"></p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="基本工具-設備"><a href="#基本工具-設備" class="headerlink" title="基本工具&amp;設備"></a>基本工具&amp;設備</h2><h3 id="硬體"><a href="#硬體" class="headerlink" title="硬體"></a>硬體</h3><ul><li>一台可以跑VMware ESXi的Server硬體</li><li>一台符合網路需求的Wireless AP</li></ul><h3 id="軟體工具"><a href="#軟體工具" class="headerlink" title="軟體工具"></a>軟體工具</h3><ul><li><a href="https://www.vmware.com/products/esxi-and-esx.html">VMware ESXi</a> 5.5 or 5.0 - (主要是因為client的關係,其實也可以用最新的版本)或是其他類型的VM例如Zen之類的</li><li><a href="https://www.archlinux.org/">Archlinux install Image</a> - 這個是主角類似<del>MS-06F</del> RX-78之於初代鋼彈</li><li><a href="https://players.brightcove.net/1534342432001/Byh3doRJx_default/index.html?videoId=2011143030001">vSphere Client</a> - 這個是client來控制VMware ESXi</li></ul><p>現在VMWare將Esxi改為<a href="https://www.vmware.com/products/vsphere-hypervisor.html">vSphere Hypervisor</a>功能更多但是不確定他的費用以及大叔沒有真的用過,所以只是先放著當參考<br>若是未來有機會架設新的VMware server的話倒是可以試試看</p><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><p>表示尊重,我還是把先前寫的時候參考的文件都列在這裡</p><ul><li><a href="https://wiki.archlinux.org/">Arch Wiki</a> - 非常詳細的Arch Wiki幾乎所有Archlinux的設定都有相關說明,而且很多都有中文翻譯非常好用</li><li><a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E6%AD%A3%E9%AB%94%E4%B8%AD%E6%96%87">Archlinux Install Guide</a> - 這是中文的官方安裝說明文件,算是安裝的最基礎,實際上就是Arch Wiki的一部分</li><li><a href="https://mirokaku.github.io/Blog/2016/ArchLinux-install-notes/">Miro’s Blog</a> - 這份Archlinux的安裝筆記寫得很不錯</li></ul><p>另外一個參考的網頁,不知道為什麼這次整理的時候消失了…所以我就不再放上去,但是還是很感謝前輩們的努力與分享</p><h1 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>由於大叔<del>是個懶鬼</del>這個主要是拿來安裝Gateway用的所以需要盡可能安裝中不要東查西看的,,縱使前面列了一堆安裝的重點,最終還是要回到用簡易的安裝script來代替大叔在網路不夠好用一切從簡的條件下進行安裝</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>因為Arch的安裝流程中會因為chroot的關係無法一個script跑完所有的動作,而大叔也沒高手到chroot的同時還可以自動跑另一個script,所以script分兩次手動輸入</p><p>開機後第一個scrip</p><pre><code>zsh &lt;(curl -L -s http://my_home.or.any.vps/arch-install-before-chroot.sh)</code></pre><p>他會自動跑到chroot後停住,接著在用第二劑</p><pre><code>zsh &lt;(curl -L -s http://my_home.or.any.vps/arch-install--after-chroot.sh)</code></pre><p>這兩個script的執行方式說穿了就是利用<em>curl</em>指令讓shell直接執行在別的web server上的script<br>這在Live環境下要跑script來說是個相對方便的作法,但是這就需要事先準備可以放script的web server並且還得擔心script內一些比較敏感的安全性問題,不能說是個萬無一失的作法, 所以大叔的作法是把script customize後先放在私密的地方,要用的時候放到VPS或是其他server上跑完後就delete<br>這是比較麻煩的</p><h2 id="Script說明"><a href="#Script說明" class="headerlink" title="Script說明"></a>Script說明</h2><h3 id="顏色定義"><a href="#顏色定義" class="headerlink" title="顏色定義"></a>顏色定義</h3><p>ASCII有顏色的定義如下</p><table><thead><tr><th>Color</th><th>Code</th><th>Color</th><th>Code</th></tr></thead><tbody><tr><td>Black</td><td>0;30</td><td>Dark Gray</td><td>1;30</td></tr><tr><td>Red</td><td>0;31</td><td>Light Red</td><td>1;31</td></tr><tr><td>Green</td><td>0;32</td><td>Light Green</td><td>1;32</td></tr><tr><td>Brown&#x2F;Orange</td><td>0;33</td><td>Yellow</td><td>1;33</td></tr><tr><td>Blue</td><td>0;34</td><td>Light Blue</td><td>1;34</td></tr><tr><td>Purple</td><td>0;35</td><td>Light Purple</td><td>1;35</td></tr><tr><td>Cyan</td><td>0;36</td><td>Light Cyan</td><td>1;36</td></tr><tr><td>Light Gray</td><td>0;37</td><td>White</td><td>1;37</td></tr></tbody></table><p>有需要的同學可以依照個人喜好變更以下Script內的顯示顏色</p><h3 id="Scrip內容說明"><a href="#Scrip內容說明" class="headerlink" title="Scrip內容說明"></a>Scrip內容說明</h3><p>Script內的一些基本解說</p><pre><code>echo -e &quot;&lt;what ever you like&gt;&quot;</code></pre><p>這個語法是在跑Script的時候想要顯示在螢幕上的字串,照上面打的話會出現<what ever you like></p><pre><code>變數=XYZ$&#123;變數&#125;</code></pre><p>這個語法主要是搭配最前面的變數定義,與到重複會使用的就用這種方式來省字數,在下面我主要是把顏色設定為變數,這樣只要你不想搞七彩字串的話只要改這裡就好了</p><p>Update7&#x2F;12: 大叔把其中非通用的部分改成輸入型的了,所以這一份script後面可以放到github上面供要用的人直接使用</p><h4 id="arch-install-before-chroot-sh"><a href="#arch-install-before-chroot-sh" class="headerlink" title="arch-install-before-chroot.sh"></a>arch-install-before-chroot.sh</h4><pre><code>#-------------------------------------------------------------------------------------------------------------------------#(從Iso boot後直到完成change root內所有安裝/調整動作)#-------------------------------------------------------------------------------------------------------------------------#!/bin/zsh#Parmeter DefineCOLOR=&#39;\033[1;35m&#39;NC=&#39;\033[0m&#39;#start ntpecho -e &quot;$&#123;COLOR&#125;Starting NTP Service$&#123;NC&#125;&quot;timedatectl set-ntp trueecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Modify Mirrorlist to setting countryecho -e &quot;$&#123;COLOR&#125;Starting Modify mirrorlist to China servers$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR&#125;Please Enter which Country you like(ie. United_State or China)$&#123;NC&#125;&quot;read COUNTRYsed -i &#39;/Score/&#123;/$COUNTRY/!&#123;n;s/^/#/&#125;&#125;&#39; /etc/pacman.d/mirrorlistecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Fdiskecho -e &quot;$&#123;COLOR&#125;Partition your HDD please create 1 data as sda1 and 1 swap as sda2$&#123;NC&#125;&quot;fdisk /dev/sdaecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Formatecho -e &quot;$&#123;COLOR&#125;Format /dev/sda1 as EXT4 format$&#123;NC&#125;&quot;mkfs.ext4 /dev/sda1echo -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Format /dev/sda2 as Linux Swap$&#123;NC&#125;&quot;mkswap /dev/sda2echo -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Mount /dev/sda1 to /mnt$&#123;NC&#125;&quot;mount /dev/sda1 /mntecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Mount Swap$&#123;NC&#125;&quot;swapon /dev/sda2echo -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Installecho &quot;$&#123;COLOR&#125;Starting Install Archlinux into /mnt$&#123;NC&#125;&quot;pacstrap /mnt base vim zsh curlecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#fstabecho &quot;$&#123;COLOR&#125;Starting Gernerate fstab$&#123;NC&#125;&quot;genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstabecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Copy Zshecho &quot;$&#123;COLOR&#125;Starting Copy ZSH setting file to new Archlinux$&#123;NC&#125;&quot;cp -Rv /etc/zsh /mnt/etc/echo -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;# Change rootecho -e &quot;$&#123;COLOR&#125;Change root to new Archlinux$&#123;NC&#125;&quot;arch-chroot /mnt /bin/zsh#-------------------------------------------------------------------------------------------------------------------------#(以下是什麼都弄完了只剩下重開機)#-------------------------------------------------------------------------------------------------------------------------echo -e &quot;$&#123;COLOR&#125;Finished Installation, will reboot, Good luck$&#123;NC&#125;&quot;# Rebootecho -e &quot;$&#123;COLOR&#125;Rebooting...$&#123;NC&#125;&quot;reboot</code></pre><p>基本上這個Script除了分割的選項可能需要調整以外其實都沒什麼好動的,基於我這台都是拿來當VM上的Gateway,自然沒必要把分割弄得很麻煩,有其他需要的同學可以參照官方的安裝說明調整你想要的分割設定</p><p>預設的分割結果為</p><pre><code>/dev/sda1為主要資料/dev/sda2為Swap</code></pre><h4 id="arch-install-after-chroot-sh"><a href="#arch-install-after-chroot-sh" class="headerlink" title="arch-install-after-chroot.sh"></a>arch-install-after-chroot.sh</h4><p>這份可以說是主要的安裝Script,內容有很多需要事先修改與設定的,我盡可能的把他做成變數放在最前面</p><pre><code>#-------------------------------------------------------------------------------------------------------------------------#(所有動作都是在change root內完成的)#-------------------------------------------------------------------------------------------------------------------------#!/bin/zsh#Parameter DefineCOLOR=&#39;\033[1;34m&#39;NC=&#39;\033[0m&#39;#update packageecho -e &quot;$&#123;COLOR&#125;Start Pacman Update$&#123;NC&#125;&quot;pacman -Syuuecho -e &quot;$COLOR&#125;Finished.$&#123;NC&#125;&quot;#locale-gen to add en_US &amp; zh_TWecho -e &quot;$&#123;COLOR&#125;Setting local file$&#123;NC&#125;&quot;echo &quot;en_US.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho &quot;zh_TW.UTF-8 UTF-8&quot; &gt;&gt; /etc/locale.genecho -e &quot;#&#123;COLOR&#125;Generate locale.conf$&#123;NC&#125;&quot;locale-genecho -e &quot;$&#123;COLOR&#125;Setting locale.conf$&#123;NC&#125;&quot;echo LANG=en_US.UTF-8 &gt; /etc/locale.confexport LANG=en_US.UTF-8echo -e &quot;$COLOR&#125;Finished.$&#123;NC&#125;&quot;#change Timezone to CTS(Taipei)echo -e &quot;$&#123;COLOR&#125;Change Time Zone to Asia/Taipei &amp; Set Hardware time$&#123;NC&#125;&quot;ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtimehwclock --systohc --utcecho -e &quot;$COLOR&#125;Finished.$&#123;NC&#125;&quot;#Networkecho -e &quot;$&#123;COLOR&#125;Setting &#39;Gateway&#39; as hostname$&#123;NC&#125;&quot;echo Gateway &gt; /etc/hostnameecho &quot;127.0.0.1 localhost Gateway&quot; &gt;&gt; /etc/hostsecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Define your NIC by Mac address$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR&#125;Please Enter your MAC address for your outside NIC$&#123;NC&#125;&quot;read OUTSIDEecho &#39;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;$OUTSIDE&quot;, NAME=&quot;EXT0&quot;&#39; &gt; /etc/udev/rules.d/10-network.rulesecho -n &quot;$&#123;COLOR&#125;Please Enter your MAC address for your inside NIC$&#123;NC&#125;&quot;read INSIDEecho &#39;SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTR&#123;address&#125;==&quot;$INSIDE&quot;, NAME=&quot;INT0&quot;&#39; &gt;&gt; /etc/udev/rules.d/10-network.rulesecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Define your PPPOE Setting$&#123;NC&#125;&quot;echo &quot;Description=&#39;EXT0 PPPOE SETTING&#39;&quot; &gt; /etc/netctl/EXT0.serviceecho &quot;Interface=EXT0&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;Connection=pppoe&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR&#125;Please Enter your PPPOE acount:$&#123;NC&#125;&quot;read ISPecho &quot;User=&#39;$&#123;ISP&#125;&#39;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -n &quot;$&#123;COLOR&#125;Please Enter your PPPOE password$&#123;NC&#125;&quot;read ISPPWecho &quot;Password=&#39;$&#123;ISPPW&#125;&#39;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;ConnectionMode=&#39;persist&#39;&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho &quot;UsePeerDNS=false&quot; &gt;&gt; /etc/netctl/EXT0.serviceecho -e &quot;$&#123;COLOR&#125;Enable EXT0&#123;NC&#125;&quot;netctl enable EXT0.serviceecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Define your Private Gateway IP for INT0$&#123;NC&#125;&quot;echo &quot;Description=&#39;INT0 IP SETTING&#39;&quot; &gt; /etc/netctl/INT0.serviceecho &quot;Interface=INT0&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;Connection=ethernet&quot; &gt;&gt; /etc/netctl/INT0.serviceecho &quot;IP=static&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -n &quot;$&#123;COLOR&#125;Please Enter your Gateway IP address:$&#123;NC&#125;&quot;read GATEWAYIPecho &quot;Address=(&#39;$&#123;GATEWAYIP&#125;/24&#39;)&quot; &gt;&gt; /etc/netctl/INT0.serviceecho -e &quot;$&#123;COLOR&#125;Enable INT0$&#123;NC&#125;&quot;netctl enable INT0.serviceecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Initramfsecho -e &quot;$&#123;COLOR&#125;Initramfs your Linux$&#123;NC&#125;&quot;mkinitcpio -p linuxecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Root Passwordecho -e &quot;$&#123;COLOR&#125;Set your root password$&#123;NC&#125;&quot;passwdchsh -s /bin/zshecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#add Userecho -e &quot;$&#123;COLOR&#125;Add user account:$&#123;NC&#125;&quot;echo -n &quot;$What ID you want:$&#123;NC&#125;&quot;read YOURIDuseradd -m -g root -s /bin/zsh $&#123;YOURID&#125;passwd $&#123;YOURID&#125;echo -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Add $YOURID into sudo list$&#123;NC&#125;&quot;pacman -Syu sudoecho &quot;$YOURID ALL=(ALL) ALL&quot; &gt;&gt; /etc/sudoers#install Toolsecho -e &quot;$&#123;COLOR&#125;Install Packages Microcode/Bootloader - grub/dnsutils/open-vm-tools/v2ray$&#123;NC&#125;&quot;pacman -Sy intel-ucode grub dnsutils open-vm-tools v2ray screenecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#install Bootloaderecho -e &quot;$&#123;COLOR&#125;Install grub Boot Loader into /dev/sda1$&#123;NC&#125;&quot;grub-install --target=i386-pc /dev/sda1grub-mkconfig -o /boot/grub/grub.cfgecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#V2ray config.json getecho -e &quot;$&#123;COLOR&#125;Fetch V2ray config.json and replace$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR&#125;Please Enter where you put the file:$&#123;NC&#125;&quot;read linkecho -n &quot;$&#123;COLOR&#125;Please Enter the file name:$&#123;NC&#125;&quot;read conffilewget $Link/$conffilemv -f  ./$conffile /etc/v2ray/config.jsonecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Set Natecho -e &quot;$&#123;COLOR&#125;Open package fowrading$&#123;NC&#125;&quot;echo &quot;net.ipv4.ip_forward=1&quot; &gt; /etc/sysctl/30-ipforward.confecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Create Iptable start script$&#123;NC&#125;&quot;echo -n &quot;$&#123;COLOR&#125;Please Enter your V2ray Server IP:$&#123;NC&#125;&quot;read VPSIPecho &quot;#Re-direction TCP&quot; &gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -N V2RAY&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 172.16.0.0/12-j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -d $&#123;VPSIP&#125; -j RETURN&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A PREROUTING -p tcp -j V2RAY&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot; &quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;#Natd&quot; &gt;&gt; /etc/iptables/iptable.shecho &quot;iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE&quot; &gt;&gt; /etc/iptables/iptable.shchmod 750 /etc/iptables/iptable.shecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;echo -e &quot;$&#123;COLOR&#125;Create Systemd Service$&#123;NC&#125;&quot;echo &quot;[Unit] &gt; /etc/systemd/system/iptables.serviceecho &quot;Description=iptables rules for V2Ray Daemon &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Service]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;ExecStart=/bin/sh /etc/iptables/iptable.sh&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot; &quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;[Install]&quot; &gt;&gt; /etc/systemd/system/iptables.serviceecho &quot;WantedBy=multi-user.target&quot; &gt;&gt; /etc/systemd/system/iptables.servicesystemctl enable iptables.serviceecho -e &quot;$&#123;COLOR&#125;Finished.$&#123;NC&#125;&quot;#Finished installsyncsyncsyncexit</code></pre><p>這份Scrip有以下假設前提</p><ol><li>這台機器是Intel CPU</li><li>V2ray的config.json已經提前寫好了,並且是配合V2ray 4.20版的DNS功能,可以取消Dnsmasq的安裝與設定(變得更加簡潔了）</li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>在原來的Blog內我寫了兩篇關於這個Gateway的自動安裝,實際生活上我也用了幾次算是有真的實驗過得,這個script其實可以直接拿回去把變數改一改就可以直接用了</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逃出GFW - V2ray Sever Setup匯總</title>
      <link href="/2020/07/07/v2ray-sever-setup/"/>
      <url>/2020/07/07/v2ray-sever-setup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>V2ray,這可以說是大叔開始寫Blog的最主要原因,因為這是一個住在強國才需要的被特化的技能,一般來說技術相關的文件一般都是英文的但恰恰好只有翻牆相關的文件全部都是簡體中文的…</p><p>因為這個區塊的知識相當偏門,所以大叔才燃起要把自己研讀過得方式與結果記錄下來以免每次都要重新查詢資料,順便可以的話把這些作法做成自動化處理減少相對應的工時</p><p>這篇文稿原來同名稱應該是把原先寫到update IV版的VPS V2ray Server架設與設定做個彙整, 但是仔細一想似乎最細膩的設定部份大叔都沒講到(因為V2ray官網上面講得很清楚呀,加上大叔基本上寫好的很難會重頭再來一次基本上都是直接拿來用),所以就順便把設定的部份順便寫一點,不過還是官網寫的會比較好唷<br>.</p><span id="more"></span><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h2><p>這個東西雖然說是很多人可能會租來用但是特化拿來作為翻牆的大概只有天朝子民才會這樣幹,所以一樣可以在網路上找到很多評比,對大叔來說因為長期的人生中都認為網路上的自由不是理所當然的事情嗎？的想法所以在VPS的挑選上就會偏向小氣,以最便宜,堪用來進行選擇,但是實際上就是挑全場最低價格,機器性能不重要(但是KVM卻很重要)…</p><ul><li><a href="https://anynode.net/">Anynode</a> - 這是大叔主力的機台,用的是一年20USD的方案,每個月有500GB的流量作為房間裡的主要VPS來說算是夠用的</li><li><a href="https://hosteons.com/">Hostenos</a> - 這是一個便宜又大碗的選項,兩年21USD,沒有流量限制有的只有速度上限100M這個問題,非常適合想要佛心分享,或是無視流量隨便狂用的選項(500GB自己一個人用某程度上也是無視流量隨便用….)</li><li><a href="https://bandwagonhost.com/">Bandwagonhost</a> - 搬瓦工這個其實是個很方便的選擇,他們早期的VPS就有特別寫了*一鍵安裝S<del>hadow</del>S<del>ocks</del><em>的服務,近來還提供了</em><a href="https://bwgjms.com/post/how-to-buy-justmysocks/">Just my socks</a>*服務,雖然比較離題但是沒有打算自己弄的人可以考慮這種方案比較省事</li></ul><h2 id="Linux-Destro-for-VPS"><a href="#Linux-Destro-for-VPS" class="headerlink" title="Linux Destro for VPS"></a>Linux Destro for VPS</h2><p>因為挑的都是廉價的VPS主機,自然就不太可能跑什麼有GUI的或是Windows,只能跑很單純的CLI界面的OS,其中大概最好上手的是<del>FreeBSD</del>Linux了,但是青菜蘿菠各有所好,只能請各位在VPS廠商提供的範圍內挑一個自己指令比較熟悉的<br>因為大叔挑選的關係,基本上都是挑使用agt的package manager的系統像是Ubuntu or Debain<br>不過大叔被Arch洗腦過後特別喜歡滾動式更新的系統(其實為了系統穩定性應該反過來的)<br>所以這裡都是用Debain做為基礎,使用不同Destro的人…就請自己腦內轉換指令囉</p><h2 id="Domain-Optional"><a href="#Domain-Optional" class="headerlink" title="Domain(Optional)"></a>Domain(Optional)</h2><p>這個是你有打算使用Websocket+TLS+Web方式進行偽裝時會需要的,嚴格意義上還需要申請SSL憑證,但是SSL的部分可以讓Caddy來幫忙處理所以算是很簡單,只需要自己準備一個Domain,不管是免費的或是買的Domain都可以</p><h2 id="Cloudflare帳號-Optional"><a href="#Cloudflare帳號-Optional" class="headerlink" title="Cloudflare帳號(Optional)"></a>Cloudflare帳號(Optional)</h2><p>這個是你打算在websocket+TLS+Web條件下再加上一層偽裝賭其無法把你連往VPS web port的路全斷了時才需要的,原理就是利用CDN的轉發功能達到繞過去保持連線的結果,主要是賭Cloudflare這麼大的公司不會所有的IP都被擋,當然若是你不喜歡Cloudflare,也可以使用其他的CDN,只不過Cloudflare的免費帳號這點還是蠻誘人的</p><p>最後掛越多偽裝連線速度就越慢這是沒辦法的,各位要依照自己的需求在速度與可靠度上做取捨跟平衡</p><h2 id="預計使用工具"><a href="#預計使用工具" class="headerlink" title="預計使用工具"></a>預計使用工具</h2><ul><li>Browser - 需要用瀏覽器來操作VPS的初始設定</li><li>Putty or Linux Terminal - 簡單的說就是一個用順手的SSH client</li><li>vi or vim or any editor you like - 很多編輯需求,因為我們幾乎不會抓下來在GUI環境下編輯所以最好使用CLI的文字編輯器,大叔特別偏好vi系…</li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><p><a href="https://my.freenom.com/">freenom</a> - 可以弄到免費Domain的地方</p><p><a href="https://guide.v2fly.org/advanced/wss_and_web.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE">新V2Ray白話文指南</a> - 算是V2ray的官方說明網站,內容<del>淺顯</del>易懂</p><p><a href="https://caddyserver.com/docs/getting-started">Caddy的說明</a> - Caddy V2的官方說明網頁,相較V1有著更詳細的設定檔說明與指令說明,整個Caddy V2唯一比V1差的只缺那個自動安裝的script </p><p><a href="https://blog.sprov.xyz/2019/03/11/cdn-v2ray-safe-proxy/">博客-sprov</a></p><p><a href="https://eveaz.com/1094.html">那束陽光</a></p><p><a href="https://github.com/233boy/v2ray/wiki/%E4%BD%BF%E7%94%A8Cloudflare%E4%B8%AD%E8%BD%ACV2Ray%E6%B5%81%E9%87%8F">233boy</a></p><h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="系統基本安裝"><a href="#系統基本安裝" class="headerlink" title="系統基本安裝"></a>系統基本安裝</h2><ol><li><p>在Browser的VPS管理界面下挑選你喜歡的Linux Destro進行系統安裝,大叔選的是Debain.</p></li><li><p>裝好之後設定你的SSH(可以用網頁terminal或是什麼設定都可以)</p></li><li><p>用你喜歡的SSH Cliet登入你的VPS</p></li><li><p>修改密碼以便於日後登入管理</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure></li><li><p>更新系統</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#Debain or Ubuntu</span><br><span class="line">sudo apt update &amp;&amp; apt upgrade</span><br><span class="line"></span><br><span class="line">#Archlinux</span><br><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure><ol start="6"><li><p>安裝必要的程式 - Vim, V2ray, Caddy, </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Debain or Ubuntu</span><br><span class="line">sudo apt install vim</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br><span class="line">echo &quot;deb [trusted=yes] https://apt.fury.io/caddy/ /&quot; | sudo tee -a /etc/apt/sources.list.d/caddy-fury.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install caddy</span><br><span class="line"></span><br><span class="line">#Archlinux</span><br><span class="line">sudo pacman -Sy yay</span><br><span class="line">yay -Sy vim v2ray caddy2 </span><br></pre></td></tr></table></figure></li></ol><p>在寫原來的Blog的時候Caddy還沒正式改成Caddy2,但是因為caddy官網宣稱Caddy V1現在只是limited support所以update到V2也是遲早的事情</p><p>  看起來就是Arch比較簡潔漂亮(單純的偏心)</p><h3 id="自動安裝Script-Apt系-Debain-Ubuntu"><a href="#自動安裝Script-Apt系-Debain-Ubuntu" class="headerlink" title="自動安裝Script - Apt系(Debain&#x2F;Ubuntu)"></a>自動安裝Script - Apt系(Debain&#x2F;Ubuntu)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#!bash</span><br><span class="line"></span><br><span class="line">#變數定義</span><br><span class="line">COLOR=&#x27;\033[1;35m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27;</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Update Ubuntu System$&#123;NC&#125;&quot;</span><br><span class="line">apt-get -y update</span><br><span class="line">apt-get -y upgrade</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install V2ray$&#123;NC&#125;&quot;</span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Set Auto Monthy Update V2ray$&#123;NC&#125;&quot;</span><br><span class="line">echo &#x27;59 3    1 * *   root    bash &lt;(curl -L -s https://install.direct/go.sh)&#x27;  &gt;&gt; /etc/crontab</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install BBR$&#123;NC&#125;&quot;</span><br><span class="line">bash &lt;(curl -L -s https://github.com/teddysun/across/raw/master/bbr.sh)</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install Caddy$&#123;NC&#125;&quot;</span><br><span class="line">wget &quot;https://github.com/caddyserver/caddy/releases/download/v2.1.1/caddy_2.1.1_linux_amd64.deb&quot;</span><br><span class="line">dpkg -i ./caddy_2.1.1_linux_amd64.deb&quot;</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Setup  Caddy$&#123;NC&#125;&quot;</span><br><span class="line">mkdir /etc/caddy</span><br><span class="line">chown -R root:www-data /etc/caddy</span><br><span class="line">mkdir /etc/ssl/caddy</span><br><span class="line">chown -R www-data:root /etc/ssl/caddy</span><br><span class="line">chmod 0770 /etc/ssl/caddy</span><br><span class="line">mkdir /var/www</span><br><span class="line">chown www-data:www-data /var/www</span><br><span class="line">ufw allow http</span><br><span class="line">ufw allow https</span><br><span class="line">apt install libcap2-bin</span><br><span class="line">setcap cap_net_bind_service=+ep /usr/local/bin/caddy</span><br><span class="line">echo &#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27; | sudo tee /var/www/index.html</span><br><span class="line"></span><br><span class="line">#Making Caddyfile for Caddy2</span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Configure your Caddy setting$&#123;NC&#125;&quot;</span><br><span class="line">echo -n &quot;Please Enter your Domain name:&quot;</span><br><span class="line">read domain</span><br><span class="line">echo &quot;$domain&quot; &#123; &gt; /etc/caddy/Caddyfile</span><br><span class="line">echo tls &#123; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo &quot;protocols tls1.2 tls1.3&quot; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo curves x25519 &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo @v2ray_websocket &#123; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo path /ray &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo header Connection *Upgrade* &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo header Upgrade websocket &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo -n &quot;Please Enter your V2Ray port&quot;</span><br><span class="line">read PORT</span><br><span class="line">echo reverse_proxy @v2ray_websocket localhost:$PORT &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/Caddyfile</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Setup V2ray$&#123;NC&#125;&quot;</span><br><span class="line">echo -n &quot;$&#123;COLOR&#125;Please Enter where you put the file:$&#123;NC&#125;&quot;</span><br><span class="line">read link</span><br><span class="line">echo -n &quot;$&#123;COLOR&#125;Please Enter the file name:$&#123;NC&#125;&quot;</span><br><span class="line">read conffile</span><br><span class="line">wget $Link/$conffile</span><br><span class="line">mv -f  ./$conffile /etc/v2ray/config.json</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Please enter information as required, and press Ctl+c when Caddy running well$&#123;NC&#125;&quot;</span><br><span class="line">caddy run -conf=/etc/caddy/Caddyfile</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Rebooting your VPS for normal operation$&#123;NC&#125;&quot;</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="自動安裝Script-Pacman-yay系-Archlinux"><a href="#自動安裝Script-Pacman-yay系-Archlinux" class="headerlink" title="自動安裝Script - Pacman&#x2F;yay系(Archlinux)"></a>自動安裝Script - Pacman&#x2F;yay系(Archlinux)</h3><p>使用前要先安裝並設定sudo後才能使用,我後面會把這一段加到Archlinux的安裝設定script內, 相關的方法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu sudo</span><br><span class="line">echo &lt;USER_NAME&gt; ALL=(ALL) ALL &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><p>這個script要用root跑,中間會要你輸入一個none root的帳號就是你有放進sudoer裡的帳號<br>因為Archlinux不能用root跑yay才會這麼麻煩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#!bash</span><br><span class="line"></span><br><span class="line">#變數定義</span><br><span class="line">COLOR=&#x27;\033[1;35m&#x27;</span><br><span class="line">NC=&#x27;\033[0m&#x27;</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Update Arclinux System$&#123;NC&#125;&quot;</span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install yay for Archlinux$&#123;NC&#125;&quot;</span><br><span class="line">git clone https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Need None Root account to run yay$&#123;NC&#125;&quot;</span><br><span class="line">echo -n &quot;Please Enter your none root account&quot;</span><br><span class="line">read YOURID</span><br><span class="line">su $YOURID</span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install V2ray, Caddy2$&#123;NC&#125;&quot;</span><br><span class="line">yay -Syu v2ray caddy2</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Install BBR$&#123;NC&#125;&quot;</span><br><span class="line">bash &lt;(curl -L -s https://github.com/teddysun/across/raw/master/bbr.sh)</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Setup  Caddy$&#123;NC&#125;&quot;</span><br><span class="line">mkdir /etc/caddy</span><br><span class="line">chown -R root:http /etc/caddy</span><br><span class="line">mkdir /etc/ssl/caddy</span><br><span class="line">chown -R http:root /etc/ssl/caddy</span><br><span class="line">chmod 0770 /etc/ssl/caddy</span><br><span class="line">mkdir /var/www</span><br><span class="line">chown http:http /var/www</span><br><span class="line">curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable caddy.service</span><br><span class="line">ufw allow http</span><br><span class="line">ufw allow https</span><br><span class="line">setcap cap_net_bind_service=+ep /usr/local/bin/caddy</span><br><span class="line">echo &#x27;&lt;h1&gt;Hello World!&lt;/h1&gt;&#x27; | sudo tee /var/www/index.html</span><br><span class="line"></span><br><span class="line">#Making Caddyfile for Caddy2</span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Configure your Caddy setting$&#123;NC&#125;&quot;</span><br><span class="line">echo -n &quot;Please Enter your Domain name:&quot;</span><br><span class="line">read domain</span><br><span class="line">echo &quot;$domain&quot; &#123; &gt; /etc/caddy/caddy.conf</span><br><span class="line">echo tls &#123; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo &quot;protocols tls1.2 tls1.3&quot; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo curves x25519 &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo @v2ray_websocket &#123; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo path /ray &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo header Connection *Upgrade* &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo header Upgrade websocket &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo -n &quot;Please Enter your V2Ray port&quot;</span><br><span class="line">read PORT</span><br><span class="line">echo reverse_proxy @v2ray_websocket localhost:$PORT &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line">echo &#125; &gt;&gt; /etc/caddy/caddy.conf</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Setup V2ray$&#123;NC&#125;&quot;</span><br><span class="line">echo -n &quot;Please Enter where you put the file:&quot;</span><br><span class="line">read link</span><br><span class="line">echo -n &quot;Please Enter the file name:&quot;</span><br><span class="line">read conffile</span><br><span class="line">wget $Link/$conffile</span><br><span class="line">mv -f  ./$conffile /etc/v2ray/config.json</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Please enter information as required, and press Ctl+c when Caddy running well$&#123;NC&#125;&quot;</span><br><span class="line">caddy run -conf=/etc/caddy/caddy.conf</span><br><span class="line"></span><br><span class="line">echo -e &quot;$&#123;COLOR&#125;Rebooting your VPS for normal operation$&#123;NC&#125;&quot;</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><p>V2ray老實說是個很好用的東西,基本上來說它是一個框架而不是單指一個通訊協議,就算它的設定比較複雜(相對來說啦)但是只要搞懂一遍,就算後面vmess不能使用</p><p>大概也會出一個vmess2或是什麼有用的通訊協定被包進V2Ray的框架內繼續使用</p><p>目前V2ray依照它作為網路流向設定軟體的特性已經包含了以下功能</p><ul><li><p>攔截所有往本機 udp 53的封包指定轉向某特定ip的某個port 實現DNS的功能</p></li><li><p>指定流進某PORT的流量全部以某種通訊協定到指定的IP機器去跑實現proxy的類似功能(梯子)</p></li></ul><p>退一步來說就算不拿來當梯子用,V2ray應該也可以拿來替家裡的網路環境設定防火牆的功能,禁止小孩用家裡網路連上不該連的地方之類的(不過這些功能應該可以直接拿FW來做就好了沒必要這麼麻煩)</p><p>V2ray的相關設定可以參考<a href="https://guide.v2fly.org/advanced/wss_and_web.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE">新V2Ray白話文指南</a>,這裡面寫得很詳細也很實用,基本上只要自己照著改一下就可以用了</p><p>目前的環境下推薦使用Websocket+TLS+Web搭配Cloudflare之類的CDN, 網路上很多教程可以參考</p><h2 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a>Caddy</h2><p>比較Caddy v2的安裝,還是Arch系列的用yay來裝比較簡單,Debian&#x2F;Ubuntu系列的依照它官網的作法是無法使用apt安裝的,所以大叔最後選擇用github上的deb檔進行安裝,缺點就是自動安裝的script的檔案版本得每次都依照最新版本調整</p><p>另外一點就是Arch系的設定檔是*&#x2F;etc&#x2F;caddy&#x2F;caddy.conf*,而用deb安裝的設定檔則是維持*&#x2F;etc&#x2F;caddy&#x2F;Caddyfile*</p><p>後續的使用上要注意才不會出問題</p><h3 id="Caddy2設定"><a href="#Caddy2設定" class="headerlink" title="Caddy2設定"></a>Caddy2設定</h3><p>這個設定檔是完全參考<a href="https://guide.v2fly.org/advanced/wss_and_web.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE">新V2Ray白話文指南</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Caddy v2 (recommended)</span><br><span class="line"></span><br><span class="line">&lt;mydomain.me&gt; &#123;</span><br><span class="line">    log &#123;</span><br><span class="line">        output file /etc/caddy/caddy.log</span><br><span class="line">    &#125;</span><br><span class="line">    tls &#123;</span><br><span class="line">        protocols tls1.2 tls1.3</span><br><span class="line">        ciphers TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</span><br><span class="line">        curves x25519</span><br><span class="line">    &#125;</span><br><span class="line">    @v2ray_websocket &#123;</span><br><span class="line">        path /&lt;your_path&gt;</span><br><span class="line">        header Connection *Upgrade*</span><br><span class="line">        header Upgrade websocket</span><br><span class="line">    &#125;</span><br><span class="line">    reverse_proxy @v2ray_websocket localhost:&lt;your_port_Number&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&lt;mydomain.me&gt; 請改成你的Domain不需&lt;&gt;</p><p><your_path> 請改成你的V2ray設定websocket路徑不需&lt;&gt;</p><p><your_port_Number> 請改成你的V2ray Port number不需&lt;&gt;</p></blockquote><p>其他可以照抄</p><p>嚴格說起來caddy的設定檔因為v2是寫這份才開始導入更新的,所以大叔也不太熟,建議自己去看<a href="https://caddyserver.com/docs/getting-started">Caddy的說明</a></p><h2 id="Client端-Gateway-設定說明"><a href="#Client端-Gateway-設定說明" class="headerlink" title="Client端(Gateway)設定說明"></a>Client端(Gateway)設定說明</h2><h3 id="Qv2ray-Windows-Linux-macOS"><a href="#Qv2ray-Windows-Linux-macOS" class="headerlink" title="Qv2ray -Windows &amp; Linux &amp; macOS"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/qv2ray.jpg" alt="qv2ray" style="zoom: 25%;" /><a href="https://github.com/Qv2ray/Qv2ray">Qv2ray</a> -Windows &amp; Linux &amp; macOS</h3><p>這是一個基於Qt的V2ray圖形介面,基本上要搭配<a href="https://github.com/v2fly/v2ray-core/releases">V2ray-Core</a>一起使用V2ray-Core更新的很快但是基本上它還是相容前三個版本所以問題不大</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco upgrade qv2ray v2ray -y</span><br></pre></td></tr></table></figure><p>這一行基本上就都裝上了,只要打開設定弄一下就好了</p><h4 id="Linux-Archlinux-Manjaro"><a href="#Linux-Archlinux-Manjaro" class="headerlink" title="Linux(Archlinux&#x2F;Manjaro)"></a>Linux(Archlinux&#x2F;Manjaro)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -Syu qv2ray v2ray</span><br></pre></td></tr></table></figure><p>這樣就裝完了</p><h4 id="Linux-其他"><a href="#Linux-其他" class="headerlink" title="Linux(其他)"></a>Linux(其他)</h4><p>官方的Github上有AppImage file可以抓下來直接使用</p><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><p>大叔買不起,不知道,不過官方的Github上面有dmg檔案,應該是抓下來就可以直接安裝使用才對</p><p>相關的說明請參考<a href="https://qv2ray.github.io/en/">Qv2ray官方文件</a></p><h3 id="BifrostV-Android"><a href="#BifrostV-Android" class="headerlink" title="BifrostV - Android"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/unnamed.png" alt="unnamed" style="zoom:10%;" /><a href="https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv">BifrostV</a> - Android</h3><p>​       <a href="https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv"><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/google-play-badge.png" alt="google-play-badge" style="zoom: 33%;" /></a></p><p>按下去就裝完了,沒有辦法上Google play的同學你就想辦法弄到apk安裝囉可以利用Windows環境下的V2ray環境設定proxy讓手機&#x2F;平板連上再安裝囉</p><p>至於手機上沒有google play的同學….那有機會開坑再說吧</p><p>使用請參考<a href="https://ssr.tools/342">強國高手寫的網頁</a></p><h3 id="Shadowrocket-iOS"><a href="#Shadowrocket-iOS" class="headerlink" title="Shadowrocket - iOS"></a><img src="https://raw.githubusercontent.com/Kiwi0093/graph/master/img/246x0w.png" alt="246x0w" style="zoom: 33%;" /><a href="https://apps.apple.com/jp/app/shadowrocket/id932747118">Shadowrocket</a> - iOS</h3><p>只要不是中國apple store帳號的捧油,應該都可以直接在app store上購買這個軟體(沒錯這是唯一一個要錢的,不過會用iPhone的人基本上都不差這點錢)</p><p>但是中國的捧油在沒有辦法的情況下只能<a href="https://shadowsockshelp.github.io/ios/"><del>用這種旁門左道</del>依靠這種好心人士</a>不過好心人的方法很容易衍生其他安裝問題大叔不是專家沒辦法一一解決</p><p>只能靠你們這些求道者去感悟怎麼處理了…</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>結論上來說最有效率的方法就是肉體翻牆,不過即使是大叔到現在還是沒辦法這麼做,所以這篇文章就給有需要的捧油作參考(更多是大叔自己的筆記)希望哪天裡面東西是因為不需要了而過時而非因為技術對抗失敗而過時…</p>]]></content>
      
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大叔的碎碎念 - Hugo+Github</title>
      <link href="/2020/07/06/first-blog-on-github/"/>
      <url>/2020/07/06/first-blog-on-github/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日前看了<a href="https://www.youtube.com/user/homergfunk/featured">CTT</a>的Youtube頻道,發現了Hugo+Github或是Hugo+Netlify的選項也很適合拿來做BLog,考慮到Blogger的編輯模式真的不是那麼先進以及大叔我賣力想轉向Markdown的語法的努力,從這篇開始大叔打算把自己這個沒人看的Blog從Blogger移到github順便學習一下時髦的git方式來管理我的Blog</p><span id="more"></span><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>新的Blog需要用到以下工具</p><ul><li><p><a href="https://gohugo.io/">Hugo</a> - 用來製作靜態網頁的工具有Linux, Windows, MacOS, FreeBSD …etc平台,一個純CLI的工具</p></li><li><p><a href="www.github.com">Github</a> - 可以說是M$最佛心的服務,我們主要是利用他可以免費建立自己的專案以及方便用git指令upload與管理的特點</p></li><li><p><a href="https://remarkable.com/">Remarkable</a> or <a href="https://typora.io/">Typora</a> 等Markdown Editor, 這個主要是可以順手編輯md檔作為Blog文章的本體,也是我更換的最主要原因</p></li><li><p><a href="https://git-scm.com/">git</a> - 超強大的工具基本上只要是linux預設都會先裝上,若是用Windows的話就需要另外裝上</p></li></ul><p>出乎意料的不需要什麼工具,但是因為大叔不熟所以需要參考的資料就相對很多了但是資料其實也不少啦只要上Google查詢一下<em>hugo 教學</em>就一堆了</p><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><h3 id="Hugo安裝"><a href="#Hugo安裝" class="headerlink" title="Hugo安裝"></a>Hugo安裝</h3><p>由於大叔主要都是上班時間偷寫Blog所以主力就使用Manjaro來進行,總之先裝上hugo</p><pre><code>sudo pacman -S hugo</code></pre><h3 id="建立Github-repo"><a href="#建立Github-repo" class="headerlink" title="建立Github repo"></a>建立Github repo</h3><p>這裡建議採用<a href="https://chanmitsu55.github.io/posts/2017/12/create-blog-by-hugo/">chanmitsu55氏</a>的作法進行<br>首先我們會需要一個Github的帳號, 這是免費的請用E-Mail去申請,申請好後請建立兩個repo</p><ol><li>與你的Site同名的repo,大叔的場合就是Blog</li><li>建立一個&lt;user<username>github.io的repo</li></ol><p> 先clone同名的repo作為local端的基本目錄</p><pre><code> git clone https://github.com/&lt;username&gt;/Blog.git</code></pre><h3 id="建立網頁本體-複製網頁本體到Local工作目錄下-加掛Public-submodule"><a href="#建立網頁本體-複製網頁本體到Local工作目錄下-加掛Public-submodule" class="headerlink" title="建立網頁本體&amp;複製網頁本體到Local工作目錄下&amp;加掛Public submodule"></a>建立網頁本體&amp;複製網頁本體到Local工作目錄下&amp;加掛Public submodule</h3><p>然後建立一個新的網站,這個步驟大概就是第一遍需要做而已</p><pre><code>hugo new site _blogcp -p -f -R _blog/* Blog/cd Bloggit submodule add -b master https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git public</code></pre><p>會先複製過來的理由是因為大叔用的Fuji theme是用submodule的方式掛上的,不在git目錄下沒辦法掛submodule<br>另外在hugo還沒生成網頁前先加掛public的原因是反正後面要掛的時候還要<em>rm -rf public</em>才能加掛那還不如在還沒有的時候就掛上</p><h3 id="安裝主題"><a href="#安裝主題" class="headerlink" title="安裝主題"></a>安裝主題</h3><p>這樣我們就有一個基礎的網頁框架了,接著先來裝個Theme,這樣才有具體的樣子<br>大叔比較簡僕,所以挑了一個簡單的主題<a href="https://themes.gohugo.io/hugo-theme-fuji/">Fuji</a>,你們也可以挑自己喜歡的來裝</p><pre><code>cd ~/Bloggit submodule add https://github.com/amzrk2/hugo-theme-fuji.git themes/fuji</code></pre><p>這樣就裝好了Theme,接著就要對這個Theme進行簡單的設定</p><pre><code>cp themes/fuji/exampleSite/config.toml ./cp -R themes/fuji/exampleSite/content/archives ./content/cp -R themes/fuji/exampleSite/content/search ./content/</code></pre><p>這一步其實重要的就是把example裡的config.toml拿來改,另外的兩個是因為我只打算留下archive跟Search的選單所以把他copy過來</p><p>接著編輯config.toml</p><pre><code>vim config.toml</code></pre><p>幾個主要的Item要改一下</p><pre><code>#這個是定義你的主頁網址,請跟你的設定一致baseURL = &quot;https://Kiwi0093.github.io&quot;#這個是你的網頁主要Titletitle = &quot;中年大叔的自言自語&quot;#這個是定義你網頁的主題theme = &quot;fuji&quot;[params]  #這個是作者的名字  author = &quot;Kiwi.L&quot;  #這個是網頁的副標  subTitle = &quot;對應老年癡呆與記憶衰退的筆記&quot;[taxonomies]  #這是定義Tag會使用tags來進行分類  tag = &quot;tags&quot;[menu]  #這個定義的是導向哪邊而非簡單的link  [[menu.nav]]    #這個定義了右邊連結的Home    name = &quot;Home&quot;    #連線是相對位置*/*對應的是*./content*    url = &quot;/&quot;    #這個定義了排序    weight = 1  [[menu.nav]]    name = &quot;Archives&quot;    url = &quot;/archives/&quot;    weight = 2  [[menu.nav]]    name = &quot;Search&quot;    url = &quot;/search/&quot;    weight = 3  #這個定義的是簡單的link  [[menu.link]]    #這個是你想要表現的字串    name = &quot;R2d Blog&quot;    #這個是他的連結    url = &quot;https://roidintw.kaienroid.com/&quot;    #這個一樣是排序    weight = 1</code></pre><h3 id="新文章建立與寫法"><a href="#新文章建立與寫法" class="headerlink" title="新文章建立與寫法"></a>新文章建立與寫法</h3><p>這些弄好基本上的網頁框架就弄好了,接著就寫個簡易的內容</p><pre><code>cd ~/Bloghugo new post/what-ever-you-like-to-name.md</code></pre><p>然後用你喜歡的Editor打開這個檔你會看到</p><pre><code>#這個---不要動---#這個是這個文件的主題會出現在Post的標題上title: &quot;what-ever-you-like-to-name&quot;#這個是時間戳記date: 2020-07-06#這是標記是否為草稿,寫好要正式發出去的文章把這行去掉draft: true#增加tag的寫法tags: [ &quot;A-tag&quot;, &quot;B-tag&quot;, &quot;C-tag&quot; ]#這個---不要動---</code></pre><p>這個編輯上面的內容作為你的這份文件的表頭,然後在下面用Markdown語法直接寫你的Blog內容就好了,到這裡基本的重點已經完成,後面是生成網頁與放到github上</p><h3 id="生成網頁與本機測試"><a href="#生成網頁與本機測試" class="headerlink" title="生成網頁與本機測試"></a>生成網頁與本機測試</h3><p>在放上之前凡請先生成網頁並且用local的看一下是不是自己要的</p><pre><code>cd ~/Bloghugo &amp;&amp; hugo server</code></pre><p>記得依照提示上去看一下還有沒有要調整的沒有就要正式扔上github囉</p><h3 id="自動deploy-script"><a href="#自動deploy-script" class="headerlink" title="自動deploy script"></a>自動deploy script</h3><p>這個部份官方的建議script還有手動輸入commit的部份時常容易忘記,這裡採用[chanmitsu55氏]的版本,等於只是update時間在後面</p><pre><code>#!/bin/bashecho -e &quot;\033[0;32mDeploying updates to GitHub...\033[0m&quot;# Build the project.我們已經在config.toml裡定義了theme所以簡單的hugo就夠了hugo# Go To Public foldercd public# Add changes to git.git add .# Commit changes.msg=&quot;rebuilding site `date`&quot;    if [ $# -eq 1 ]          then msg=&quot;$1&quot;    figit commit -m &quot;$msg&quot;# Push source and build repos.git push origin master# Come Back up to the Project Rootcd ..# Commit source repository changesgit add .git commit -m &quot;$msg&quot;git push</code></pre><p>我不喜歡直接做成執行檔,所以我會把上述內容寫在deploy.sh裡面用下面指令跑</p><pre><code>sh ./deploy.sh</code></pre><p>過程中會要求輸入github的帳號密碼兩次,分別是push Blog跟Public用的不要打錯了</p><h3 id="異地工作"><a href="#異地工作" class="headerlink" title="異地工作"></a>異地工作</h3><p>至於在其他機器上也想編輯時怎麼辦？,基本上只需要以下的指令就可以把東西從頭抓下來</p><pre><code>git clone --recursive https://github.com/&lt;username&gt;/Blog.git</code></pre><p>已經有舊的git folder的機器要可以單純寫新的update就好因為git push&#x2F;pull都是差異比對<br>不是更新版本的不會上傳(有偏執狂而且網路不用錢的可以每次都重新clone啦)<br>這樣就可以確保我們的資料基本上都是存在github上</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
